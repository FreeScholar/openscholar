<?php

/**
 * MODULE SETTINGS - CONSTANTS
 */
//set the date format for the  pop-up datepicker textfield
define(DATE_FORMAT, 'n/j/Y');
define(TIMEZONE, 'EDT');

/**
 * Implemenation of hook_init()
 */
function cp_node_forms_init(){
  drupal_add_js(drupal_get_path('module', 'cp_node_forms') .'/js/cp_node_forms.js');
  drupal_add_css(drupal_get_path('module', 'cp_node_forms') .'/theme/cp-node-forms.css');
}

/**
 * Creates cck group for files and images and places the form element into the group
 */
function cp_node_forms_cck_group($type, $name_prefix = 'group_images_files_', $label =  'Images & Files'){

  $cck = _content_type_info();
 foreach($cck['content types'][ $type]['fields'] as $field){
    if ($field['type'] == 'filefield'){
      $fieldnames[] =  $field['field_name'];
    }
  }
  
  //if filefiled elements exist, create a fieldset (group) for it - If group not exist already
  if (count($fieldnames)){
   $cck_groups = fieldgroup_groups($type);
   
   if (count($cck_groups)){
     foreach ($cck_groups as $group => $values){
       //if group already exists return false - do not try to recreate it
       if ($group == $name_prefix . $type){
         return false;
       }
     }
   }
   
   //below will create a new cck group, using helper function from install_profile_api module
  $path = drupal_get_path('module', 'install_profile_api') . '/contrib';
  include_once "$path/content.inc";

  //first remove the vertical tabs system variable for this type, it will be recreated later
  $var_name = check_plain('vertical_tabs_fieldsets_' . $type);
  variable_del($var_name);
  
  //creating filefield group
   install_create_field_group(
   $content_type = $type, 
   $group_name = $name_prefix . $type, 
   $label, 
   $settings = array(), 
   $weight = 0
   );
  
   //now move the existing fields into this group
   foreach($fieldnames as $fieldname){
    install_fields_in_group(
    $content_type = $type, 
    $group_name =$name_prefix . $type, 
    $fields = array($fieldname)  
    );
   }
  }

  //clear cck cache
  cache_clear_all( 'fieldgroup_data', 'cache_content');
  cache_clear_all('content_type_info', 'cache_content');
}

/**
 * Implementation of hook_node_type
 */
function cp_node_forms_node_type($op, $info){ 
  switch ($op){    
    case 'delete':
      //remove vertical tabs setting if type is deleted - I didn't see where vertical tabs module does this
      $var_name = check_plain('vertical_tabs_fieldsets_' . $info->type);
      variable_del($var_name);
      break;   
  }
}

/**
 * cp_node_forms_get_publishing_options() 
 * A set of rules that define radio button options and text for Publishing Options
 * @param unknown_type $options
 * @param unknown_type $node
 */
function cp_node_forms_get_publishing_options($options, $node = NULL){

  if($node->status == '1'){
    $options[1] = t('Keep this post published');
  }

  if($node->status == '0'){
    $options[0] = t('Keep this post unpublished');
  }
  reset($options);
  return $options;
}

/**
 * cp_node_forms_filefield_group
 * 
 * Returns name of cck group if it contains a filefield form element
 */
function cp_node_forms_filefield_group($form, $type = NULL){
  //getting the group key here - FIX ME - only works for one cck group per form
  foreach ($form as $key =>$val){  
    if (strstr($key, 'group_')){  
      $group = $key;
       break;
    }
  }
  reset($form);
  //if true, then this is not a cck fieldset return false
  if ($form[$group]['#type'] !== 'fieldset'){
    return false;
  }
  
  if ($group){
    //now loop through field information to see it is coming from filefield module
    foreach($form[$group] as $key => $val){
      if (strstr($key, 'field_')){
        $field = $key;
      }
    }
  }
  reset($form);
  return $form['#field_info'][$field]['module'] == 'filefield' ? $group : FALSE;
}

/**
 * cp_node_forms_custom_fieldsets
 * Returns an array of custom fieldsets
 */
function cp_node_forms_custom_fieldsets($form, $type){
  $tax = ($form['taxonomy']['#type'] == 'fieldset') ? 'taxonomy' : 'scholartax';
  //add the custom fieldsets (taxonomy and files & images)
      $custom_fieldsets = array();
      $custom_fieldsets[] = ($tax);     
      $cck_filefield_group= cp_node_forms_filefield_group($form, $type);
      if ($cck_filefield_group){
         $custom_fieldsets[] = $cck_filefield_group;    
      }
     return $custom_fieldsets;
}

/**
 * Implementation of hook_form_alter()
 */
function cp_node_forms_form_alter(&$form, $form_state, $form_id) {
  global $conf;

  vsite_include('vsiteapi');
  $types = array_keys(vsite_content_types());

  //if editing an exisitng node, load the node
  $node = isset($form['#node']->nid) ? node_load(array('nid' => $form['#node']->nid)) : NULL;

  //create options for publishing status radios
  $default_options =  _cp_node_forms_default_options();
  $options = cp_node_forms_get_publishing_options($default_options, $node);

  foreach($types as $type){
    if ($type . '_node_form' == $form_id) {

      //temporary placement of this function, CLEARING THIS VAR EVERY TIME IS UNESSESARY
      _cp_node_forms_clear_vertical_tabs($form['type']['#value']);

      //create cck fieldgroup and move the filefield form elements - only if necessary
      if (cp_node_forms_cck_group($type)){

        //clear the cck cache
        cache_clear_all('fieldgroup_data', 'cache_content');
        cache_clear_all($cid = 'content_type_info', 'cache_content');

        //if new cck fieldgroup was created clear vertical tabs for this type
        _cp_node_forms_clear_vertical_tabs($form['type']['#value']);

      }

      //if there is no vertical tabs system variable for this type, then set it here
      if(!$conf['vertical_tabs_fieldsets_'. $type]){
        //add the default fieldsets
        $default_fieldsets = vertical_tabs_fieldsets($type);
        //add the custom fieldsets (taxonomy and files)
        $custom_fieldsets = cp_node_forms_custom_fieldsets($form, $type);
        //set the system variable combine both default and custom fieldsets
        variable_set(check_plain('vertical_tabs_fieldsets_'. $type), array_merge($default_fieldsets, $custom_fieldsets));
        //dpm($custom_fieldsets);
      }

      /*** Scholar Site Selection ***/
      $val = $form['spaces_og']['gid']['#default_value'];
      unset($form['spaces_og']);
      $form['spaces_og']['#type'] = 'value';
      $form['spaces_og']['#value'] = array('gid' => $val);

      /*** Tags & Categories Section (Taxonomy) ***/

      //if the form has taxonomy
      if ($form['taxonomy']) {
        if($form['taxonomy']['#type'] == 'fieldset'){
          //if taxonomy fieldset already exists, just change title
          $form['taxonomy']['#title'] = 'Tags & Categories';
          $form['taxonomy']['#weight'] = 2;
        }
        //no fieldset exists for taxonomy
        else{
          $form['scholartaxonomy'] = array(
          '#type' => 'fieldset',
          '#title' => t('Tags & Categories'),
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
          '#weight' => 2,
          );

          //add a description or new title, etc.
          $form['taxonomy'][1]['#description'] = t('Select the appropriate category for this post');

          $scholartax =  $form['taxonomy'];
          unset($form['taxonomy']);
          $form['scholartaxonomy']['taxonomy'] =  $scholartax;
        }
      }
      /*** Publishing Options Section ***/

      //unset 'Publish' checkbox
      unset($form['options']['status']);

      $form['options']['promote'] = array(
      '#type' => 'checkbox',
      '#title' => t(cp_node_forms_get_frontpage_text($node)),
      '#description' => t('This keeps the post on top of any list postings'),
      '#default_value' => $promote_val = isset($node) ? $node->promote : cp_node_forms_get_workflow($type, $keyword = 'promote'),
      '#weight' => 1,
      '#prefix' => '<div id="pub-options">',
      );
      $form['options']['sticky'] = array(
      '#type' => 'checkbox',
      '#title' => t('Make Prominant'),
      '#description' => t('This keeps the post on top of any list postings'),
      '#default_value' => $sticky_val = isset($node) ? $node->sticky : cp_node_forms_get_workflow($type, $keyword = 'sticky'),
      '#weight' => 2,
      '#suffix' => '</div>',
      );

      //this value sets pubstatus radio button value to last selected choice
      //for existing nodes and defaults 'publish' for new nodes
      $pubstatus_value = cp_node_forms_get_pubstatus($node, $type);

      $form['options']['pubstatus'] = array(
      '#type' => 'radios',
      '#options' => $options,
      '#default_value'  => $pubstatus_value,
      '#weight' => 3,
      '#required' => TRUE,
      '#prefix' => '<div id="pub-time">',
      '#suffix' => '</div>',
      );

      //need to hide this field with jquery unless radio for pubdate is selected
      $form['options']['pubdate'] = array(

      '#title' => t('Publish on'),
      '#type' => 'date_popup',
      '#date_format' => DATE_FORMAT,
      '#default_value' => cp_node_forms_publishdate_value($node, $pubstatus_value),
      '#weight' => 4,
      '#prefix' => $node->pubstatus == 2 ? '' : '<div id="pubdate" class="hide-puboption">',
      '#suffix' => $node->pubstatus == 2 ? '' : '</div>',
      );

      // adding validation function
      $form['#validate'][] = 'cp_node_forms_form_validate';
    }
  }
  //adding submit function for bio (page) node type
  if ($form_id == 'page_node_form'){
    $form['frontpage']['#type'] = 'value';
    $form['frontpage']['#value'] = ($_GET['frontpage'] == 'true') ? 1 : 0;
  }
}
 
/**
 * Validation logic here mainly used to convert $form_state values 
 * retrieved form 'pubstatus' option for core Drupal node form handler
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function cp_node_forms_form_validate($form, &$form_state){ 

  switch($form_state['values']['pubstatus']){

    case 1:
      //publish node
      $form_state['values']['status'] = 1;
      break;
      
   case 0:
      //unpublish node
      $form_state['values']['status'] = 0;
      //need to save a revision
      $form_state['values']['revision'] = 1;
       break;
       
    case 2:
      
      $form_state['values']['status'] = 0;
      
      //if the form is set to "Publish on another date" and no date is selected
      if (!isset($form_state['values']['pubdate'])){   
      form_set_error('pubdate', t('A date needs to be selected for this node to be published.'));
      }
      
      //if the form is set to "Publish on another date" and the date selected is prior to today's date, return form error
       if (isset($form_state['values']['pubdate']) && (date_convert($form_state['values']['pubdate'], DATE_DATETIME, DATE_UNIX, TIMEZONE) < time() )) {   
      form_set_error('pubdate', t('When choosing "Publish on another date", you must select a date that occurs after today\'s date.'));
      }      
      break;
  }
}

/**
 * Returns default options radio button list
 */
function _cp_node_forms_default_options(){
  return array(
   1 => t('Publish now'),
   0 => t('Save as draft (Unpublish this post)'),
   2 => t('Publish on another date'),
  );
}

/**
 * cp_node_forms_publishdate_value()
 * @return Returns value for 'pubdate' date fiel
 */
function cp_node_forms_publishdate_value($node = NULL, $pubstatus_value = NULL){
  //this is an existing node
  if (isset($node)){
    if($pubstatus_value == 0 || 1){
      $value = '';
    }
    if($pubstatus_value == 2){
     $value = format_date($node->pubdate, $type = 'custom', $format = "Y-m-d");
    }

    //this is a new node
    else{
      $value = '';
    }
    return $value;
  }
}


/**
 * Returns text for title and description for Make Prominant checkbox
 * depending on current status
 */
function cp_node_forms_get_frontpage_text($node = NULL){
  if($node){
    $title = ($node->promote == '1') ? 'Keep on Front Page' : 'Promote to front page';
  }
  else{
    $title = 'Promote to front page';
  }
  return $title;
}

/**
 * Implementation of hook_nodeapi
 *
 * @param unknown_type $node
 * @param unknown_type $op
 */
function cp_node_forms_nodeapi(&$node, $op){
  switch($op){

    case 'load':
      $pubstatus = cp_node_forms_get_pubstatus($node);
      $node->pubstatus = $pubstatus;
      
      if ($pubstatus == 2){
      $node->pubdate = db_result(db_query("SELECT pubdate from {cp_node_forms} WHERE nid = %d", (int)$node->nid));
      }
      break;

      
      case 'presave':
        //if content is being generated programicatically with node_save, such as devel generate
        if (!isset($node->pubstatus)){
          $node->status =  cp_node_forms_get_pubstatus($node, $node->type);
        }
        else{
          switch ($node->pubstatus) {
            case 1:
              $node->status = 1;
              db_query("DELETE FROM {cp_node_forms} WHERE nid = %d", (int)$node->nid);
              break;

            case 0:
              $node->status = 0;
              db_query("DELETE FROM {cp_node_forms} WHERE nid = %d", (int)$node->nid);
              break;
          }
        }
      
    case 'insert':
      
        //if frontpage is set to true in URL, then make bio frontpage type and set the node as frontpage
      /*  if ($node->frontpage == 1){
          $space = spaces_get_space();
          $space->settings['front']['frontpage'] = 'bio';
          $space->settings['bio']['nid'] =$node->nid;
          spaces_save($space);
        }*/
                 
        if ($node->pubstatus == 2) {
          $pubdate =  date_convert($node->pubdate, DATE_DATETIME, DATE_UNIX, TIMEZONE);
          $sql = db_query("INSERT INTO {cp_node_forms} (nid, pubdate) VALUES (%d, %d)", (int)$node->nid, $pubdate);
          break;
        }
          

    case 'update':
      if ($node->pubstatus == 2){
        $sql_delete = db_query("DELETE FROM {cp_node_forms} WHERE nid = %d", (int)$node->nid);
        
        //convert $node->pubdate into unix timestamp
        $pubdate = date_convert($node->pubdate, DATE_DATETIME, DATE_UNIX, TIMEZONE);
        $sql = db_query("INSERT INTO {cp_node_forms} (nid, pubdate) VALUES (%d, %d)",
        (int)$node->nid,  $pubdate);
      }
      break;
      
      case 'delete': 
      //remove bio setting if node being deleted is set as default bio
      $space = spaces_get_space();
      if ($node->nid == $space->settings['bio']['nid']){
        unset($space->settings['bio']);
        spaces_save($space);        
      }
      $sql_delete = db_query("DELETE FROM {cp_node_forms} WHERE nid = %d", (int)$node->nid);
      break;
  }
}

/**
 * Promote to Front Page and Make Prominent options for new nodes
 * will used pre-defined settings if already defined by user
 */
function cp_node_forms_get_workflow($type, $keyword){
  //check to see if custom settings defined for this content type
  $type_settings = variable_get('node_options_' . $type,'');
  if ($type_settings && is_array($type_settings)){
    if (in_array($keyword, $type_settings)){
      return 1;
    }
    //if no custom node setting for these options then default to off for both settings
    return 0;
  }
}

/**
 * Function to return pubstatus radio button setting
 *
 * @param unknown_type $node
 * @return  $pub the returned setting to the form
 */
function cp_node_forms_get_pubstatus($node = NULL, $type = NULL){
  if (isset($node)){
    if ($node->status == '1'){
      return 1;
    }
    else{
    //editing an exisiting node, populate the choice that the user last selected
    $pubdate = db_result(db_query("SELECT pubdate FROM {cp_node_forms} WHERE nid = %d", (int)$node->nid));
    return ($pubdate > 0) ? 2 : 0; 
    }
      
  }
  else{
    //creating new node

    //check to see if custom settings defined for this content type
    $type_settings = variable_get('node_options_' . $type,'');
    if ($type_settings && is_array($type_settings)){
      //if status is a value in $type_settings array then content type has been set to 'publish now' by default
      if (in_array('status', $type_settings)){
        return 1;
      }
      //custom settings are set to not publish by default
      //TODO: maybe return 'save as draft' or should I not return any choice here ???
      else {
        return 0;
      }
    }
    //if no custom settings are found for this content type, then make 'publish now' the default
    else{
      return 1;
    }
  }
}

/**
 * Helper fucntion removes specified vertical tabs variable
 */
function _cp_node_forms_clear_vertical_tabs($type){
  variable_del('vertical_tabs_fieldsets_'. $type, array());
}

/**
 * Implementation of hook_cron()
 */
function cp_node_forms_cron(){
  $today = format_date(time(), $type = 'custom', $format = "Y-m-d");

  $sql = db_query("SELECT * from {cp_node_forms}");
  while($data = db_fetch_object($sql)){
    if ($today == format_date($data->pubdate, $type = 'custom', $format = "Y-m-d") ){
      
      //set the node as published
      $sql_update = db_query("UPDATE {node} SET status = %d WHERE nid = %d", 1, (int)$data->nid);      
     
      //now reset the row and mark it as published in the cp_node_forms table
      $sql_delete_row = db_query("DELETE FROM {cp_node_forms} WHERE nid = %d", (int)$data->nid);
    }
  }
}

