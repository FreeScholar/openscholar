<?php
// $Id: activity.install,v 1.1.2.1.2.6.2.4.2.7 2009/06/14 22:50:26 scottreynolds Exp $

function activity_install() {
  drupal_install_schema('activity');
}

function activity_schema() {
  $schema['activity'] = array(
    'description' => 'Provides a place to record activity messages for display.',
    'fields' => array(
      'aid' => array(
        'description' => 'The primary identifier for any activity',
        'type' => 'serial',
        'not null' => TRUE,
        'disp-width' => '11',
        'unsigned' => TRUE,
      ),
      'uid' => array(
        'description' => 'The user id of whomever performed the activity being recorded.',
        'type' => 'int',
        'not null' => TRUE,
        'disp-width' => '11',
      ),
      'op' => array(
        'description' => 'The operation being performed (update, insert, etc.)',
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of object being acted upon (node, user, etc.)',
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
       ),
      'nid' => array(
        'description' => t('A foreign key used with node_access table. Can be NULL for all non-node, comment activities'),
        'type' => 'int',
      ),
      'created' => array(
        'description' => t('When the activity was recorded'),
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('aid'),
    'indexes' => array(
      'nid' => array('nid'),
    ),
  );
  
  $schema['activity_targets'] = array(
    'fields' => array(
      'aid' => array(
        'description' => 'Foreign key to the activity table',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'uid' => array(
        'description' => "The uid for which this message is for",
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'amid' => array(
        'description' => "The message id for this uid/aid combination",
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('aid', 'uid'),
  );
  
  $schema['activity_messages'] = array(
    'fields' => array(
      'amid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'description' => 'The Unique id of the message',
      ),
      'message' => array(
        'descripiton' => 'The full plaintext message',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('amid'),
  );

  $schema['activity_access'] = array(
    'description' => 'Provides access control on a very granular level to activity items',
    'fields' => array(
      'aid' => array(
        'description' => 'The primary identifier for an activity',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'realm' => array(
        'description' => 'The module providing the access control',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'value' => array(
        'description' => 'The provided value from the implementing module. E.g a uid, nid or a tid',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
      ),
    ),
    // UGG!!!
    'primary key' => array('aid', 'realm', 'value'),
  );
  return $schema;
}

function activity_uninstall() {
  drupal_uninstall_schema('activity');

  // clean up actions and triggers
  db_query("DELETE FROM {trigger_assignments} WHERE aid IN (SELECT aid FROM {actions} WHERE callback = 'activity_record')");
  db_query("DELETE FROM {actions} WHERE callback = 'activity_record'");

  // clean variable table
  db_query("DELETE FROM {variable} WHERE name = 'activity_expire' OR name = 'activity_count_expire' OR name = 'activity_access_realms'");
}

/**
 * Implementation of hook_requirements().
 */
function activity_requirements($phase) {
  $requirements = array();
  $t = get_t();
  if ($phase == 'runtime') {
	  $views_schema_version = db_result(db_query("SELECT schema_version FROM {system} WHERE name = 'views'"));
	  if (intval($views_schema_version) < 6006) {
	    $requirements['activity_views'] = array(
	      'title' => $t('Activity Views'),
	      'description' => $t('Activity2 requires Views >= 6.2. It can be downloaded <a href=\'!release\'>here</a>. The change that is required by Activity2 is <a href=\'!issue\'>#419270</a>', array('!release' => 'http://drupal.org/node/488082', '!issue' => 'http://drupal.org/node/419270')),
	      // set the severity to warning on install because we don't want to stop the install...
	      'severity' => ($phase == 'install') ? REQUIREMENT_WARNING : REQUIREMENT_ERROR,
	    );
	  }
  }
  return $requirements;
}