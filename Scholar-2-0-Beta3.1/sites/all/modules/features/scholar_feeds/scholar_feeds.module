<?php

include_once('scholar_feeds.features.inc');

/**
 * hook strongarm
 */
function scholar_feeds_strongarm(){
  $conf = array();
  $conf['feedapi_settings_feed'] = 
  array (
    'enabled' => 1,
    'upload_method' => 'url',
    'refresh_on_create' => 1,
    'update_existing' => 0,
    'refresh_time' => '0',
    'items_delete' => '1209600',
    'parsers' => 
    array (
      'parser_common_syndication' => 
      array (
        'enabled' => 1,
        'weight' => '0',
      ),
    ),
    'processors' => 
    array (
      'feedapi_node' => 
      array (
        'enabled' => 1,
        'weight' => '1',
        'content_type' => 'feed_item',
        'input_format' => '1',
        'node_date' => 'current',
        'x_dedupe' => '1',
      ),
      'feedapi_inherit' => 
      array (
        'enabled' => 1,
        'weight' => '2',
        'inherit_og' => 1,
        'inherit_taxonomy' => 1,
        'inherit_author' => 1,
      ),
    ),
  );

  $conf["show_preview_changes_feed"] = FALSE;
  $conf["show_diff_inline_feed"] = FALSE;
  $conf["show_preview_changes_feed_item"] = FALSE;
  $conf["show_diff_inline_feed_item"] = FALSE;
  

  $conf['node_options_feed'] = array('status');
  $conf['node_options_feed_item'] = array('status');
  $conf['upload_feed'] = FALSE;
  $conf['upload_feed_item'] = FALSE;
  
 
  // Comments
  $conf['comment_feed'] = COMMENT_NODE_DISABLED;
  $conf['comment_feed_item'] = COMMENT_NODE_DISABLED;
  
 
  // Pathauto (optional) settings
  $conf["pathauto_node_feed_pattern"] = "[space-og-path]/feeds/[title-raw]";
  $conf["pathauto_node_feed_item_pattern"] = "[space-og-path]/feed_items/[title-raw]";
  return $conf;
}


/**
 * hook  vsite_content_types_alter
 */
function scholar_feeds_vsite_content_types_alter(&$content_types){
  unset($content_types['feed_item']);
}

/**
 * Implementation of hook_context_links_alter().
 */
function scholar_feeds_context_links_alter(&$links) {
  if (!empty($links['feed_item'])) {
    unset($links['feed_item']);
  }
  if (!empty($links['feed'])) {
    $links['feed']['query'] = drupal_get_destination();
  }
}

/**
 * Implementation of hook_form_alter().
 * Used to add validation to the feed addition
 */
function scholar_feeds_form_alter(&$form, $form_state, $form_id) {
  // Content type form.
  if ($form_id == 'feed_node_form' && $form['type']['#value'] == 'feed') {
    $form['#validate'][] = 'scholar_feeds_feed_validate';
  }
}

/**
 * Validate the feed
 * 
 * @param $form
 * @param $form_state
 */
function scholar_feeds_feed_validate($form, &$form_state) {
  if (!strlen($form_state['values']['feedapi']['feedapi_url'])) {
    return;
  }
	
  $form_state['values']['feedapi']['feedapi_url'] = trim($form_state['values']['feedapi']['feedapi_url']);
  
  $success = (valid_url($form_state['values']['feedapi']['feedapi_url'],true) && ($status = drupal_http_request($form_state['values']['feedapi']['feedapi_url'])) && !strlen($status->error));
  if(!$success){
  	form_error($form, t('Can\'t connect to '.$form_state['values']['feedapi']['feedapi_url'].'. Invalid feed URL, please check that the URL is valid.'), 'error');
  }
}