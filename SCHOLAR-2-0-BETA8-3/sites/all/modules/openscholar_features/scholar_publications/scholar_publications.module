<?php
include_once('scholar_publications.features.inc');

function scholar_publications_init(){

	static $init_run;

	if(!isset($init_run)){
		$init_run = true;
		$space = vsite_get_vsite();

	  if($space){
	    global $conf;
	    require_once drupal_get_path('module', 'scholar_publications') .'/scholar_publications.settings.feature.inc';

	    scholar_publications_settings_feature::customize($space, 'style',$conf['biblio_style']);
	    scholar_publications_settings_feature::customize($space,'bkn_contrib_lookup_allow_autocomplete',$conf['bkn_contrib_lookup_allow_autocomplete']);
	    scholar_publications_settings_feature::customize($space,'bkn_contrib_lookup_mode',$conf['bkn_contrib_lookup_mode']);
	    scholar_publications_settings_feature::customize($space,'sort',$conf['biblio_sort']);
	    scholar_publications_settings_feature::customize($space,'sort_tabs',$conf['biblio_sort_tabs']);
	    scholar_publications_settings_feature::customize($space,'order',$conf['biblio_order']);
	    scholar_publications_settings_feature::customize($space,'rowsperpage',$conf['rowsperpage']);
	    scholar_publications_settings_feature::customize($space,'export_links', $conf['biblio_export_links']);
	    scholar_publications_settings_feature::customize($space,'google_link', $conf['biblio_google_link']);
	    scholar_publications_settings_feature::customize($space,'no_publication_date', $conf['biblio_no_year_text']);
	    scholar_publications_settings_feature::customize($space,'note_in_teaser', $conf['scholar_publication_note_in_teaser']);
	    scholar_publications_settings_feature::customize($space,'link_title_url', $conf['biblio_link_title_url']);
	    scholar_publications_settings_feature::customize($space,'author_links', $conf['biblio_author_links']);

	  }
	}

	jquery_ui_add(array('ui.tabs'));
}

/**
 *  hook_strongarm().
 */
function scholar_publications_strongarm() {

  $conf['biblio_sort_tabs'] = array('author'=>'author', 'title'=>'title', 'type'=>'type', 'year'=>'year'); //Change the default
  $conf['node_options_biblio'] = array('status', 'revision');
  $conf['upload_biblio'] = TRUE;

  $conf["show_preview_changes_biblio"] = FALSE;
  $conf["show_diff_inline_biblio"] = FALSE;

  // Comments
  $conf['comment_biblio'] = COMMENT_NODE_DISABLED;

  // Pathauto (optional) settings
  $conf["pathauto_node_biblio_pattern"] = "[space-og-path]/publications/[title-raw]";

  return $conf;
}


/**
 * Implementation of hook_context_links_alter().
 */
function scholar_publications_context_links_alter(&$links) {
  if (! empty ( $links ['biblio'] )) {
    $links ['importbiblio'] = array (
      'title' => 'Import publications',
      'href' => 'publications/import',
      'query' => drupal_get_destination(),
      'custom' => TRUE
    );

    $links['biblio']['query'] = drupal_get_destination();
    $links ['biblio'] ['title'] = "publication";

    $links = array_reverse($links);
  }
}

function scholar_publications_menu(){
  $items["publications"] = array(
    'title' => 'Publications',
    'page callback' => 'scholar_publications_overview',
    'access callback' => 'spaces_feature_access',
    'access arguments' => array('scholar_publications'),
    'menu_name' => 'features',
  );

  // import export
   $items['publications/import'] = array(
    'title'             => 'Import',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('biblio_import_form'),
    'file'              => 'biblio.import.export.inc',
    'file path'         => drupal_get_path('module', 'biblio'),
    'access callback'   => 'user_access',
    'access arguments'  => array('import from file'),
    //'type'              => MENU_LOCAL_TASK,
    'type'              => MENU_CALLBACK,
    'weight'            => 10,
   );

  return $items;
}

/**
 * Implementation of hook_spaces_settings().
 */
function scholar_publications_spaces_settings() {
  return array(
    'scholar_publications' => array(
      'class' => 'scholar_publications_settings_feature',
      'file' => drupal_get_path('module', 'scholar_publications') .'/scholar_publications.settings.feature.inc',
    ),
  );
}

/**
 * hook form_alter
 * Alter the import publications form
 */
function scholar_publications_form_alter(&$form, $form_state, $form_id){

  $show_form_ids = array('content_field_overview_form', 'content_display_overview_form');
  //only show the 'field_biblio_image' field for book or book chapter nodes
  if ($form_id == 'biblio_node_form' && in_array($form['biblio_type']['#default_value'], array(100,101))){
    $form['field_biblio_image']['#access'] = TRUE; //only show the 'field_biblio_image' field for book or book chapter nodes
  }
  elseif(in_array($form_id, $show_form_ids)){
    $form['field_biblio_image']['#access'] = TRUE;  // show the book cover image field on the content field/display edit forms
  }
  else{
    $form['field_biblio_image']['#access'] = FALSE;
  }

  if ($form_id == 'biblio_import_form') {
    // the original form is asking to set the userID for these entries
    // Just the group admin for now. TODO list of users for this og

    $vsite = vsite_get_vsite();
    //$group_node = og_get_group_context();
    $uid = $vsite->group->uid;
    $form['userid'] = array(
      '#type' => 'value',
      "#value" => $uid
    );
    $form['batch_process'] = array(
      '#type' => 'value',
      "#value" => 1
    );
    $form['filetype']['#type'] = 'radios';
    unset($form['filetype']['#options']['0']);
    $form['filetype']['#default_value'] = 'bib';
    // just unset the taxonomy settings for now.
    unset($form['import_taxonomy']);
  }
  elseif (isset($form['#node']) && $form['#node']->type === 'biblio' && $form_id == $form['#node']->type .'_node_form') {
  	if($form_state['storage']['biblio_type'] || $form['#node']->biblio_type){
  		_scholar_publications_modify_contributor($form);
  	}else{
  	  scholar_publications_hide_form_value($form['biblio_doi_lookup']);
      scholar_publications_hide_form_value($form['biblio_cut_paste']);
    }

    if(is_array($form['biblio_notes_field']) && is_array($form['biblio_notes_field']['biblio_notes'])){
    	$form['biblio_notes'] = $form['biblio_notes_field']['biblio_notes'];
      unset($form['biblio_notes_field']);
    }

  	if(array_key_exists('other_fields',$form)) scholar_publications_hide_form_value($form['other_fields']);
  	if(array_key_exists('biblio_keywords',$form)){
    	scholar_publications_hide_form_value($form['biblio_keywords']);
    	if(array_key_exists('taxonomy',$form) && array_key_exists('copy_to_biblio',$form['taxonomy'])){
    		$form['taxonomy']['copy_to_biblio']['#default'] = 1;
    		scholar_publications_hide_form_value($form['taxonomy']['copy_to_biblio']);
    	}
    }
    $form['submit_type'] = array('#type' => 'submit', '#disabled' => true, '#access' => false, '#value' => t('Select Publication Type'));
    
    
    //format Contributors fieldset
    /*
    $form['contributors2_wrapper'] ['biblio_secondary_authors_more']['#value'] = 'More Contributors';
   if($form['biblio_type']['#default_value']){
      foreach($form['contributors2_wrapper'] ['biblio_contributors'][2] as $key => $val){
        if (is_numeric($key)){
          $form['contributors2_wrapper'] ['biblio_contributors'][2][$key]['auth_type']['#default_value'] = 14; //set default to 'Editor'
        }
      }
    }
    $form['contributors2_wrapper'] ['#collapsed'] = TRUE;
    */
    
    if(!$form['#vertical_tabs']) $form['#vertical_tabs'] = array();
    $form['#vertical_tabs']['biblio_abst_e_field'] = 0; //Disable vert. tabs
    $form['#vertical_tabs']['body_field'] = 0; //Disable vert. tabs
    $form['#vertical_tabs']['contributors1_wrapper'] = 0; //Disable vert. tabs
    $form['#vertical_tabs']['contributors2_wrapper'] = 0; //Disable vert. tabs
    
  }
}

function scholar_publications_hide_form_value(&$element){
  foreach(element_children($element) as $s_key){
    $element[$s_key]['#type'] = 'value';
    vsite_users_hide_form_value($element[$s_key]);;
  }
  $element['#type'] = 'value';
}

function scholar_publications_overview(){
	$vsite = vsite_get_vsite();
  module_load_include('inc', 'biblio', 'biblio.pages');
  //page title = the name of the menu they have in settings or "Publications"
  $page_title = (is_array($vsite->customizer['menu']) && isset($vsite->customizer['menu']['publications'])) ? $vsite->customizer['menu']['publications'] : "Publications";
  variable_set('biblio_base_title', $page_title);

  $a_args = func_get_args();
  $s_bib_out =  call_user_func_array('biblio_db_search',$a_args);

  if(isset($_REQUEST['format'])){
  	require_once(drupal_get_path('module','biblio').'/biblio.import.export.inc');
  	return biblio_export($_REQUEST['format']);
  }

  global $pager_total_items;
  if(is_array($pager_total_items) && $pager_total_items[0] > 0){
  	return $s_bib_out;
  }

  //Display Empty Result Text
  $contexts = context_enabled_contexts();
  $nodetype = null;
  if(array_key_exists('scholar-feature-publications',$contexts) && ($context = $contexts["scholar-feature-publications"])){
    if (!empty($context->node)) {
      reset($context->node);
      $nodetype = current($context->node);
    }
  }

  return vsite_empty_view_message($nodetype,$vsite);
}

/**
 * hook db_rewrite_sql
 *
 */
function scholar_publications_db_rewrite_sql($sql, $primary_table, $primary_field,  $args) {

  $vsite = vsite_get_vsite();
  $gid = $group_node -> nid;
  $base_url = 'publications'; //og_settings_variable_get($gid, 'og_biblio_base', 'biblio');
  if ($vsite  && arg(0) == $base_url && strstr($sql,"biblio") !== false){
    if ($primary_table == 'n' && strstr($sql, 'biblio')){
      $query['join'] = 'INNER JOIN {og_ancestry} oga ON n.nid = oga.nid';
      $query['where'] =  'oga.group_nid = '. $vsite -> sid;
      return $query;
	  }
  }
}

/**
 * hoook nodeapi
 */
function scholar_publications_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if ($node -> type != 'biblio') return;
  switch ($op) {
  	case 'load':
  	  $s_orig_text = variable_get('biblio_no_year_text', t('Submitted'));
  	  scholar_publications_init(); //Run the customizations since they probably have not run by this point (they only run once anyway)
  			//rerun this since it was run before customization
 		  if($node->biblio_year){
  	  	if($node->biblio_year === $s_orig_text) $node->biblio_year = 9999;
  		  $node->biblio_year = _biblio_text_year($node->biblio_year);
  	  }
  	break;
    case 'presave':

      $vsite = vsite_get_vsite();
      $gid = $vsite -> sid;
      $node -> og_groups = array($gid);
    break;
    case 'update':
      drupal_set_message('publication node updated');
    case 'insert':
    	//Associate biblio authors with site owners
      if(!empty($node->biblio_contributors)){
        $md5 = _loadMD5();
        foreach ($node->biblio_contributors as $cat => $authors) {
          foreach ($authors as $key => $author) {
          	if(!$author['vsite_owner']) continue; //Is this the site owner

            if (empty ($author['cid']) && !empty ($md5)) $author['cid'] = array_search($author['md5'], $md5);
            $vsite = vsite_get_vsite();

            if (empty($author['cid']) || !$author['cid'] || !$vsite) continue; //Do we have the CID

            db_query("UPDATE {biblio_contributor_data} SET drupal_uid = 0 WHERE drupal_uid = %d", $vsite->group->uid);
            db_query('UPDATE {biblio_contributor_data} set drupal_uid = %d WHERE cid = %d ', $vsite->group->uid, $author['cid']);
            break(2);//We are done
          }
        }
      }
    break;
    case 'view':
      if($teaser && variable_get('scholar_publication_note_in_teaser',false) && $node->biblio_notes){
      	$node->content['teaser']['#value'] .= ' <span class="biblio-note">'. check_plain($node->biblio_notes) ."\n</span>";
      }
      if($teaser && biblio_access('export', $node)){
	      $links = array();
        $show_link = variable_get('biblio_export_links', array('rtf' => TRUE, 'tagged' => TRUE, 'xml' => TRUE, 'bibtex' => TRUE));
		    $show_link['google'] = variable_get('biblio_google_link', 1);
		    if ($show_link['rtf'])    $links['biblio_rtf']            = _build_biblio_rtf_link($base, $node->nid);
		    if ($show_link['tagged']) $links['biblio_tagged']         = _build_biblio_tagged_link($base, $node->nid);
        if ($show_link['xml'])    $links['biblio_xml']            = _build_biblio_xml_link($base, $node->nid);
		    if ($show_link['bibtex']) $links['biblio_bibtex']         = _build_biblio_bibtex_link($base, $node->nid);
		    if ($show_link['google']) $links['biblio_google_scholar'] = _build_google_scholar_link($node);
		    $node->content['teaser']['#value'] .= theme('ctools_dropdown', t('Export'), $links, false, 'biblio-export');
      }
    break;
  }
}

/**
 * Define the scholar publication blocks with hook block
 */
function scholar_publications_block($op = 'list', $delta = false, $edit = array()) {
  if ($op == 'list') {
    $blocks['co_authors']['info'] = t('Co-Authors List');
    $blocks['pub_by_type']['info'] = t('Recent Publications by type');
    return $blocks;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 'co_authors':
        return _scholar_publications_co_author_wgt();
      case 'pub_by_type':
        return _scholar_publications_pub_by_type_wgt();
    }
  }
}

/**
 * hook vsite_sidgets

 */
function scholar_publications_vsite_widgets(){
  $items = array();
  $items['views_scholar_publications-block_1'] = array(
        'module' => 'views',
        'delta' => 'scholar_publications-block_1',
        'weight' => 20,
        'region' => false,
        'status' => '0',
        'label' => 'Recent publications',
        'type' => 'context_ui',
      );

  $items['scholar_publications_co_authors'] = array(
        'module' => 'scholar_publications',
        'delta' => 'co_authors',
        'weight' => 20,
        'region' => false,
        'status' => '0',
        'label' => 'Co-Authors List',
        'type' => 'context_ui',
      );
  /**
  $items['scholar_publications_pub_by_type'] = array(
        'module' => 'scholar_publications',
        'delta' => 'pub_by_type',
        'weight' => 20,
        'region' => false,
        'status' => '0',
        'label' => 'Publications by type',
        'type' => 'context_ui',
      );
  **/

  // Publication Types
  $items['views_publication_types-block_1'] = array(
    'module' => 'views',
    'delta' => 'publication_types-block_1',
    'weight' => 10,
    'region' => false,
    'status' => '0',
    'label' => 'Publications By Type',
    'type' => 'context_ui',
  );

  // Publication Years
  $items['views_publication_years-block_1'] = array(
    'module' => 'views',
    'delta' => 'publication_years-block_1',
    'weight' => 11,
    'region' => false,
    'status' => '0',
    'label' => 'Publications By Year',
    'type' => 'context_ui',
  );

  // Publication Contributors
  $items['views_publication_contributors-block_1'] = array(
    'module' => 'views',
    'delta' => 'publication_contributors-block_1',
    'weight' => 11,
    'region' => false,
    'status' => '0',
    'label' => 'Publications By Co-Author',
    'type' => 'context_ui',
  );
  return $items;
}

/**
 * Adjust the "Recent Publications View" if there are no publications
 *
 * @param $view view
 * @param $s_display_handler_output string
 * @param $cache
 * @return none
 */
function scholar_publications_views_post_render($view, &$s_display_handler_output, $cache){
	if($view->name == 'scholar_publications' && $view->current_display == 'block_1' && !count($view->result)){
		$s_display_handler_output = ''; //Do no display when there are no publications
	}
}

function scholar_publications_preprocess_views_view(&$vars) {
  if($vars['view']->name == 'publication_years') {
    // Override the page title
    if($vars['view']->current_display == 'page_1') {
      $vars['view']->build_info['title'] = preg_replace_callback('#\d{4}#', create_function('$matches', 'return _biblio_text_year($matches[0]);'), $vars['view']->build_info['title']);
      drupal_set_title($vars['view']->build_info['title']);
    }
  }
}

/**
 * Implementation of hook_preprocess_block()
 *
 * @param $vars
 */
function scholar_publications_preprocess_block(&$vars) {
  if (isset($vars['block']->module) && ($vars['block']->module == 'views')) {
    list($name, $display_id) = explode('-', $vars['block']->delta);
    if($name == 'publication_years') {
      // Ugly workaround for inability to change the link text via normal views preprocess functions without affecting the link path
      $vars['block']->content = preg_replace_callback('#(<a.*?(publications\/year\/(9999|9998)).*?>).*?(</a>)#',
        create_function(
          '$matches',
          'return $matches[1]._biblio_text_year($matches[3]).\'</a>\';'
        ),
      $vars['block']->content);
    }
  }
}

/**
 * hook theme_registry_alter
 */
function scholar_publications_theme_registry_alter(&$theme_registry){
  /*
   * Change the biblio theme to use ours so it can make the views consistent
   */
  $theme_registry['biblio_entry']['function'] = 'scholar_publications_biblio_entry';
  $theme_registry['biblio_author_link']['function'] = 'scholar_publications_biblio_author_link';
  
  //Override the default node style function
  $theme_registry['biblio_tabular']['function'] = 'theme_scholar_publications_biblio_tabular';
  $theme_registry['biblio_tabular']['file'] = 'scholar_publications_biblio_tabular.tpl';
  $theme_registry['biblio_tabular']['path'] = drupal_get_path('module', 'scholar_publications')."/theme";
}

/**
 * Standardize the biblio entry look
 *
 * @param $node
 * @param $base
 * @param $style
 * @param $inline
 * @return unknown_type
 */
function scholar_publications_biblio_entry($node, $base = 'biblio', $style = 'classic', $inline = false) {

	$s_output  = "\n".'<div class="biblio-entry">'."\n" ;
  if (!$node->status) $s_output .= '<div id="node-'.$node->nid.'" class="node node-unpublished">';

  if (count($node->field_biblio_image[0])) {
    $s_output .= '<div class="flL">' . l(theme('imagecache','book_cover', $node->field_biblio_image[0]['filepath']), $node -> path, array('html' => TRUE)) . '</div>';
  }

  // first add the styled entry...
  $s_output .= theme('biblio_style', $node, $base, $style, $inline);

  // now add the various links
  if ($node->biblio_abst_e) $s_output .= '<span class="biblio-abstract-link">'. l(" Abstract", "node/$node->nid") ."\n</span>";

  $annotation_field = variable_get('biblio_annotations', 'none');
  if ($annotation_field != 'none' && $node-> $annotation_field) {
    $s_output .=  '<div class="biblio-annotation">' . check_markup($node->$annotation_field, $node->format, FALSE) . '</div>';
  }

  $openurl_base = variable_get('biblio_baseopenurl', '');
  if ($openurl_base) $s_output .= theme('biblio_openurl', biblio_openurl($node));

  // add links to attached files (if any) unless we have an image, then it would be crowded
  if (biblio_access('download', $node) && !count($node->field_biblio_image[0])) $s_output .= theme('biblio_download_links',$node);

  if(variable_get('scholar_publication_note_in_teaser',false) && $node->biblio_notes)  $s_output .= '<span class="biblio-note">'. check_plain($node->biblio_notes) ."\n</span>";
  
  if(biblio_access('export', $node)){
    $links = array();
    $show_link = variable_get('biblio_export_links', array('rtf' => TRUE,'tagged' => TRUE, 'xml' => TRUE, 'bibtex' => TRUE));
    $show_link['google'] = variable_get('biblio_google_link', 1);
    if ($show_link['rtf'])     $links['biblio_rtf']            = _build_biblio_rtf_link($base, $node->nid);
    if ($show_link['tagged']) $links['biblio_tagged']         = _build_biblio_tagged_link($base, $node->nid);
    if ($show_link['xml'])    $links['biblio_xml']            = _build_biblio_xml_link($base, $node->nid);
    if ($show_link['bibtex']) $links['biblio_bibtex']         = _build_biblio_bibtex_link($base, $node->nid);
    if ($show_link['google']) $links['biblio_google_scholar'] = _build_google_scholar_link($node);
    $s_output .= " ".theme('ctools_dropdown', t('Export'), $links, false,'biblio-export');
  }

  if (!$node->status) $s_output .= '</div>';

  $links = module_invoke_all('link', 'node', $node, '');
  drupal_alter('link', $links, $node);

  $s_output .= theme('links', $links);
  $s_output .= "\n</div>";

  return $s_output;
}

/**
 * Override function for the biblio author links
 *
 * @param $author
 * @param $aid
 * @param $base
 * @param $inline
 * @return unknown_type
 */
function scholar_publications_biblio_author_link($author, $aid, $base='biblio', $inline = FALSE) {
  $db_result = db_query("SELECT n.nid as nid FROM {biblio_contributor_data} bcd INNER JOIN {node} n  ON n.uid = bcd.drupal_uid
                         WHERE n.type = 'vsite' AND bcd.cid = %d", $aid);
  $a_node = db_fetch_array($db_result);
  $current_vsite = vsite_get_vsite();
	if(!$a_node || $current_vsite->group->nid == $a_node['nid']) return check_plain($author); //Return if there is no vsite

	$vsite = new vsite('og',$a_node['nid'],false);

	$options = array('attributes' => array('target' => '_blank'),'purl' => array('provider' => $vsite->purl_provider, 'id' => $vsite->group->nid));
  $html = l(trim($author), "publications", $options );

  return $html;
}

/**
 * Theme the biblio nodes the same in views as elsewhere
 * @param $vars array
 */
function scholar_publications_preprocess_views_view_row_node(&$vars){

  $nid = $vars['row']->{$vars['field_alias']};
  if (!is_numeric($nid) || (array_key_exists('build_mode',$vars['options']) && $vars['options']['build_mode'] != 'teaser')) {
    return;
  }//Can't find the node or this is not in the teaser view

  $node = node_load($nid);

  if (empty($node) || $node->type != 'biblio') {
    return;
  }

  $vars['node'] = scholar_publications_biblio_entry($node,'biblio',biblio_get_style());
}

/**
 * Modify a contributor array to unclude a checkbox to identify a author as yourself or add yourself
 * @param $form_element
 */
function _scholar_publications_modify_contributor(&$form){
	$vsite = vsite_get_vsite();
	if(!$vsite) return;

  $db_result = db_query("SELECT cid,name FROM {biblio_contributor_data} WHERE drupal_uid = %d", $vsite->group->uid);
  $author = db_fetch_array($db_result);

	if(!$author){
		_scholar_publications_add_owner_checkbox($form['contributors1_wrapper']['biblio_contributors']);
	}elseif(!$form['nid']['#value']){
		$form['contributors1_wrapper']['biblio_contributors'][1][0]['name']['#default_value'] = $author['name'];
		$form['contributors1_wrapper']['biblio_contributors'][1][0]['cid']['#default_value'] = $author['cid'];
	}
}

/**
 * Add the checkboxes
 * @param $form_element
 * @return unknown_type
 */
function _scholar_publications_add_owner_checkbox(&$form_element){

	//Add the checkboxes
	foreach ($form_element as $key => $element){
		$form_element[$key]['#col1Title'] = 'Site Owner';
    $form_element[$key]['#col1Data'] = 'vsite_owner';
    $form_element[$key]['#col1Class'] = 'contributor_vsite_owner';
		foreach(element_children($form_element[$key]) as $n_sub_element){
			$a_parents = $form_element[$key][$n_sub_element]['name']['#parents'];
      array_pop($a_parents); //Get rid of the name
		  $form_element[$key][$n_sub_element]['vsite_owner'] = array(
	  	  '#type' => 'checkbox',
			  '#title' => t(''),
		    '#parents' => array_merge($a_parents,array('vsite_owner')),
		    '#attributes' => array('onClick' => " if(this.checked){ $('input.contributor_vsite_owner').attr('checked', false); this.checked = true; }", 'class' => 'contributor_vsite_owner'),
			);
	  }
	}
}

/**
 * Block information for the publictaion by type widget
 * @return string
 */
function _scholar_publications_pub_by_type_wgt(){
	jquery_ui_add(array('ui.tabs'));
	$vsite = vsite_get_vsite();
	
	$view = views_get_view('publication_types');
  $view->execute('block_1');
  usort($view->result,"_scholar_publications_sort_type_by_numpubs");
  $types = array_slice($view->result,0,4);

	$vsite = vsite_get_vsite();

	$output = ""; $i = 0; $tabs = "<h3 class=\"title\">Recent Publications</h3><ul>";
	foreach ($types as $type) {
	  if($type->num_records < 1) continue;
		
	  $tabs .= "<li><a href=\"#pub_type_tabs-{$i}\">{$type->biblio_types_name}";
		if(!in_array($type->biblio_types_name,array('Software','Data','Conference Proceedings', 'Thesis', 'Unpublished','Miscellaneous','Audiovisual','Artwork'))) $tabs .= "s"; //FIX THE PLURAL
		$tabs .= "</a></li>";
		
		$view = views_get_view('publication_types');
		$view->set_arguments(array(str_replace(" ","-",$type->biblio_types_name)));
		$view->execute('page_1');

	  $output .= "<div id='pub_type_tabs-{$i}'>";
	  foreach ($view->result as $row) {
	  	$node = node_load($row->nid);
	  	$output .= "\n<div class=\"biblio-entry\">". theme('biblio_entry', $node, variable_get('biblio_base', 'biblio') , biblio_get_style()) ."</div>";
	  }
	  $output .= "</div>";
	  $i++;
	}
	$tabs .= "</ul>";
	if(!$output) return array();

	$output = "<div id='pub_type_tabs'>".$tabs.$output."</div>";

  return array('subject' => "Recent Writings",'content' => $output);
}

/**
 * Block information for the co-author widget
 * @return string
 */
function _scholar_publications_co_author_wgt(){
	$vsite = vsite_get_vsite();
  $result = db_query_range("SELECT bcd.name as name, COUNT(*) as num_site_publications, (SELECT COUNT(*) FROM {biblio_contributor_data} s_bcd INNER JOIN {biblio_contributor} s_bc ON s_bc.cid = s_bcd.cid WHERE s_bcd.cid = bcd.cid) as total_publications, bcd.drupal_uid as uid, bcd.cid as cid
                                     FROM {biblio_contributor_data} bcd
                                     INNER JOIN {biblio_contributor} bc ON bc.cid = bcd.cid
                                     INNER JOIN {og_ancestry} oa ON oa.nid = bc.nid
                                     WHERE oa.group_nid = %d AND (bcd.drupal_uid IS NULL OR bcd.drupal_uid != %d)
                                     GROUP BY bcd.cid ORDER BY lastname ASC  ", array($vsite->group->nid, $vsite->group->uid), 0, 10);
  $b_show = false;
  $output = "<ul class='co_authors'>";
  while ($data = db_fetch_object($result)) {
  	$b_show = true;
  	$owner_site = false;
  	$s_site_url = false;
  	if($data->uid){
  		$target_site = vsite_get_vsite_by_owner($data->uid);
  		if(count($target_site) && ($owner_site = array_shift($target_site))) $s_site_url = $owner_site->get_absolute_url('publications');
  	}

  	///////////////////////
  	//Simple Format
  	///////////////////////
    $output .= "\n<li>".($s_site_url?l($data->name,$s_site_url,array('attributes' => array("target" => "_blank"))):$data->name)."</li>";

  }
  $output .= "</ul>";

  return $b_show?array('subject' => "Co-Authors",'content' => $output):array();
}

/**
 * Sort the returned publication types by the number of publications in each
 */
function _scholar_publications_sort_type_by_numpubs($a,$b){
	if ($a->num_records == $b->num_records) return 0;
	
  return ($a->num_records > $b->num_records) ? -1 : 1;
}

/**
 * hook link_alter
 * modify the export links to use ctools
 */
function scholar_publications_link_alter(&$links, $node){
	//Remove biblio export links
	foreach ($links as $key => $value){
		if(substr($key,0,7) == "biblio_") unset($links[$key]);
	}
}

