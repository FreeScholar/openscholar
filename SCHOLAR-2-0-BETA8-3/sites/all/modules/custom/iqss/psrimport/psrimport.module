<?php
include_once('psrimport.defaults.inc');
include_once('psrimport.api.inc');
DEFINE(PSR_FS_PATH, '/nfs/www/iq_drupal'); //absolute path to psr site files directory
DEFINE(PSRIMPORT_FS_PATH, '/nfs/www/edu-harvard-iq-scholar-dev3'); // absolute path to this module's drupal installation
  
/**
 * Begins import script
 */
function psrimport_import($drush_run = 0){
  DEFINE(PSR_DRUSH_RUN, $drush_run);
     
  psrimport_print( 'Beginning import...' );
  
  psrimport_import_users();
  psrimport_create_site();
  psrimport_import_content();
  
  //import books seperately
  psrimport_import_books();
  
  _psrimport_get_webform_data();
  psrimport_print( 'Import Completed' );
}

/**
 * Import the users and user data
 */
function psrimport_import_users(){
  install_include(array('user'));
  $psr_uid_map[] = array();
  //get the vocab data
  db_set_active('psrd5');
  $res = db_query("SELECT * FROM {users} WHERE uid > %d", 1);
  db_set_active('default');
  while($data = db_fetch_object($res)){
    if(in_array($data-> name, array('pmoynihan', 'gstone'))){
      $status = 1;
      $roles =array('scholar admin');
    }
    else{
      $status = 0;
      $roles =array('scholar user');
    }
    db_set_active('default');
    $user = install_add_user($data -> name, user_password(), $data -> mail, $roles, $status);
    psrimport_print("Added user: {$data -> name}");

    $psrimport_uid_map[$user -> uid] = $data -> uid; // keep track of old to new user id's

    //update created and access
    db_query("UPDATE {users} SET created = %d, access = %d WHERE name = '%s' ", $data -> created, $data -> access, $data -> name);

    // if active user then restore old password
    if ($status == 1) {
      db_query("UPDATE {users} SET pass = '%s' WHERE name = '%s' ", $data -> pass, $data -> name);
    }
  }
  $psrimport_uid_map[1] = 1; //add user 1
  variable_set('psrimport_uid_map', $psrimport_uid_map);
}

/**
 * Create the vsite
 */
function psrimport_create_site(){
  db_set_active('default');
  vsite_include('vsiteapi');
  install_include(array('user'));
  $vsite = vsite_vsite_create('pmoynihan',  'psr', variable_get('scholar_default_preset', 'project'));

  if ($vsite){
    psrimport_print("Created vsite: {$vsite -> title}");
    define(PSR_SID, $vsite -> sid);
    psrimport_create_files_directory($vsite -> purl); 
    //make sure these features are enabled
    $features = array('scholar_links', 'scholar_pages', 'scholar_profiles', 'scholar_announcements', 'scholar_events', 'scholar_book'); 
    psrimport_enable_features($vsite, $features);
  }
}

/**
 * Controller function for importing content
 *
 * @param 
 *  $types - array of psr content types
 */
function  psrimport_import_content($types = array()){ 
  $type_map =psrimport_type_map(); //get map array of all content types
  //import content for specified types only
  if (count($types)){
    foreach($types as $type){
      psrimport_import_node( $type, $type_map[$type]);    
    }
  }
  //import content for all types
  else{
    foreach($type_map as $old_type => $new_type){
      psrimport_import_node($old_type, $new_type);
    }
  }
}

/**
 * Built generic node information and make call to content type specific 
 * function to add custom data (such as cck data) then save the node
 */
function psrimport_import_node($old_type, $new_type){
 db_set_active('psrd5');
    $res = db_query("SELECT nid FROM {node} WHERE type = '%s' ", $old_type);
  while ($node_list = db_fetch_object($res)){
    if (in_array($node_list -> nid, psrimport_skip_nodes() )) { //skip these nodes
      continue;
    }
    db_set_active('psrd5');
    $data = db_fetch_object(db_query("SELECT n.nid, n.uid, n.status, n.created, n.title, nr.body, nr.teaser 
    FROM {node_revisions} nr INNER JOIN {node} n USING(nid) HAVING n.nid = %d", $node_list  -> nid));
    
    $node = psrimport_create_generic_node($data, $new_type);
    //get the old path alias
    $path = psrimport_get_path($node_list -> nid);  
    
    //find all the terms associated with the node and place in temporary property ( see hook_nodeapi )
    $node -> terms = _psrimport_weed_terms($node_list  -> nid);  
    
    //now pass the node object by reference to add custom/cck field values
     if(function_exists('psrimport_' . $old_type)) call_user_func('psrimport_' . $old_type, $node, $data ->nid, 'content_type_' . $old_type); 
     
     //now save the node  - don't forget about the stuff happening in nodeapi    
     db_set_active('default');
     node_save($node);     
     //update the url alias
     psrimport_update_path($node -> nid, $path);
     psrimport_print("Added $old_type node: {$node -> title}");
     //check for files
     psrimport_get_files($node, $node_list -> nid);     
  }
}

function psrimport_create_generic_node($data, $type){
    //gerneric node data
    $node = new stdClass(); 
    $node -> type = $type;
    $node -> title = $data -> title;
    $node -> body = $data -> body;
    $node -> teaser = $data -> teaser;
    $node -> created = $data -> created;
    $node -> changed = $data -> changed;
    $node -> status = $data -> status;
    $node -> uid = array_search( $data -> uid, variable_get('psrimport_uid_map', array()));
   
    return $node;
}


function psrimport_resource(&$node, $old_nid, $table){
  
  $link_data = psrimport_get_links('content_field_resource_link', 'field_resource_link_url', $old_nid); 
   //add links data to body
  $node -> body .= $link_data['multiple'];  
 //psrimport_print("$old_nid ---- {$node -> title} ---- {$link_data['single']}" );
 $node -> field_link_href[0] = array('url' => check_url($link_data['single']));   
}

function psrimport_event(&$node, $old_nid, $table){
   db_set_active('psrd5');
  
   //since there are no address fields in content type link, take any exisiting data and merge with body text
   $address_text = '';
   $address =  db_fetch_array(db_query("SELECT * FROM {$table} WHERE nid = %d", $old_nid));
   if (strlen($address['field_event_address_street1'])) $address_text .= $address['field_event_address_street1'] . '<br />';
   if (strlen($address['field_event_address_street2'])) $address_text .= $address['field_event_address_street2'] . '<br />';
   if (strlen($address['field_event_address_apt'])) $address_text .= $address['field_event_address_apt'] . '<br />';
   if (strlen($address['field_event_address_city'])) $address_text .= $address['field_event_address_city'] . ' ';
   if (strlen($address['field_event_address_state'])) $address_text .= $address['field_event_address_state'] . ' ';
   if (strlen($address['field_event_address_zip'])) $address_text .= $address['field_event_address_zip'] . ' ';
   
   //add address information to body text
   if(strlen($address_text)) {
       $node -> body .= '<p>Address Information:<br />' . $address_text . '<p>';
   }
   
   //check for sponsor information  
   $additional_text = '';
   $table = 'content_field_event_sponsor';
   $sponsor =  db_fetch_array(db_query("SELECT * FROM {$table} WHERE nid = %d", $old_nid));   
   if (strlen( $sponsor['field_event_sponsor_value'])) $additional_text .= '<p>Sponsored by: ' . $sponsor['field_event_sponsor_value'] . '</p>';
      
   if(strlen($additional_text)){
       $node -> body .= $additional_text;
   }
   
 //now add the event times
   $node -> field_date[0] = psrimport_get_event_times($old_nid);
}

function psrimport_psr_profile(&$node, $old_nid, $table){
  db_set_active('psrd5');
  $cck_data = db_fetch_array(db_query("SELECT * FROM {$table} WHERE nid = %d", $old_nid));
  $node -> title = trim($cck_data['field_first_name_value']) . ' ' . trim($cck_data['field_last_name_value']); //overriding title
  $node -> field_person_firstname[0] = array('value' => trim($cck_data['field_first_name_value']));
  $node -> field_person_lastname[0] = array('value' =>trim($cck_data['field_last_name_value']));
  $node -> field_person_website[0] = array('url' => $cck_data['field_web_site_url']);
  $node -> field_person_institution[0] = array('value' => $cck_data['field_affiliation_value']);
  $node -> field_person_title[0] = array('value' => $cck_data['field_title_value']);
}

function psrimport_page(&$node, $old_nid, $table){
  //no cck fields to retreive
  return;
}

function psrimport_opportunity(&$node, $old_nid, $table){
  db_set_active('psrd5');
  $cck_data = db_fetch_array(db_query("SELECT * FROM {$table} WHERE nid = %d", $old_nid));
  $additional_text = '';
  $available_to = array(1 => 'Harvard Only', 2 => 'Anyone');
  
  //merge cck data into body text
  if ($cck_data['field_harvard_only_value']) $additional_text .= '<p>This opportunity is available to: ' . $available_to[$cck_data['field_harvard_only_value']] . '</p>';
  if(strlen($cck_data['field_opportunity_link_url'] )) $additional_text = '<p>Link: ' . $cck_data['field_opportunity_link_url'] . '</p>';
  if(strlen($cck_data['field_opportunity_deadline_value'] )) $additional_text = '<p>Date of Deadline: ' . date_format_date(date_make_date($cck_data['field_opportunity_deadline_value']), 'custom', "F j, Y") . '</p>';
  $node -> body .= $additional_text;
}

function psrimport_psr_resource(&$node, $old_nid, $table){
  db_set_active('psrd5');
  //currently no data cck fields in defaut table, thus not adding to node. but check in case any data found from subsquent sql dumps of database
  $no_check = array('vid', 'nid');
  $cck_check_data = db_fetch_array(db_query("SELECT * FROM {$table} WHERE nid = %d", $old_nid));
  foreach($cck_check_data as $key => $val){
    if (!in_array($key, $no_check)){
      if(strlen($val)) psrimport_print("Error: value found for $key which is not being added to node data for old node $old_nid");
    }
  }
  //add links data to body
  
   $link_data = psrimport_get_links('content_field_psr_resource_link', 'field_psr_resource_link_url', $old_nid);
   //add links data to body
  $node -> body .= $link_data['multiple'];  
  return;
}

function psrimport_faq(&$node, $old_nid, $table){
  //no cck fields to retreive
  return;
}

function psrimport_survey_news(&$node, $old_nid, $table){
//add links data to body
  $link_data = psrimport_get_links('content_field_news_link', 'field_news_link_url', $old_nid);
   //add links data to body
  $node -> body .= $link_data['multiple'];  
  return;
}

function psrimport_project_issue(&$node, $old_nid, $table){
//no being used
}

function psrimport_education(&$node, $old_nid, $table){
  //not being used
}

function psrimport_conf_presentation(&$node, $old_nid, $table){
    db_set_active('psrd5'); 
  
   //since there are no address fields in content type link, take any exisiting data and merge with body text
   $address_text = '';
   $presenter_text = '';

   $data =  db_fetch_array(db_query("SELECT * FROM {$table} WHERE nid = %d", $old_nid));
   $presenter_text = '';
  if (strlen($data['field_presenter_value'])) {
    $presenter_text .= '<p>Presenter/Moderator: '  .  $data['field_presenter_value'] . ', '  . $data['field_presenter_affiliation_value'] . '</p>';
  }
   
   if (strlen($data['field_conf_presentation_address_street1'])) $address_text .= $data['field_conf_presentation_address_street1'] . '<br />';
   if (strlen($data['field_conf_presentation_address_street2'])) $address_text .= $data['field_conf_presentation_address_street2'] . '<br />';
   if (strlen($data['field_conf_presentation_address_apt'])) $address_text .= $data['field_conf_presentation_address_apt'] . '<br />';
   if (strlen($data['field_conf_presentation_address_city'])) $address_text .= $data['field_conf_presentation_address_city'] . ' ';
   if (strlen($data['field_conf_presentation_address_state'])) $address_text .= $data['field_conf_presentation_address_state'] . ' ';
   if (strlen($data['field_conf_presentation_address_zip'])) $address_text .= $data['field_conf_presentation_address_zip'] . ' ';
   
   //add address information to body text
   if(strlen($address_text)) {
       $node -> body .= $presenter_text . '<p>Address Information:<br />' . $address_text . '<p>';
   }  
  
   //now add the event times TODO: date values are NULL
   $node -> field_date[0] = psrimport_get_event_times($old_nid);  
}

function psrimport_story(&$node, $old_nid, $table){
  //no cck fields to retreive
  return;
}

function psrimport_article(&$node, $old_nid, $table){
//add links data to body
   $link_data = psrimport_get_links('content_field_article_link', 'field_article_link_url', $old_nid);
   //add links data to body
  $node -> body .= $link_data['multiple'];  
  return;
}

function psrimport_conference(&$node, $old_nid, $table){  
  db_set_active('psrd5');
  
   //since there are no address fields in content type link, take any exisiting data and merge with body text
   $address_text = '';
   $address =  db_fetch_array(db_query("SELECT * FROM {$table} WHERE nid = %d", $old_nid));
   if (strlen($address['field_conference_address_street1'])) $address_text .= $address['field_conference_address_street1'] . '<br />';
   if (strlen($address['field_conference_address_street2'])) $address_text .= $address['field_conference_address_street2'] . '<br />';
   if (strlen($address['field_conference_address_apt'])) $address_text .= $address['field_conference_address_apt'] . '<br />';
   if (strlen($address['field_conference_address_city'])) $address_text .= $address['field_conference_address_city'] . ' ';
   if (strlen($address['field_conference_address_state'])) $address_text .= $address['field_conference_address_state'] . ' ';
   if (strlen($address['field_conference_address_zip'])) $address_text .= $address['field_conference_address_zip'] . ' ';
   if (strlen($address['field_notes_value'])) $address_text .= '<br />' .  $address['field_notes_value']; //add notes (if any)
   
   //add address information to body text
   if(strlen($address_text)) {
       $node -> body .= '<p>Address Information:<br />' . $address_text . '<p>';
   }

    //now add the event times
   $node -> field_date[0] = psrimport_get_event_times($old_nid);   
}



function psrimport_project_project(&$node, $old_nid, $table){
  //not being used
}


function psrimport_webform(&$node, $old_nid, $table){
  
}

/**
 * Implementation of hook_vsite_vocabulary_default()
 */
function psrimport_vsite_vocabulary_default(){

  $vocabs = psrimport_vocabulary_map();

  //get the vocab data
  db_set_active('psrd5');

  foreach ($vocabs as $old_vid => $new_type){    //Import Vocabs
    $res = db_fetch_object(db_query("SELECT * FROM {vocabulary} WHERE vid = %d LIMIT 1", $old_vid));

    $tax[] = array(
    'name' => $res -> name,
    'content_types' => array($new_type => $new_type),
    'properties' => array (
    'tags' => 0,
    'multiple' => $res -> multiple,
    'required' => $res -> required,
    'description' =>  $res -> description,
    'help' =>  $res -> description,
    ),
    'terms' => psrimport_get_terms($old_vid),
    );

  }
  db_set_active('default');
  return $tax;
}

/**
 * Implementation of hook_nodeapi()
 */
function psrimport_nodeapi(&$node, $op){
  switch ($op) {
    case 'presave':
      //dpm($node);
      break;
    
    case 'insert':
      if (!vsite_get_vsite()){
        //add node to og
        psrimport_node_to_og($node -> nid);
        //add terms
        psrimport_terms_to_node($node, $node ->terms);
      }
      break;
  }
}

/**
 * Private function: Adds temporary property to node object
 * to be used during hook nodeapi to add terms to a node
 */
function _psrimport_weed_terms($old_nid){
  $terms = array();
   //get the vocab data
  db_set_active('psrd5');
  $res = db_query("SELECT tn.nid, tn.tid, td.vid, td.name FROM {term_node} tn INNER JOIN {term_data} td USING(tid) HAVING tn.nid = %d", $old_nid);
  while ($data = db_fetch_object($res)){
    $terms[$data -> vid] = $data -> name;    
  } 
  return $terms; 
}


function psrimport_import_books(){
  global $book_node_map;
  $book_node_map = array();
  db_set_active('psrd5');
  $second_level = array(17, 18, 68, 69);  // TODO: hard coded ok???
  //$third_level = array(16, 19, 20, 21, 22, 24, 24, 26, 27, 28, 29, 30, 31 );  // TODO: hard coded ok???
  for($level = 1; $level < 4; $level++) {
    db_set_active('psrd5');
    switch ($level){      
      case 1:
        //top level
        $res = db_query("SELECT DISTINCT(nid), parent, weight FROM {book} WHERE parent = %d", 0);
        break;

      case 2:
        //second level
        $res =  db_query('SELECT DISTINCT(nid), parent, weight FROM {book} WHERE nid IN ('  .   rtrim(str_repeat("%d". ',' ,count($second_level)), ',') . ')' , $second_level);

        break;

      case 3:
        //third level
        //reset($second_level); 
      //  drush_print_r($second_level);
        //$res =  db_query('SELECT DISTINCT(nid), parent, weight FROM {book} WHERE nid IN ('  .   rtrim(str_repeat("%d". ',' ,count($third_level)), ',') . ')' , $third_level);
        $res =  db_query('SELECT DISTINCT(nid), parent, weight FROM {book} WHERE parent != %d AND nid NOT IN ('  .   rtrim(str_repeat("%d". ',' ,count($second_level)), ',') . ')' , 0, $second_level);
        break;
    }
  while ($node_list = db_fetch_object($res)){
    db_set_active('psrd5');
    
    if ($level == 3 && in_array( $node_list ->nid, $second_level)) continue;  //TODO: to address a bug with level 3 query
    
    $data = db_fetch_object(db_query("SELECT n.nid, n.uid, n.status, n.created, n.title, nr.body, nr.teaser
    FROM {node_revisions} nr INNER JOIN {node} n USING(nid) HAVING n.nid = %d", $node_list  -> nid));
    //get the old path alias
    $path = psrimport_get_path($node_list -> nid);     
    
    $node = psrimport_create_generic_node($data, 'book');
    //find all the terms associated with the node and place in temporary property ( see hook_nodeapi )
    $node -> terms = _psrimport_weed_terms($node_list  -> nid);
   
    psrimport_book($node, $node_list->parent, $level, $node_list -> weight);
    db_set_active('default');
    node_save($node);
     //update the url alias
     psrimport_update_path($node -> nid, $path);
    $book_node_map[ $node_list -> nid ] = $node -> nid; // this array maps old nid to new nid - using in psrimport_book
    psrimport_print("Added book node: {$node -> title}");
    //check for files
    psrimport_get_files($node, $node_list -> nid);
     }
  }
}
 

function psrimport_book(&$node, $old_parent_nid, $level, $weight = 0){ 
  global $book_node_map;

  switch($level){
    //top level book nodes
    case 1:
      $node -> book =   array(
      'nid' => 'new',
      'bid' => 'new',
      );
       
      break;
  
    //child book nodes
    default:
   
    $book_data = psrimport_get_book_data($book_node_map[ $old_parent_nid ]); //pass the new parent nid to the function   
    
    $node -> book = array(  
    'nid' => 'new',    
    'menu_name' => 'book-toc-' . $book_data -> bid,
    'plid' => $book_data -> mlid, ///parent node's mlid
    'bid' => $book_data -> bid,  
    'weight' => $weight, 
    );    
    break;        
  }
  
  //find links(if any) and add to body     //TODO: uses  table content_field_link
   db_set_active('psrd5');
   $additional_text = '';
   $res = db_query("SELECT * FROM {content_field_link} WHERE nid = %d ORDER by delta ASC", $old_nid);
   while($data = db_fetch_object($res)){
     if(strlen($data -> field_link_url)){
     $additional_text .= '<li>' . l($data -> field_link_title, $data -> field_link_url) . '</li>';
     }
   }

   if (strlen($additional_text)){
     $node -> body .=  "<p>Link(s): <ul> $additional_text <ul><p>";
   }
 }
/**
 * Enter description here...
 *
 * @param unknown_type $nid
 * @return unknown
 */
function psrimport_get_book_data($nid){
  db_set_active('default');
  //mlid is parent mlid
  $book_data =  db_fetch_object(db_query("SELECT ml.mlid, b.nid, b.bid FROM {menu_links} ml INNER JOIN {book} b USING(mlid) HAVING b.nid = %d", $nid));
  return $book_data;
}