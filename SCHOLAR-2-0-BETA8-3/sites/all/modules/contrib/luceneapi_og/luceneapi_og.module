<?php
// $Id: luceneapi_og.module,v 1.1 2010/06/10 16:52:41 ebeyrent Exp $

/**
 * @file
 *   Integrates Organic Group info with Search Lucene.
 */

/**
 * Implementation of hook_menu().
 */
function luceneapi_og_menu() {
  return array(
    'admin/og/luceneapi_og' => array(
      'title'            => 'Search Lucene OG configuration ',
      'description'      => 'Search Lucene OG facet settings for group posts.',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('luceneapi_og_admin'),
      'access arguments' => array('administer search'),
    ),
  );
}

/**
 * Build a settings form.
 */
function luceneapi_og_admin() {
  $form = array();
  $form['luceneapi_og_groupnode'] = array(
    '#type' => 'radios',
    '#title' => t('Is the group node "included" within a group along with that group\'s posts'),
    '#description' => t('Should group nodes be indexed as belonging to their own group for the purposes of faceting?'),
    '#options' => array(0 => t('Not included'), 1 => t('Included')),
    '#default_value' => variable_get('luceneapi_og_groupnode', 0),
  );
  $form = system_settings_form($form);
  $form['#submit'][] = 'luceneapi_og_reindex';
  return $form;
}

/**
 * Submit function to make group nodes as needing re-indexing.
 */
function luceneapi_og_reindex() {
  $result = db_query("SELECT nid FROM {og}");
  while ($og = db_fetch_array($result)) {
    //apachesolr_mark_node($og['nid']);
  }
  drupal_set_message(t('All group nodes marked for re-indexing'));
}

/**
 * Allows for altering of the document object before it is added to the index.
 * Invoking this hook allows developers to add additional fields, such as
 * CCK data, to the index.
 *
 * @param $doc
 *   A Zend_Search_Lucene_Document object being added to the index.
 * @param $item
 *   A mixed value modeling the content being added to the index, usually a
 *   Drupal node object.
 * @param $module
 *   A string containing the Search Lucene API module that is indexing the
 *   content.
 * @param $type
 *   A string containing the type of content indexed by $module.
 * @return
 *   NULL
 */
function luceneapi_og_luceneapi_document_alter($doc, $item, $module, $type = NULL) {
  if ($type == 'node') {
    try {
      $key = luceneapi_og_gid_key();
      // Index group posts
      if (!empty($item->og_groups)) {
        // The version of the ZF Components Search Lucene API is using does not support this feature. Unfortunately we have to delimit multiple values withing a single field.
        $group_nids = join(':', array_keys($item->og_groups));
        luceneapi_field_add($doc, 'keyword', $key, $group_nids);   
      }
      elseif (isset($item->og_description) && variable_get('luceneapi_og_groupnode', 0)) {
        // Index the group node itself as in the group.
        luceneapi_field_add($doc, 'keyword', $key, $item->nid);
      }
    }
    catch (Exception $e) {
      luceneapi_throw_error($e);
    }
  }
}

/**
 * Provides access to the items after they are rendered.  This hook is useful
 * for converting IDs to display names or adding the #options key to form
 * elements.
 *
 * @param &$items
 *   An array containing the rendered facet arrays.  In other words, they have
 *   just been processed by the "callback" function in the $relam definition.
 * @param $realm
 *   A string containing the machine readable realm name the facets are being
 *   rendered in.
 * @param $module
 *   A string containing the module handling the search.
 * @param $type
 *   A string containing the type of content $module indexes, NULL if no type.
 * @return
 *   NULL
 */
function luceneapi_og_luceneapi_facet_postrender_alter(&$items, $realm, $module, $type = NULL) {
  if($type == 'node') {
    if(isset($items['im_og_gid'])) {
      $values = array_keys($items['im_og_gid']['items']);
      if (!empty($values)) {
        // SQL that converts IDs to term names.
        $sql = "SELECT nid AS id, title as name FROM {node} WHERE nid IN (". db_placeholders($values) .")";
        
        // Adds display names to items.
        if ($result = db_query($sql, $values)) {
          while ($row = db_fetch_object($result)) {
            if (isset($items['im_og_gid']['items'][$row->id])) {
              $items['im_og_gid']['items'][$row->id]['text'] = t($row->name);
            }
          }
        }
      }
    }
    
    $key = luceneapi_og_gid_key();
    $groups = array();
    foreach ($items as $idx => $r) {
      if (!is_array($r['node']->$key)) {
        $items[$idx]['node']->$key = $r['node']->$key ? array($r['node']->$key) : array();
      }
      foreach ($items[$idx]['node']->$key as $gid) {
        $groups[$gid] = $gid;
      }
    }
  
    if ($groups) {
      // Copied code from og_node_groups_distinguish() and og_nodeapi().
      $accessible_groups = array();
      $placeholders = db_placeholders($groups);
      $result = db_query(db_rewrite_sql('SELECT n.nid FROM {node} n WHERE n.nid IN (' . $placeholders . ')'), $groups);
      while ($row = db_fetch_object($result)) {
        $accessible_groups[] = $row->nid;
      }
      foreach ($items as $idx => $r) {
        $accessible = array_intersect($items[$idx]['node']->$key, $accessible_groups);
        if ($accessible) {
          $items[$idx]['extra'][] = format_plural(count($accessible), '1 group', '@count groups');
        }
      }
    }
  }
}

/**
 * Search Lucene index name for Organic group id
 */
function luceneapi_og_gid_key() {
  return 'im_og_gid';
}

/**
* Implementation of hook_luceneapi_facet.
*/
function luceneapi_og_luceneapi_facet($module, $type = NULL) {
  if ($type == 'node') {
    $key = luceneapi_og_gid_key();
    return array(
      $key => array(
        'title' => t('Organic Groups'),
        'element' => $key,
        'field' => $key,
        'type' => 'select',
        'callback' => 'luceneapi_facet_multiterm_callback',
        'callback arguments' => array(
          luceneapi_facet_value_get($key, array()), $key, TRUE
        ),
        'delimiter' => ' ',
        'description' => t('Filter by organic groups.')
      ),
    );
  }
}

/**
 * Implementation of hook_theme().
 *
 * The breadcrumb function assumes that luceneapi_og_gid_key() returns im_og_gid
 * If that changes, modify the theme name appropriately
 */
function luceneapi_og_theme() {
  return array(
    'luceneapi_breadcrumb_im_og_gid' => array('arguments' => array('group_id' => NULL)),
  );
}

/**
 * Theme the breadcrumb.
 */
function theme_luceneapi_breadcrumb_im_og_gid($field) {
  $group_id = $field['#value'];
  if (!is_numeric($group_id)) {
    return t('No group');
  }

  return db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $group_id));
}

