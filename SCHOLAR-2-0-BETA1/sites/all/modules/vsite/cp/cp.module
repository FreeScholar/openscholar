<?php
define('CPTHEME', 'cp_theme');


/**
 * hook block
 */
function cp_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('CP left block');
      return $blocks;
    case 'view':
      switch ($delta) {
        case 0:
          $block = cp_left_block_view();
          break;
      }
      
      return $block;
  }
}

function cp_context_default_contexts(){
  $items = array();
  $items[] = array(
    'namespace' => 'cp', 
    'attribute' => 'section', 
    'value' => 'cp', 
    'path' => array(
      'cp/*' => 'cp/*' 
    ), 
    'block' => array(
      'cp_0' => array(
        'module' => 'cp', 
        'delta' => '0', 
        'weight' => 20, 
        'region' => 'left', 
        'status' => '0', 
        'label' => 'CP left block', 
        'type' => 'context_ui' 
      ) 
    ) 
  );
  
  return $items;
}


function cp_left_block_view(){
  $block = array();
  $block['title'] = t(''); //intentionally left blank
  $block['content'] = menu_primary_local_tasks();
  return $block;
}

function cp_init(){
   $vsite = vsite_get_vsite();
   if (!$vsite){
     return;
   }
   
   $toolbar = "off";
   
   // controlcp context
  if (arg(0) == 'cp' || (arg(0) == 'node' && (arg(1) == 'add' || arg(2) == 'edit'))) {
    context_set('vsite', 'section', 'cp');

    // since we are here .. initialize cp theme
    _cp_init_theme();
    
  }else {
 	  context_set('vsite', 'section', 'public');
    og_set_theme($vsite -> group); // TODO why dont you get it from space settings
  }
  
  $admin = $vsite -> admin_access();
  $user_tb_setting = (is_array( $vsite->settings ) 
                      && is_array ( $vsite->settings ['generic'] ) 
                      && array_key_exists ( 'admin_menu', $vsite->settings ['generic'] )
                      && $vsite->settings ['generic']['admin_menu']) ? TRUE : FALSE;

  
  // if in cp always toolbar=on (full)
  if (context_get('vsite', 'section') == 'cp' && $admin){
    $toolbar = "full";
  }
  
  if (context_get('vsite', 'section') == 'public' && $admin ){
    if ($user_tb_setting){
      $toolbar = "full";
    }else {
      $toolbar = "mini";
    }
  }
  
  if($admin){
  	//add the javascript for intercepting confirm pages
    drupal_add_js(drupal_get_path('module','cp').'/theme/cp-confirm-overide.js');
    drupal_add_css(drupal_get_path('module','cp').'/theme/cp-confirm-overide.css');
    //Add the JqueryUI JS for the confirm boxes
    jquery_ui_add(array('ui.dialog','effects.core','ui.draggable','ui.resizable'));
    drupal_add_js(array('cp_confirm_overide_handler'=>array("js" => 1)), 'setting');
  }//Allow special popups if they are admin
  
  if($toolbar == "full"){
    drupal_add_css(drupal_get_path('module', 'cp') .'/theme/cp-toolbar.css');
  }
  
  context_set("toolbar", "value", $toolbar);
  
  
}

/**
 * Implementation of hook_views_api().
 */
function cp_views_api() {
  return array(
    'api' => 2,
  );
}


function cp_menu(){
	$spaces_path = drupal_get_path('module', 'spaces');
  //$items = spaces_active_space_menu('og', FALSE, 'cp/settings');

  $items = array();

  $items['cp/settings'] = array(
    'title' => 'Settings',
    //'page callback' => 'cp_route',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cp_settings_form', 'site'),
    'file' => 'cp.settings.inc',
    'file path' => drupal_get_path('module', 'cp'). '/includes', 
    'weight' => 0,
  );  

  $items['cp/settings/site'] = array(
    'title' => 'Site information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cp_settings_form', 'site'),
    'file' => 'cp.settings.inc',
    'file path' => drupal_get_path('module', 'cp'). '/includes', 
          'type' =>  MENU_DEFAULT_LOCAL_TASK,
  );
  

  
  // other setting by classess
  $space = vsite_get_vsite();
  //dpm(spaces_settings($space->type, TRUE));
  // we go on all settings and make a menu entry for all of them
  foreach (spaces_settings($space->type, TRUE) as $setting) {
  	//Explicitly remove from menus
    if(isset($setting->menu_name) && !$setting->menu_name) continue;
    
    $setting_value = isset($space->settings[$setting->id]) ? $space->settings[$setting->id] : NULL;
    $setting_form = $setting->form($space, $setting_value);
    if (!empty($setting_form) && $setting -> id != 'site') {
      $items['cp/settings/'. $setting -> id] = array(
        'title' => $setting_form['#title'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cp_settings_form', $setting -> id),
        'type' =>  MENU_LOCAL_TASK,
        'file' => 'cp.settings.inc',
        'file path' => drupal_get_path('module', 'cp'). '/includes', 
      );
    }
    
    if(isset($setting->weight)) $items['cp/settings/'. $setting -> id]['weight'] = $setting->weight;
    if(isset($setting->menu_name)) $items['cp/settings/'. $setting -> id]['menu_name'] = $setting->menu_name;
  }
  
  $items["cp/features"] = array(
    'title' => 'Features',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spaces_features_form'),
    'file' => 'spaces_admin.inc',
    'file path' => $spaces_path,
    'weight' => 0,
  );
  
  $items["cp/features/%"] = array(
    'title' => 'Features',
    'page callback' => 'cp_feature_customize',
    'page arguments' => array(2),
    //'page callback' => 'drupal_get_form',
    //'page arguments' => array('spaces_customize_form', NULL, 3),
    'file' => 'spaces_admin.inc',
    'file path' => $spaces_path,
    'weight' => 1,
  );
  
  // make them all part of 'cp' menu
  foreach($items as $path => $item) {
  	if(!array_key_exists('menu_name',$item)) $items[$path]['menu_name'] = 'cp';
    if(!array_key_exists('access callback',$item)) $items[$path]['access callback'] = 'cp_access_cp';
    //$items[$path]['access arguments'] = array('access content'); //TODO fix this 
  }
  
  $items["cp/allow_callback_override"] = array(
    'page callback' => 'cp_is_confirm_overide_page',
    'type' => MENU_CALLBACK,
    'access callback' => 'cp_access_cp',
  );
  
  $items['cp/confirm_message/%'] = array(
    'page callback' => 'cp_confirm_message_view',
    'type' => MENU_CALLBACK,
    'access callback' => 'cp_access_cp',
    'page arguments' => array(2),
  );

  return $items;
}


/**
 * access callback function for all menus in cp
 * all cp menu entries should use this function as access callback
 */
function cp_access_cp(){
  $vsite = vsite_get_vsite();
  return ($vsite && $vsite -> admin_access()) ? TRUE : FALSE;
}

function cp_cp(){
  return '(tbd)';
}

/*
function cp_route(){
  $tree = menu_tree_page_data('cp');
  foreach ($tree as $item) {
    if (cp_in_active_trail($item['link']['href']) && !empty($item['below'])) {
    	$a_settings =  array_shift($item['below']);
    	drupal_goto($a_settings['link']['href']);
    	return;
    }
  }
  
  return MENU_NOT_FOUND;
}
*/

/**
 * callback function for our popup forms
 */
function cp_feature_customize($feature_name){
  ctools_include('ajax');
  ctools_include('modal');
  
  $feature = feature_load($feature_name);
  $feature_title = features_get_feature_title($feature);
  $form_state = array(
    're_render' => FALSE,
    'ajax' => TRUE,
    'title' => 'Feature "' . $feature_title . '" settings',
  );

  // pass all arguments needed by the callback function (ctools thing)
  $form_state['args'] = array(NULL, $feature_name);

  $output = ctools_modal_form_wrapper('spaces_customize_form', $form_state);
  
  if (empty($output)) {
    $output = array();
    $output[] = ctools_modal_command_dismiss();
  }else{
  	$output[0]['output'] .= '<script type="text/javascript">Drupal.cpAddCToolsColumns();' . "</script>\n";
  }
  
  ctools_ajax_render($output);
}


/**
 * hook form_alter
 */
function cp_form_alter(&$form, &$form_state, $form_id) {

  /*
   * we'd like to remove the space settings from 'spaces_features_form'
   * and make 'settings' link as a popup link
   */
  if (arg(0) == 'cp' && $form_id == 'spaces_features_form'){

    // we dont need settings here
    unset($form['settings']);
    $site = $form['space']['#value'];
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_add_js();
    drupal_add_js(drupal_get_path('module', 'cp') .'/theme/ctools_columns.js');
    // we would like to change the "customize" link to "settings" 
    // and display the form in the popup
    foreach (array_keys($site -> features) as $f_name){
      if (isset($form['customize'][$f_name])){ 
        $link = ctools_modal_text_button('settings', 'cp/features/'. $f_name, 'customize '.$f_name);
        $form['customize'][$f_name]['#value'] = $link;
      }
    }
  }
  
  if (arg(0) == 'cp' && $form_id == 'spaces_customize_form'){
  	if(array_key_exists('customizers',$form))$form['customizers']['#weight'] = 0;
  	if(array_key_exists('settings',$form))$form['settings']['#weight'] = 10;
  	if(array_key_exists('buttons',$form))$form['buttons']['#weight'] = 20;
  	
    foreach(element_children($form['customizers']) as $s_customizer){
      switch($s_customizer){
      	case 'menu':
      		$form['customizers'][$s_customizer]['#title'] = "Menu Title";
      		foreach(element_children($form['customizers'][$s_customizer]) as $s_block){
      		  $form['customizers'][$s_customizer][$s_block]['title']['#description'] = "Change the title of the link to your {$form['customizers'][$s_customizer][$s_block]['#title']}";
      		  unset($form['customizers'][$s_customizer][$s_block]['title']['#title']);
      		}
      	break;
      	case 'block':
      		if(!array_key_exists('contexts',$form['customizers'][$s_customizer]) && array_key_exists('post',$form_state) && array_key_exists('customizers',$form_state['post'])){
      			 $form_state['input']['customizers'][$s_customizer] = array();
      			 $form_state['post']['customizers'][$s_customizer] = array();
     		  }//Fake this to fix a spaces warning
	   	    $form['customizers'][$s_customizer]['#title'] = "Widgets";
	        $form['customizers'][$s_customizer]['#description'] = "This feature allows you to enable/rename widgets -- small blocks of content -- used in your layout ";
      		
      	break;
      }	
    }
  }//Make default customizers more descriptive
  
  //Call Confirm Override
  if(in_array($form_id,cp_get_confirm_form_overides())) cp_confirm_override($form, $form_state, $form_id);
  
}

/**
 * Implementation of hook_theme().
 */
function cp_theme($cache, $type, $theme, $path) {
  $path = drupal_get_path('module', 'cp') .'/theme';
  
  $items['cp_toolbar'] = array(
    'arguments' => array('tree' => array()),
    'template' => 'cp-toolbar',
    'path' => $path,
    'file' => 'theme.inc',
  );
  
  return $items;
}

/**
 * Preprocess function for for intorducing "cp_toolbar"
 * and "cp_left" variables
 */
function cp_preprocess_page(&$vars) {
  // 2 new variables for top and left menus
  $vars ['cp_toolbar'] = $vars ['cp_left'] = '';
  
  $vsite = vsite_get_vsite ();
  
  if (context_get ( 'toolbar', 'value' ) == "full") {

      $links = cp_toolbar_menu_links ();
      $links = theme ( 'cp_toolbar', $links );
      $vars ['cp_toolbar'] = $links;
      
      $vars ['body_classes'] .= ' cp-toolbar-full';
    
    } elseif (context_get ( 'toolbar', 'value' ) == "mini") {
      global $user;
      $user_links = array ();
      $user_links[] = array('title' => 'Contol Panel', 'href' => 'cp/features');
      $user_links [] = array (
        'title' => t ( 'Hello <strong>!username</strong>', array (
        '!username' => $user->name 
      ) ), 'href' => 'cp/users', 'html' => TRUE 
      );
      $user_links [] = array (
        'title' => t ( 'Logout' ), 'href' => "logout" 
      );
      /*
      $user_links [] = array (
        'title' => t ( 'Back to <strong>!sitename</strong>', array( '!sitename' => $vsite->title )), 'href' => "/" 
      );
      */
      $vars ['cp_toolbar'] = theme('links', $user_links);
      $vars ['body_classes'] .= ' cp-toolbar-mini';
    
  }
  


}

/**
 * return links for the toolbar menu
 */
function cp_toolbar_menu_links(){
  $links = array();
  // Retrieve the admin menu from the database.

  $tree = menu_tree_all_data('cp');
  $links[0]['toolbar'] = cp_menu_navigation_links($tree);

  // Add user-specific links
  global $user;
  $user_links = array();
  $user_links[] = array(
    'title' => t('Hello <strong>!username</strong>', array('!username' => $user->name)),
    'href' => 'cp/users',
    'html' => TRUE
  );
  $user_links[] = array('title' => t('Logout'), 'href' => "logout");
  if ( context_get('vsite', 'section') == 'cp'){
    $user_links [] = array (
      'title' => t ( 'Back to <strong>!sitename</strong>', array( '!sitename' => vsite_get_vsite()->title )),
      'href' => "/" ,
      'html' => TRUE
    );
  }
  $links[0]['user'] = $user_links;

  return $links;
}

/**
 * Return links for the left side menu
 */
/*
function cp_left_menu_links(){
  //return menu_navigation_links('cp',1);
  
  
  $tree = menu_tree_page_data('cp');

  
  foreach ($tree as $item) {
    if (cp_in_active_trail($item['link']['href']) && !empty($item['below'])) {
      return cp_menu_navigation_links($item['below'],true);
    }
  }
  
}
*/


/**
 * Generate a links array from a menu tree array.
 */
function cp_menu_navigation_links($tree, $b_highlight_first_submenu = false) {
  $links = array();
  foreach ($tree as $item) {
  	if($item['link']['type'] == MENU_CALLBACK) continue;
  	
    $class = '';
    $id = str_replace('/', '-', $item['link']['href']);

    $l = $item['link']['localized_options'];
    $l['href'] = $item['link']['href'];
    $l['title'] = "<span class='icon'></span>". $item['link']['title'];
    $l['attributes'] = array('id' => 'admin-link-'. $id);
    $l['html'] = TRUE;

    $class = ' path-'. $id;
    if (cp_in_active_trail($item['link']['href'])) {
    	$b_highlight_first_submenu = false;
      $class .= ' active-trail';
    }

    $links['menu-'. $item['link']['mlid'] . $class] = $l;
  }
  
  if($b_highlight_first_submenu){
    $s_key = key($links);
    $l = array_shift($links);
    $links = array_merge(array("{$s_key} active-trail" => $l),$links);
  }
  return $links;
}


/**
 * Checks whether an item is in the active trail. 
 */
function cp_in_active_trail($path, $reset = FALSE) {
  // Gather active paths
  static $active_paths;
  if (!isset($active_paths) || $reset) {
    $active_paths = array();
    $trail = menu_get_active_trail();
    foreach ($trail as $item) {
      if(is_array($item['map'])){
        $path_makup = "";
        foreach ($item['map'] as $path_component) {
        	if(!is_string($path_component)) continue;
        	$path_makup = trim($path_makup."/".$path_component,"/");
        	if(!in_array($path_makup,$active_paths)) $active_paths[] = $path_makup;
        }
      }elseif (!empty($item['href'])) {
        $active_paths[] = $item['href'];
      }
    }
  }
  return in_array($path, $active_paths);
}

/**
 * Implements hook user
 */
function cp_user($op, &$edit, &$account, $category = null) {
  switch($op){
  	case 'after_update':
  		if($account->mail && isset($account->og_groups) && count($account->og_groups)){
  			foreach ($account->og_groups as $a_grp){
  				if($a_grp['uid'] != $account->uid) continue;
  				$space = spaces_load('og',$a_grp['nid']);
  				$space->settings['site']['contact']['email'] = $account->mail;
  				spaces_save($space);
  			}
  		}
  		$a =$b;
  	break;
  }  
}

/**** Helper function ****/

/**
 * initialize admin theme
 */
function _cp_init_theme(){
	global $custom_theme;
  $custom_theme = CPTHEME;
}



/**
 * Implement Menu Link Alter
 * Asures that reguardless of install order the menu tree's are created
 */
function cp_menu_link_alter(&$item, $menu) {
  //Do this for any cp menu
  if (strpos($item['link_path'], 'cp/') === 0) {
    //Lookup the correct parent
  	unset($item['plid']);
  }
}

/**
 * Overides for the confirm form
 * 
 */
function cp_confirm_override(&$form, &$form_state, $form_id) {
	if(cp_is_confirm_overide_page()){
		$_POST['form_id'] = $form_id;
		$form_state['submitted'] = true;
		unset($form['#token']);
	}//Set the form values to fake a confirm.
}

/**
 * Return true if this page is a confirm overide page
 * 
 * @param $page (current page if null)
 * @return array
 */
function cp_is_confirm_overide_page($page = null){
	
	if(!$_POST['js'] || $page){
		//Just check and return as usual
		$a_router_item = menu_get_item($page);
	  return array_key_exists($a_router_item['path'], cp_get_confirm_form_overides());
	}else{
		$a_return = array();
		$vsite = vsite_get_vsite();
		if (count($_POST['paths'])){
		foreach($_POST['paths'] as $path){
			
			//Get the correct path and remove the site name from the front
			if(strpos($path,'http') !== 0) $path = "http://hostname".$path;
			$a_path_parts = @parse_url($path);
			if(is_array($a_path_parts)){
				$s_search_path = (strpos($a_path_parts['path'],'/'.$vsite->purl) == 0)?substr($a_path_parts['path'],strlen($vsite->purl)+2):$a_path_parts['path'];
				
				$a_router_item = menu_get_item($s_search_path);
				$a_return[$a_path_parts['path']] = ($a_router_item && array_key_exists($a_router_item['path'], cp_get_confirm_form_overides()));
			}
		}//Check each path
		}
		
		//return a json object
		print drupal_json(array(
		  'overideable_settings' => $a_return,
		));
		exit();
	}//Was this called by javascript?
}

/**
 * Implementation of hook_spaces_settings().
 */
function cp_spaces_settings() {
	
	//Setting that allows you to store the confirm time of messages, they can then be re-shown on intervals or hidden after they have been seen once
  $a_settings = array(
    'messages_confirmed' => array()
  );
   
  return $a_settings;
}

/**
 * Confirm that a message has been seen for a vsite
 */
function cp_confirm_message_view($s_message){
	$vsite = vsite_get_vsite();
	$b_status = false;
	
	if($vsite && strlen($s_message)){
		if(!array_key_exists('messages_confirmed',$vsite->settings) || !is_array($vsite->settings['messages_confirmed'])) $vsite->settings['messages_confirmed'] = array();
		$b_status = time();
		
		$vsite->settings['messages_confirmed'][$s_message] = $b_status;
		spaces_save($vsite);
	}
	
	if($_GET['source']){
		drupal_goto($_GET['source']);
		return;
	}//Redirect if we ask it to
	
	//return a json object
  print drupal_json(array(
    'status' => $b_status,
  ));
  exit();
}

/**
 * Get confirm pages that should be overridden
 * 
 * @return array
 */
function cp_get_confirm_form_overides(){
	static $a_overides;
	
	if(!$a_overides) $a_overides = module_invoke_all('cp_confirm_overide');
	
	return $a_overides;
}