<?php

/**
 * extend class space_og. We would want to override
 * some of the methods.
 * TODO funciont spaces_load in spaces.module is modified
 * because it's initiating an object of type space_og

 * TODO I submitted for this http://drupal.org/node/511914
 * @see scholar_spaces_types_alter
 */


class scholar extends space_og implements space {
	
  /**
   * Constructor
   */
  function __construct($type, $sid = NULL, $is_active = FALSE) {
    parent::__construct($type,$sid,$is_active);
    if ($this->group->og_theme && !$this->group->theme) {
      $this->group->theme = $this->group->og_theme;
    }//This must be set on load so that when you save the value will persist
  }

  function redirect($op = 'home'){
    switch ($op) {
      case 'home' :
        if (! empty($this->purl)) {
          // Use the menu path of the selected feature as homepage
          $home = 'home';
          if (menu_get_item($home)) {
            purl_goto($home, array(
              'purl' => array(
                'provider' => 'spaces_og',
                'id' => $this->sid
              )
            ));
          }

          // The previous checks fail, there is no valid homepage set
          if ($this->admin_access() && user_access('configure spaces features')) {
            drupal_set_message(t("Please setup your group by choosing a homepage setting."));
            purl_goto("cp/settings/features", array(
              'purl' => array(
                'provider' => 'spaces_og',
                'id' => $this->sid
              )
            ));
          }
        }
        else {
          drupal_goto('node/' . $this->sid . '/edit');
        }
        menu_set_active_item('spaces-access-denied');
        break;
      case 'features' :
        purl_goto("cp/settings/features", array(
          'purl' => array(
            'provider' => 'spaces_og',
            'id' => $this->sid
          )
        ));
        break;
    }
  }

  /**
   * Implementation of space->menu_access().
   */
  function menu_access($op, $object = NULL, $is_active = TRUE) {
    switch ($op) {
      case 'node':
        $node = $object;
        if (!empty($node->og_groups)) {
          // If the node does not belongs to the current active group space then return false
          if (($is_active && !in_array($this->sid, $node->og_groups))) {
            return false;
          }
        }

        vsite_include('vsiteapi');
        $a_scholar_types = vsite_content_types(array(1,2));
        $form = !isset($node->nid) || isset($node->date) ? TRUE : FALSE;

        if($form && !array_key_exists($node->type,$a_scholar_types)){
        	return false;
        }//If this is disabled then you can't see it's form...sorry
      default:
      return parent::menu_access($op, $object, $is_active);
    }
  }
}

function scholar_init(){
  drupal_add_css(drupal_get_path('module', 'scholar') . '/theme/scholar-admin-links.css');
  drupal_add_js(drupal_get_path('module', 'scholar') . '/theme/scholar.js');
}

/**
 * hook link
 */
function scholar_link($type, $object, $teaser = FALSE){
  $links = array();
  $vsite = vsite_get_vsite();
  if ($vsite && $vsite->admin_access()) {
    $links['scholar-admin'] = array(
      'title' => theme('scholar_admin_links', scholar_get_admin_links('node', $object)), 
      'html' => TRUE 
    );
  }
  return $links;
}

/**
 * hook link_alter (admin at the end of links)
 */
function scholar_link_alter(&$links, $node){
	if(!isset($links['scholar-admin'])) return;
	
  $old['scholar-admin'] = $links['scholar-admin'];
  unset($links['scholar-admin']);
  $links = array_merge($links, $old);
}



/**
 * Implements hook spaces_types_alter
 *
 * @see http://drupal.org/node/511914
 */
function scholar_spaces_types_alter(&$items){
	$items['og']['class'] = 'scholar';
}


function scholar_menu(){
  $items = array();
  $items['admin/settings/scholar'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Scholar settings',
    'description' => 'Setting for scholars.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scholar_settings_form'),
    'file' => 'scholar.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'weight' => 10,
  );

  $items['admin/settings/scholar/settings'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scholar_settings_form'),
    'file' => 'scholar.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'weight' => 0,
  );
  return $items;
}

/**
 * hook strongarm
 */
function scholar_strongarm(){
 include_once('scholar.overrides.inc');

  $conf = array();
  //replacing scholar or vsite terms with more common terms using stringoverrides module
  $conf['locale_custom_strings_en'] = scholar_string_overrides();

  // User settings
  $conf['user_register'] = 0; // No registration is allowed; this is a closed group
  
  return $conf;
}

/**
 *  Hook preproces_page
 */
function scholar_preprocess_page(&$vars) {
  // need to know if there is anything in the navbar for css theming
  $body_class_extra = $vars['navbar'] ? ' navbar-on' : ' navbar-off';
    $vars['body_classes'] .= $body_class_extra;
}

/**
 * Implementation of hook_spaces_settings().
 */
function scholar_spaces_settings() {
  return array(
   'site' => array(
      'class' => 'scholar_setting_site',
      'file' => drupal_get_path('module', 'scholar')  .'/scholar.settings.site.inc',
    ),
   );
}

/**
* Implementation of hook_mail_alter().
*/
function scholar_mail_alter(&$message) {

	switch ($message['id']) {
    //Edit the UCreate Email Message
		case 'ucreate_ucreate-create':
      	$params['subject'] = t('An account has been created for you at the !site', array('!site_name' => variable_get('site_name', 'Scholar\'s Web Sites Project')));
      	$a_body_parts = split("================================================",$message['body'],2);
      	$s_personal_message = (count($a_body_parts) == 2)?trim($a_body_parts[0]):"";

      	//Get the just created user
      	$n_new_user = db_result(db_query('SELECT u.uid FROM {users} u ORDER BY u.created DESC LIMIT 1'));
      	$o_user = user_load($n_new_user);
     	  $password = user_password();
     	  $edit = array('pass' => $password);
     	  $o_profile = content_profile_load('vsite_users_profile',$n_new_user);
     	  user_save($o_user,$edit);

      	$a_msg_variables = array(
      	  '!personal_message' => strlen($s_personal_message)?$s_personal_message."\n================================================\n\n":"",
			    '!username' => $o_user->name,
			    '!site' => variable_get('site_name', 'Scholar\'s Web Sites Project'),
			    '!login_url' => user_pass_reset_url($o_user),
			    '!uri' => $base_url,
			    '!uri_brief' => preg_replace('!^https?://!', '', $base_url),
			    '!mailto' => $o_user->mail,
			    '!date' => format_date(time(), 'medium', '', NULL, $message['language']->language),
			    '!login_uri' => url('user', array('absolute' => TRUE, 'language' => $message['language'])),
			    '!edit_uri' => url('user/'. $o_user->uid .'/edit', array('absolute' => TRUE, 'language' => $message['language'])),
      	  '!password' => $password,
      	  '!firstname' => $o_profile->vsite_users_first_name[0],
			  );

			  //This is unused: Alternatively using the following username and temporary password:\n\nUsername: !username\nTemporary password: !password\n\nAfter logging in, you will be redirected to !edit_uri so you can change your password.\n\n

      	$message['body'] = t("Dear !firstname,\n\nA site owner at the !site has created an account for you. You may now log in by either clicking through on the following link or pasting it into your browser:\n\n !login_url\n\n(Note: This is a one-time login; it can be used only once.)\n\n\Sincerely,\nThe !site Team", $a_msg_variables);

    break;
  }

}



/**
 * Implementation of hook_theme().
 */
function scholar_theme($cache, $type, $theme, $path) {
  $path = drupal_get_path('module', 'scholar');

  $items['scholar_admin_links'] = array(
    'arguments' => array('links' => array()),
    'template' => 'scholar-admin-links',
    'path' => $path . '/theme',
    'file' => 'theme.inc',
  );

  return $items;
}



/**
 * Retrieve the admin links for a given object.
 */
function scholar_get_admin_links($type, $object) {
  $links = array();
  //if (admin_is_enabled('admin inline')) {
    $links = module_invoke_all('scholar_admin_link', $type, $object);
    drupal_alter('scholar_admin_link', $links, $type, $object);
  //}
  return $links;
}

/**
 * Implementation of hook_scholar_admin_link() on behalf of the node module.
 */
function node_scholar_admin_link($type, $object) {
  $links = array();
  if ($type == 'node') {
    if (node_access('update', $object)) {
      $links['node-edit'] = array(
        'title' => t('Edit'),
        'href' => "node/{$object->nid}/edit",
        'attributes' => array('class' => 'icon-edit'),
        'query' => array('destination' => $_GET['q']),
      );
    }
    if (node_access('delete', $object)) {
      $links['node-delete'] = array(
        'title' => t('Delete'),
        'href' => "node/{$object->nid}/delete",
        'attributes' => array('class' => 'icon-delete'),
        'query' => array('destination' => $_GET['q']),
      );
    }
  }
  return $links;
}


/**
 * Implementation of hook_preprocess_node().
 */
function scholar_preprocess_node(&$vars) {
  //$vars['content'] .= theme('scholar_admin_links', scholar_get_admin_links('node', $vars['node']));
}
