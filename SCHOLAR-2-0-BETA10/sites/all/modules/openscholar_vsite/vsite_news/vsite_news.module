<?php

include_once('vsite_news.features.inc');


function vsite_news_init() {
  $a_valid_realms = variable_get('activity_access_realms', array('comment'));
  if (!in_array('vsite', $a_valid_realms)) {
    variable_set('activity_access_realms', array_merge($a_valid_realms, array('vsite')));
  }
}

function vsite_news_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      $context = array(
        'hook' => 'nodeapi',
        'op' => $op,
        'node' => $node
      );
          
      actions_do('vsite_news_activity_action', $node, $context);
    break;
  }
}

/*
 * Implementation of hook menu
 */
function vsite_news_menu() {

  $items = array();
  
  $items['cp/news'] = array(
    'title' => 'News',
    'page callback' => 'vsite_news_activity',
    'menu_name' => 'cp',
    'access callback' => 'cp_access_cp',
    'weight' => 3,
  );

  $items['cp/news/activity'] = array(
    'title' => 'Activity',
    'page callback' => 'vsite_news_activity',
    'access callback' => 'cp_access_cp',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  
  /*
  $items['cp/news/feeds'] = array(
    'title' => 'Latest feeds',
    'page callback' => 'vsite_news_feeds',
      'access callback' => 'cp_access_cp',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  */
  
  /*
  $items['cp/news/following'] = array(
    'title' => 'My Friends',
    'page callback' => 'vsite_news_following',
      'access callback' => 'cp_access_cp',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  
  $items['cp/news/sites'] = array(
    'title' => 'Tag Friends',
    'page callback' => 'vsite_news_sites',
      'access callback' => 'cp_access_cp',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  */
  $items['cp/news/activity/privacy'] = array(
    'title' => "Activity Privacy Settings",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cp_settings_form', 'activity'),
    'file' => 'cp.settings.inc',
    'file path' => drupal_get_path('module', 'cp') . '/includes',
    'access callback' => 'cp_access_cp',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  
  return $items;
}

/*
function vsite_news_feeds() {
  return views_page('scholar_feed_items','default');
}
*/

/*
function vsite_news_following() {
  return views_page('vsite_news_follow', 'default');
}

function vsite_news_sites() {
  return views_page('vsite_news_follow_candidate', 'default');
}

*/

/**
 * show the vsite_news_view
 */
function vsite_news_activity() {
  $vsite = vsite_get_vsite();
  require_once(drupal_get_path('module', 'activity') . '/views/activity.views.inc');
  activity_views_access_user(user_load($vsite->group->uid));//Set the default user to group owner
  return views_page('vsite_activity', 'default');
}

/**
 * The action hook
 */
function vsite_news_action_info() {
  $info['vsite_news_activity_action'] = array(
    'type' => 'activity',
    'description' => t("Record a new node's creation for activity tracker"),
    'configurable' => FALSE,
    'hooks' => array(
      'any' => TRUE,
    ),
  );
  
  return $info;
}

/**
 * The action called to add a vsite modification to the activity table, Change the message here to
 * @param $object
 * @param $context
 * @return unknown_type
 */
function vsite_news_activity_action($object, $context) {
  
  if (!vsite_get_vsite()) return FALSE;
  
  $vsite = vsite_get_vsite();

  if (!in_array($object->type, array_keys(vsite_content_types(2)))) return FALSE; //Is this type public?
  
  if (array_key_exists('generic', $vsite->settings) && $vsite->settings['generic']['private_vsite']) return FALSE; //If the site is private do not log
  
  //Setup the advanced Patterns
  $context['node-pattern-en'] =
  $context['everyone-pattern-en'] = '[in-vsite], [type-name] [action]:';
  $context['activity_types'] = array_keys(vsite_content_types());
  $s_action = 'modified';
  switch ($context['op']) {
    case 'submit':
      if (array_key_exists('access', $vsite->settings) && $vsite->settings['access']['ignore_insert']) return FALSE;
    case 'insert':
      $s_action = "created";
      break;
    case 'view':
      $s_action = $context['op'] . "ed";
    break;
    case 'update':
      if (array_key_exists('access', $vsite->settings) && $vsite->settings['access']['ignore_update']) return FALSE;
      $s_action = $context['op'] . "d";
    break;
  }
  $context['node-pattern-en'] = str_replace('[action]', $s_action, $context['node-pattern-en']);
  $context['everyone-pattern-en'] = str_replace('[action]', $s_action, $context['everyone-pattern-en']);
  
  if ($vsite && $vsite->group->uid) {
    $dds_users_vsite = "[author-name]";//Default is "by UserName (or real name)"
    if (strlen($vsite->group->title)){
      $s_users_vsite = "{$vsite->group->title} ";
    }

    $context['everyone-pattern-en'] = str_replace('[in-vsite]', $s_users_vsite, $context['everyone-pattern-en']);//third person message
    $context['node-pattern-en'] = str_replace('[in-vsite]', $s_users_vsite, $context['node-pattern-en']); //First person message
  }
  
  return activity_record($object, $context);
}

/**
* Implementation of hook_activity_grants().
*/
function vsite_news_activity_grants($activity) {
  $vsite = vsite_get_vsite();
  if (!$vsite) return array();
    
  return array(
    'vsite' => array($vsite->group->nid), // the module_id that will be used
  );
}

/**
* Implementation of hook_activity_info().
*/
function vsite_news_activity_info() {
  $info = new stdClass();
  $info->api = 2;
  $info->name = 'vsite_activity';
  $info->object_type = 'vsite_activity';
  $info->realms = array('vsite' => 'Virtual Site (vsite)');
  $info->type_options = array();
  return $info;
}

/**
* Implementation of hook_activity_access_records_alter().
* This removes any access records except vsite. Prevents friend
* modules from providing direct access.
*/
function vsite_news_access_records_alter(&$grants, $context) {
  foreach ($grants as $realm => $value) {
     if ($realm != 'vsite') {
         unset($grants[$module]);
     }
  }
}

/**
 * Implementation of hook_activity_access_grants().
 */
function vsite_news_activity_access_grants($acccount) {
  $view = views_get_view('vsite_news_follow');
  $view->execute();
  
  $realm_ids = array();
  foreach ($view->result as $o_site) {
    $realm_ids['vsite'][] = $o_site->nid;
  }
  return $realm_ids;
}

/**
 * Implementation of hook_spaces_settings().
 */
function vsite_news_spaces_settings() {
  return array(
    'activity' => array(
      'class' => 'vsite_news_settings_activity',
      'file' => drupal_get_path('module', 'vsite_news') .'/vsite_news.settings.activity.inc',
    ),
  );
}

/**
 * hook_theme
 */
function vsite_news_theme() {
  
  $items = array();
  
  $items['views_view_field__vsite_activity__title'] = array(
    'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL ),
  );
  
  if(module_exists('vsite')){
	  //Alter the title to link correctly to the vsite
	  $items['views_view_field__vsite_news_follow_candidate__title'] = array(
	    'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL ),
	    'function' => 'theme_views_view_field_link_to_vsite',
	    'path' => drupal_get_path('module','vsite')."/includes/",
	    'file' => 'vsiteapi.inc',
	  );
	  
	  //Alter the logo to link correctly to the vsite
	  $items['views_view_field__vsite_news_follow_candidate__field_vsite_logo_fid'] = array(
	    'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL ),
	    'function' => 'theme_views_view_field_link_to_vsite',
	    'path' => drupal_get_path('module','vsite')."/includes/",
	    'file' => 'vsiteapi.inc',
	  );
  }
  
  return $items;
}


/**
 * Display a single views field "title" for the activity view
 */
function theme_views_view_field__vsite_activity__title($view, $field, $row) {
  
  $field->options['alter']['path'] =  TRUE;
  $s_content = $field->render($row);
  
  $tokens = array();
  $alt = $field->options['alter']['alt'];
  if (!empty($alt) && $alt !== '') {
    $tokens = $this->get_render_tokens($alt);
    $alt = $this->render_altered($alt, $tokens);
  }

  // $path will be run through check_url() by l() so we do not need to
  // sanitize it ourselves.
  $path = $field->options['alter']['path'];
  
  $nid_alias = $field->aliases['nid'];
  $nid = $row->$nid_alias;
  
  $options = array('html' => 'TRUE');
  
  //Add the correct purl provider
  vsite_add_purl_provider($nid,$options);

  // Use strip tags as there should never be HTML in the path.
  $path = strip_tags(strtr($path, $tokens));

  // Parse the URL and move any query and fragment parameters out of the path.
  $url = parse_url($path);
  if (isset($url['query'])) {
    $path = strtr($path, array('?' . $url['query'] => ''));
    $options['query'] = $url['query'];
  }
  if (isset($url['fragment'])) {
    $path = strtr($path, array('#' . $url['fragment'] => ''));
    $options['fragment'] = $url['fragment'];
  }
    
  if ($alt) {
    $options['attributes']['title'] = $alt;
    $options['attributes']['alt'] = $alt;
  }

  $class = $field->options['alter']['link_class'];
  if ($class) {
    $options['attributes']['class'] = $class;
  }

  $s_content = l($s_content, $path, $options);

  $field->last_render = $s_content;
  
  return $s_content;
}
