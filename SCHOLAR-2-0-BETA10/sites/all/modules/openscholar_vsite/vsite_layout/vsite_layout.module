<?php

/**
 * hook theme
 */
function vsite_layout_theme() {
  return array(
    'vsite_layout_layout' => array(
      'template' => 'vsite_layout-layout',
      //'arguments' => array('vsite_layout_widgets' => NULL),
      'path' => drupal_get_path('module', 'vsite_layout') . '/theme'
    ),

    'vsite_layout_layout_widgets' => array(
      'template' => 'vsite_layout-layout-widgets',
      'arguments' => array('wgts' => NULL, 'wgts_id' => NULL, 'wgts_class' => NULL, 'region_name' => NULL),
      'path' => drupal_get_path('module', 'vsite_layout') . '/theme'
    ),
  );
}

/**
 * Implementation of hook_spaces_settings().
 */
function vsite_layout_spaces_settings() {
  return array(
    'layout' => array(
      'class' => 'vsite_layout_settings_layout',
      'file' => drupal_get_path('module', 'vsite_layout') . '/includes/vsite_layout.settings.inc'
    ),
  );
}

/**
 * hook menu
 */
function vsite_layout_menu() {
  $items = array();

  $items["cp/appearance/layout/region_widgets_js"] =
  $items["cp/appearance/region_widgets_js"] = array(
    'page callback' => 'vsite_layout_region_widgets_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items["cp/appearance/layout/top_widgets_js"] =
  $items["cp/appearance/top_widgets_js"] = array(
    'page callback' => 'vsite_layout_top_widgets_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * hook menu alter
 */
function vsite_layout_menu_alter(&$items) {
  $items["cp/appearance/layout"]['page callback'] =
  $items["cp/appearance"]['page callback'] = 'vsite_layout_layout';
}

/**
 * main entry point for "cp/settings/appearance"
 */
function vsite_layout_layout() {
  jquery_ui_add(array('ui.draggable', 'ui.droppable', 'ui.sortable'));

  drupal_add_js(drupal_get_path('module', 'vsite_layout') . '/theme/vsite_layout.js');
  drupal_add_css(drupal_get_path('module', 'vsite_layout') . '/theme/vsite_layout.css');
  drupal_add_css(drupal_get_path('module', 'vsite_layout') . '/theme/cp-layout-map.css');

  $space = vsite_get_vsite();
  $a_info = drupal_parse_info_file(drupal_get_path('theme', $space->group->og_theme) . "/" . $space->group->og_theme . ".info");
  if (is_array($a_info) && array_key_exists('scholar', $a_info) && array_key_exists('cp_layout_css', $a_info['scholar'])) {
    //cp_layout_css
    drupal_add_css(drupal_get_path('theme', $space->group->og_theme) . "/" . $a_info['scholar']['cp_layout_css']);
  }


  $s_page_type =  (isset($_GET['page_type']))? $_GET['page_type']:'all';

  //top
  $vsite_layout_widgets = vsite_layout_region_widgets($space, $s_page_type);
  $wgts = array_key_exists('unused', $vsite_layout_widgets)?$vsite_layout_widgets['unused']:array();

  _check_for_disabled_widgets($wgts, drupal_map_assoc(spaces_features_items('context', $s_page_type)));
  $top = theme('vsite_layout_layout_widgets', $wgts, 'scholarlayout-top-widgets', 'scholarlayout-widgets-list');

  //form
  $args = func_get_args();
  $form = call_user_func_array('drupal_get_form', $args);

  return $top . $form;
}

/**
 * preprocessor function for vsite_layout-layout.tpl.php
 * Introduces a variable for each region in the admin_base theme
 * e.g. $vsite_layout_header_left will contain a themed list of
 * block names in the header_left
 */
function vsite_layout_preprocess_vsite_layout_layout(&$vars) {

  $vsite_layout_widgets = array();

  $regions = system_region_list('scholar_base');

  foreach ($regions as $region => $s_label) {
    $vsite_layout_widgets[$region] = array();
  }

  $s_page_type = (isset($_GET['page_type']))? $_GET['page_type']:'all';
  $a_feature_contexts = drupal_map_assoc(spaces_features_items('context', $s_page_type));

  $vsite_layout_widgets = vsite_layout_region_widgets(FALSE, $s_page_type);

  foreach ($regions as $region => $s_label) {
    $wgts_id = 'scholarlayout-' . str_replace('_', '-', $region);
    $wgts = array_key_exists($region, $vsite_layout_widgets)?$vsite_layout_widgets[$region]:array();
    if ($s_page_type == 'all') _check_for_overrides($wgts, $region);

    _check_for_disabled_widgets($wgts, $a_feature_contexts);
    $vars['vsite_layout_' . $region] = theme('vsite_layout_layout_widgets', $wgts, $wgts_id, 'scholarlayout-widgets-list', ucwords($s_label));
  }

  $vars['vsite_layout_content'] = theme('vsite_layout_layout_widgets', array(), 'scholarlayout-content-main', 'scholarlayout-widgets-list', 'Main Content');
}

function vsite_layout_get_pagetypes($space) {
  if (!$space) $space = vsite_get_vsite();

  static $a_page_types;

  if ($a_page_types) return $a_page_types;

  $features = spaces_features($space->type, TRUE);
  $a_page_types = array('all' => t('Default Settings'));

  if (!is_array($space->features)) {
    $a_ret = $a_page_types;
    unset($a_page_types);
    return $a_ret;
  }

  $a_features = array();
  foreach ($space->features as $s_feature_key => $privacy) {
    if (!array_key_exists($s_feature_key, $features) || $privacy == FEATURE_DISABLED) continue;

    //Move front to the ... front of the list
    if (strstr($s_feature_key, 'front')) {
      $a_features = array_merge(array($s_feature_key => $features[$s_feature_key]->info['name']), $a_features);
      continue;
    }

    $a_features[$s_feature_key] = $features[$s_feature_key]->info['name'];
  }

  $a_page_types = array_merge($a_page_types, $a_features);
  return $a_page_types;
}

/**
 * Callback to swap out the top widgets avalible for different pages
 * @param $s_region
 * @return string
 */
function vsite_layout_top_widgets_callback() {
  $scholar = vsite_get_vsite();
  $s_page_type = $_POST['settings']['layout']['page_type'];

  $a_region_wgts = vsite_layout_region_widgets($scholar, $s_page_type);
  //top
  $wgts = array_key_exists('unused', $a_region_wgts)?$a_region_wgts['unused']:array();

  $wgts_id = 'scholarlayout-top-widgets';
  $wgts_class = 'scholarlayout-widgets-list';

  _check_for_disabled_widgets($wgts, drupal_map_assoc(spaces_features_items('context', $s_page_type)));
  $top = theme('vsite_layout_layout_widgets', $wgts, $wgts_id, $wgts_class);

  drupal_json(array('status' => TRUE, 'data' => $top));
}

/**
 * Callback to swap out the regions avalible for different pages
 * @param $s_region
 * @return string
 */
function vsite_layout_region_widgets_callback() {
  $scholar = vsite_get_vsite();
  $s_page_type = $_POST['settings']['layout']['page_type'];
  $a_feature_contexts = drupal_map_assoc(spaces_features_items('context', $s_page_type));

  $a_region_wgts = vsite_layout_region_widgets($scholar, $s_page_type);
  $a_themed_regions = array();

  $regions = system_region_list('scholar_base');
  foreach ($regions as $region => $s_label) {
    $widgets = array_key_exists($region, $a_region_wgts)?$a_region_wgts[$region]:array();
    $wgts_id = 'scholarlayout-' . str_replace('_', '-', $region);
    if ($s_page_type == 'all') _check_for_overrides($widgets, $region, $scholar);
    _check_for_disabled_widgets($widgets, $a_feature_contexts, $scholar);
    $a_themed_regions[$region] = theme('vsite_layout_layout_widgets', $widgets, $wgts_id, 'scholarlayout-widgets-list', ucwords($s_label));
  }
  $a_themed_regions['content'] = theme('vsite_layout_layout_widgets', array(), 'scholarlayout-content-main', 'scholarlayout-widgets-list', 'Main Content');

  $output= '<div id="scholarlayout-container">' .
           $a_themed_regions['header_main'] .
           $a_themed_regions['header_left'] .
           $a_themed_regions['header_right'] .
           $a_themed_regions['navbar'] .
           $a_themed_regions['left'] .
           $a_themed_regions['content'] .
           $a_themed_regions['right'] .
           $a_themed_regions['footer'] . "</div>";

  drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * Get the blocks that are avalible given a context
 *
 * @param $page_type
 * @return array
 */
function vsite_layout_filtered_widgets($page_type='all') {

  $contexts = context_contexts();

  //The Default Widgets avalible everywhere
  $a_widgets = $contexts['vsite-section-public']->block;

  if (($feature_contexts = drupal_map_assoc(spaces_features_items('context', $page_type))) && count($feature_contexts) && array_key_exists(current($feature_contexts), $contexts) && is_array($contexts[current($feature_contexts)]->block)) {
    $a_widgets = array_merge($a_widgets, $contexts[current($feature_contexts)]->block);  //Everywhere plus the feature
  }

  //Allow theme to alter Widgets default region
  _vsite_layout_alter_theme_regions($a_widgets);

  return $a_widgets;
}

/**
 * Alter the default location for the theme widgets
 *
 * @param $a_widgets
 */
function _vsite_layout_alter_theme_regions(&$a_widgets) {

  static  $a_settings;

  if (!is_array($a_settings)) {
    $space = vsite_get_vsite();
    if (!$space) return;

    $s_path = drupal_get_path('theme', $space->group->og_theme);
    if (!$s_path) return;

    $a_info = drupal_parse_info_file($s_path . "/" . $space->group->og_theme . ".info");
    $a_settings = (is_array($a_info) && array_key_exists('scholar', $a_info) && array_key_exists('widgets', $a_info['scholar']))?$a_info['scholar']['widgets']:array();
  }

  foreach ($a_settings as $s_widget => $s_region) {
    $s_region = strlen($s_region)?$s_region:false;
    if (array_key_exists($s_widget, $a_widgets)) $a_widgets[$s_widget]['region'] = $s_region;
  }//alter based on theme settings

  uasort($a_widgets, '_vsite_layout_sort_by_weight');

}

/**
 * Custom sort by block weight
 */
function _vsite_layout_sort_by_weight($a, $b) {
  if (is_object($a)) {
    $a = (array)$a;
  }
  if (is_object($b)) {
    $b = (array)$b;
  }
  
  if ($a['weight'] == $b['weight']) {
    return 0;
  }
  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Returns an associative array by region with the widgets sorted correctly
 *
 * @param scholar $scolar
 * @param string $page_type
 * @return array
 */
function vsite_layout_region_widgets($scolar = FALSE, $page_type='all') {
  if (!$scholar) $scholar = vsite_get_vsite();

  static $a_cached_region_widgets = array();
  if (array_key_exists($page_type, $a_cached_region_widgets)) return $a_cached_region_widgets[$page_type];

  $a_widgets = vsite_layout_filtered_widgets($page_type);

  if (!$scholar) return $a_widgets;

  $a_site_settings = FALSE;
  if (array_key_exists('layout', $scholar->settings) && array_key_exists($scholar->group->og_theme, $scholar->settings['layout']) && array_key_exists($page_type, $scholar->settings['layout'][$scholar->group->og_theme])) {
    $a_site_settings = $scholar->settings['layout'][$scholar->group->og_theme][$page_type];
    _widget_settings_order(array_keys($a_site_settings));
  }

  $a_region_widgets = array();
  foreach ($a_widgets as $s_widget_key => $widget) {
    $widget = (array)$widget;
    if (!$a_site_settings && $widget['region']) {
      $a_region_widgets[$widget['region']][$s_widget_key] = $widget;
    }
    elseif ($a_site_settings && array_key_exists($s_widget_key, $a_site_settings)) {
    	$s_reg_identifier = ($a_site_settings[$s_widget_key] == false)? 'unused':$a_site_settings[$s_widget_key]; //False in settings array = Unused
      $a_region_widgets[$s_reg_identifier][$s_widget_key] = $widget;
    }
    else {
      $a_region_widgets['unused'][$s_widget_key] = $widget;
    }
  }

  if ($a_site_settings) foreach ($a_region_widgets as $region => $a_widgets) uksort($a_region_widgets[$region], "_widget_settings_sort");

  $a_cached_region_widgets[$page_type] = $a_region_widgets;
  return $a_region_widgets;
}

//Util function for storing the order
function _widget_settings_order($order = FALSE) {
  static $a_order;
  if ($order) $a_order = $order;

  return $a_order;
}

//Utility function for sorting the widgets
function _widget_settings_sort($a, $b) {
  $a_order = _widget_settings_order();

  return (array_search($a, $a_order) < array_search($b, $a_order)) ? -1 : 1;
}

/**
 * Alter the blocks avalible on a given page,  Apply users saved settings
 * @param array(spaces_context) $contexts
 * @return boolean
 */

function vsite_layout_context_active_contexts_alter(&$contexts) {
  //Get the current feature
  $s_feature = context_get('scholar', 'feature');
  
  //Don't modify default contexts if:
  //  1. there are no active contexts
  //  2. We are not in a vsite
  //  3. We are not public section
  if (!count($contexts) || !($space = vsite_get_vsite()) || !array_key_exists('vsite-section-public', $contexts)){
    //Do not show any of the features default blocks in cp context
    if('cp' == context_get('vsite', 'section') && isset($contexts["scholar-feature-{$s_feature}"])) $contexts["scholar-feature-{$s_feature}"]->block = array();
    
    //If not CP or Public context return here and leave the defaults in place
    return;
  }

  /**
   * Load the feature context
   */
  $feature_context = isset($contexts["scholar-feature-{$s_feature}"]) ? $contexts["scholar-feature-{$s_feature}"] : NULL;
  $s_feature_module = FALSE;

  //Loop through features and get the current feature for the context
  if ($feature_context) {
    foreach (spaces_features() as $feature) {
      if (in_array("scholar-feature-{$s_feature}", drupal_map_assoc(spaces_features_items('context', $feature->name)))) {
        $s_feature_module = $feature->name;
        break;
      }//Break when you find the feature
    }//Loop through them
  }//We have a feature

  /**
   * Load the Settings
   */
  if ($feature_context && $s_feature_module) {
    $a_region_widgets = vsite_layout_region_widgets($space, $s_feature_module);
  }//Is a feature  context active

  //If we still don't have the settings get the default settings
  if (!isset($a_region_widgets)) $a_region_widgets = vsite_layout_region_widgets($space);

  /**
   * Remove existing blocks from the public / sub contexts
   */
  $contexts['vsite-section-public']->block = array();
  if ($feature_context) $feature_context->block = array();

  /**
   * Build The replacement block from the settings
   */
  foreach ($a_region_widgets as $s_region => $a_region) {
    if ($feature_context) _check_for_disabled_widgets($a_region, array("scholar-feature-{$s_feature}"), $space); //Filter out disabled widgets

    $n_weight = 0;
    if ($s_region == 'unused') continue;
    foreach ($a_region as $a_widget) {
      if (isset($a_widget['hidden']) && $a_widget['hidden']) continue; //Skip disabled wgts

      $a_widget['region'] = $s_region;
      $a_widget['weight'] = $n_weight++;
      if ($feature_context && $s_feature_module == $a_widget['module']) {
        //Build new block settings for the feature
        $feature_context->block[] = $a_widget;
      }
      else {
        //Build new block settings for the public context
        $contexts['vsite-section-public']->block[] = $a_widget;
      }
    }//For each widget in a region
  }//For Each region in the settings

  return TRUE;
}


/**
 * Create a default settings array from defaults
 *
 * @param string $s_page_type
 * @param bool   $b_include_regionless  include widgets without regions
 * @return array
 */
function _vsite_layout_generate_default_settings_ary($s_page_type = 'all', $b_include_regionless = TRUE) {
  $a_default = array();

  $a_widgets = vsite_layout_filtered_widgets($s_page_type);
  foreach ($a_widgets as $s_setting_id => $widget) {
    if (is_object($widget)) {
      $widget = (array)$widget;
    }
    if (!$b_include_regionless && $widget['region'] == FALSE) continue;
    $a_default[$s_setting_id] = $widget['region'];
  }

  return $a_default;
}

function _check_for_overrides(&$widgets, $s_region, $space = NULL) {
  if (!$space) $space = vsite_get_vsite();

  foreach (vsite_layout_get_pagetypes($space) as $s_page_nm => $s_page_readable) {
    if ($s_page_nm == 'all' || !count($widgets)) continue;
    $a_page_settings = (is_array($space->settings['layout'][$space->group->og_theme][$s_page_nm]))?$space->settings['layout'][$space->group->og_theme][$s_page_nm]:_vsite_layout_generate_default_settings_ary($s_page_nm);

    foreach ($widgets as $s_wgt_name => $wgt) {
      if (!array_key_exists($s_wgt_name, $a_page_settings) || $a_page_settings[$s_wgt_name] != $s_region) {
        $widgets[$s_wgt_name]['overides'][] = $s_page_readable;
      }
    }
  }
}

/**
 * Check to see if a widget should be disabled
 *
 * @param $widgets array or widgets
 * @param $a_feature_contexts array of contexts
 * @param $space space to check for overides
 */
function _check_for_disabled_widgets(&$widgets, $a_feature_contexts, $space = NULL) {
  if (!count($widgets)) return; //Nothing to do because there are no widgets to act on
  if (!$space) $space = vsite_get_vsite(); //Get current Viste

  //The following block of code customizes / disables a widget based on the feature settings
  if (count($a_feature_contexts) && is_array($space->customizer) && is_array($space->customizer['block'])          //Make sure there are settings saved
  && count(array_intersect($a_feature_contexts, array_keys($space->customizer['block'])))) {                        //that should be used to filter for this context

    static $a_customized_widgets = array(); //Just store this once since it will not change
    if (!array_key_exists($space->group->nid, $a_customized_widgets)) $a_customized_widgets[$space->group->nid] = array(); //Store flattened settings by site / context

    //The widgets for this combo of contexts
    $a_page_widgets = array();

    foreach (array_intersect($a_feature_contexts, array_keys($space->customizer['block'])) as $s_context) {
      if (!array_key_exists($s_context, $a_customized_widgets[$space->group->nid])) {
        $a_customized_widgets[$space->group->nid][$s_context] = array(); //Store the blocks in the static variable
        foreach ($space->customizer['block'][$s_context] as $a_context_widgets) $a_customized_widgets[$space->group->nid][$s_context] = array_merge($a_customized_widgets[$space->group->nid][$s_context], $a_context_widgets);
      } //Gather the settings into the static var

      $a_page_widgets = array_merge($a_page_widgets, $a_customized_widgets[$space->group->nid][$s_context]);
    }

    foreach ($widgets as $s_wgt_name => $wgt) {
      if (array_key_exists($s_wgt_name, $a_page_widgets) && array_key_exists('status', $a_page_widgets[$s_wgt_name])) {
        $widgets[$s_wgt_name]['hidden'] = !$a_page_widgets[$s_wgt_name]['status'];
      }
    }//Use the settings to change the widget
  }


  foreach ($widgets as $s_wgt_name => $wgt) {
    if (array_key_exists($wgt['module'], $space->features) && $space->features[$wgt['module']] == FEATURE_DISABLED) {
      //if this block is provided by a feature and that feature is disabled do not show the block
      $widgets[$s_wgt_name]['hidden'] = TRUE;

    }
    elseif ($wgt['module'] == 'views') {
      $account = $GLOBALS['user'];
      //Insetad of checking as admin use the site owner so they see the same blocks
      if ($account->uid == 1) $account = user_load(array('uid' => $space->group->uid));

      //if this block is provided by views then check it's access
      list($name, $display_id) = explode('-', $wgt['delta']);
      if (($view = views_get_view($name)) && !$view->access($display_id, $account)) {
        $widgets[$s_wgt_name]['hidden'] = TRUE;
      }
      if (is_object($view)) $view->destroy();
    }
    
    if(!$widgets[$s_wgt_name]['hidden'] && strlen($wgt['access callback']) && function_exists($wgt['access callback'])){
      //If there is an access function call it with the widget as a parameter
      $widgets[$s_wgt_name]['hidden'] = ! $wgt['access callback']($widgets[$s_wgt_name]);
    }
    
  }//If the parent is a feature and it is disabled then lets not show this block or if views does not give access (usually using the feature access)

}

/**
 * hook form_alter
 */
function vsite_layout_form_alter(&$form, &$form_state, $form_id) {

  //Add extra submit handler to spaces_features_form
  if (arg(0) == 'cp' && $form_id == 'spaces_features_form') {
    if (!is_array($form['#submit'])) $form['#submit'] = array();
    array_push($form['#submit'], 'vsite_layout_spaces_features_form');
  }//End  spaces_features_form
}

/**
 * Submit handler to handle setting up default layout for new features
 *
 * This will also filter down any changes that you have made to the default layout to your new feature
 */
function vsite_layout_spaces_features_form($form, &$form_state) {
  if (empty($form_state['values']['features'])) return; //Are there features to act on?

  // Retrieve the space object from the form
  $space = $form_state['values']['space'];
  if (!array_key_exists('layout', $space->settings) || !array_key_exists($space->group->og_theme, $space->settings['layout']) || !array_key_exists('all', $space->settings['layout'][$space->group->og_theme])) return;  //Do we have default layout settings?

  $b_save = FALSE;
  require_once(drupal_get_path('module', 'vsite_layout') . '/includes/vsite_layout.settings.inc');
  $a_all_default = _vsite_layout_generate_default_settings_ary();
  foreach ($form_state['values']['features'] as $s_feature_name => $n_privacy) {
    if (!in_array($n_privacy, array(SPACES_OG_PUBLIC, SPACES_OG_PRIVATE)) || array_key_exists($s_feature_name, $space->settings['layout'][$space->group->og_theme])) continue; //If it is disabled or already has setings skip it

    $a_feature_default = _vsite_layout_generate_default_settings_ary($s_feature_name, FALSE);
    $a_feature_default = array_merge($a_feature_default, $space->settings['layout'][$space->group->og_theme]['all']); //Combine default and all settings
    
    $a_new_widgets = array_diff(array_keys($space->settings['layout'][$space->group->og_theme]['all']), array_keys($a_all_default));
    foreach ($a_new_widgets as $s_widget_name) {
      if (!array_key_exists($s_widget_name, $a_feature_default) || $a_feature_default[$s_widget_name] === FALSE) $a_feature_default[$s_widget_name] = $space->settings['layout'][$space->group->og_theme]['all'][$s_widget_name]; //Already on this page?
    }//Add new widgets

    foreach (array_diff(array_keys($a_all_default), array_keys($space->settings['layout'][$space->group->og_theme]['all'])) as $s_widget_name) {
      if (array_key_exists($s_widget_name, $a_feature_default) && $a_feature_default[$s_widget_name] == $a_all_default[$s_widget_name]) unset($a_feature_default[$s_widget_name]); //Already on this page?
    }//Remove widgets

    //Widgets that have changed positions
    vsite_layout_settings_layout::moveRelevantSubpageWidgets($a_feature_default, $a_all_default, $space->settings['layout'][$space->group->og_theme]['all'], $a_new_widgets);
    
    $space->settings['layout'][$space->group->og_theme][$s_feature_name] = $a_feature_default;
    $b_save = TRUE;
  }

  if ($b_save) spaces_save($space); //Save changes if we made them
}
