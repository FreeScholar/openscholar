<?php

function advanced_help2book_menu(){
  $items = array();
  $items['helpinject/import/%'] = array(
    'title' => 'try',
    'page callback' => 'advanced_help2book_import',
    'page arguments'      => array(2),
    'access arguments' => array('access content'),
  );
  return $items;
}

function advanced_help2book_import($module){
  // load the help from our module
  $all_adv_help = advanced_help_get_topics();
  $this_module = $all_adv_help[$module];

  // the first one must be the book (top level book page)
  $book = reset($this_module);
  
  $nids_mlids = array(); // keeps trak of nid/mlid for each node inserted 
  
  foreach ( $this_module as $topic ) {
    // prepare the node for submission
    $node = new stdClass();
    $node->type = 'help';
    module_load_include('inc', 'node', 'node.pages');
    node_object_prepare($node);
    
    $node->title = check_plain($topic['title']);
    $body = file_get_contents($topic['path'] . '/' . $topic['file']);
    //$body = check_markup($body);
    $body = getTextBetweenTags($body, 'p');
    //$body -> body = $body;
    $node->body = $body;
    
    if (! $topic['parent']) { // top node only
      $node->book['bid'] = 'new';
    }
    else {
      // bid is always the nid of the top node
      $node->book['bid'] = $nids[$book['name']]['nid'];
      // parent is the mlid of the parent node
      $node->book['plid'] = $nids[$topic['parent']]['mlid'];
    }
    
    //submit the node
    $node = node_submit($node);
    node_save($node);
    
    //register nid/mlid for this node
    $nids[$topic['name']]['nid'] = $node->nid;
    $nids[$topic['name']]['mlid'] = $node->book['mlid'];
  }
  
  return 'success';

}

/**
 * hook theme_registry_alter
 * We are overriding node-book.tpl.php
 */
function advanced_help2book_theme_registry_alter(&$theme_registry){

  $original_path = array_shift($theme_registry['node']['theme paths']);
  $this_module_path = drupal_get_path('module', 'advanced_help2book');
  array_unshift($theme_registry['node']['theme paths'], $original_path, $this_module_path);   
  
  $original_path = array_shift($theme_registry['imagefield_image']['theme paths']);
  $this_module_path = drupal_get_path('module', 'advanced_help2book');
  array_unshift($theme_registry['imagefield_image']['theme paths'], $original_path, $this_module_path); 
  $theme_registry['imagefield_image']['function'] = 'myfunc';
  //dpm($theme_registry);
}

function myfunc($file, $alt = '', $title = '', $attributes = NULL, $getsize = TRUE) {
  $file = (array)$file;
  if (!is_file($file['filepath'])) {
    return '<!-- File not found: '. $file['filepath'] .' -->';
  }

  if ($getsize) {
    // Use cached width and height if available.
    if (!empty($file['data']['width']) && !empty($file['data']['height'])) {
      $attributes['width']  = $file['data']['width'];
      $attributes['height'] = $file['data']['height'];
    }
    // Otherwise pull the width and height from the file.
    elseif (list($width, $height, $type, $image_attributes) = @getimagesize($file['filepath'])) {
      $attributes['width'] = $width;
      $attributes['height'] = $height;
    }
  }

  if (!empty($title)) {
    $attributes['title'] = $title;
  }

  // Alt text should be added even if it is an empty string.
  $attributes['alt'] = $alt;

  // Add a timestamp to the URL to ensure it is immediately updated after editing.
  $query_string = '';
  if (isset($file['timestamp'])) {
    $query_character = (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PRIVATE && variable_get('clean_url', '0') == '0') ? '&' : '?';
    $query_string = $query_character . $file['timestamp'];
  }

  $url = file_create_url($file['filepath']);// . $query_string;
  $attributes['src'] = $url;
  $attributes = drupal_attributes($attributes);
  return '<img '. $attributes .' />';
}

/*
function advanced_help2book_preprocess_node(&$vars){
  if ($vars['type'] == 'book'){
    $vars['advanced_help2book_node_header'] = '<div id="someid">';
    $vars['advanced_help2book_node_footer'] = '</div>';
    
  }
}
*/

// deals with files
function import_images(){
  $node = node_load(array('nid' => 61));
  $image = drupal_get_path('module', 'vsite_design').'/theme/images/default_logo.jpg';
  simport_node_add_imagefield_image($image, 'field_img', $node);
  
  /*
  // Load up the CCK field
  $field = content_fields('field_link_image', 'link');
  dpm($field);
  // Load up the appropriate validators
  $validators = array_merge(filefield_widget_upload_validators($field), imagefield_widget_upload_validators($field));
  // Where do we store the files?
  $files_path = filefield_widget_file_path($field);
  // Create the file object
  $file = field_file_save_file($image, $validators, $files_path);
  // Apply the file to the field
  dpm($file);
  $node->field_link_image = array(0 => $file); 
  node_save($node);
  dpm($node);
  */
}

/**
 * Imports an image as a filefield image of a given node
 * 
 * Usage example:
 * --------------
 * $node = node_load(array('nid' => 61));
 * $image = drupal_get_path('module', 'vsite_design').'/theme/images/default_logo.jpg';
 * simport_node_add_imagefield_image($image, 'field_img', $node);
 * 
 * @param $source  the path to the source image
 * @param $field_name the name of the cck field 
 * @param $node the node object to upload the image to (passed by reference)
 */
function simport_node_add_imagefield_image11($source, $field_name, &$node){

  // get the cck filefield
  $field = content_fields($field_name, $node -> type);

  // validators (can add our own validators if we want)
  $validators = array_merge(filefield_widget_upload_validators($field), imagefield_widget_upload_validators($field));

  // where to store the file
  $files_path = filefield_widget_file_path($field);
  
  // create the file object
  $file = field_file_save_file($source, $validators, $files_path);

  // attach it to the filefield field
  $node->$field_name = array(0 => $file); 
  
  // save the node (optional)
  node_save($node);
}




// private
function getTextBetweenTags($string, $tagname){
  $pattern = "/<$tagname.[^>]*>(.*?)<\/$tagname>/s";
  $pattern = "/<$tagname>(.*?)<\/$tagname>/s";
  preg_match($pattern, $string, $matches);
  //dpm($matches);
  return $matches[1];
}
