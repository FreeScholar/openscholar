<?php

/**
 * hook theme
 */
function vsite_layout_theme(){
  return array(
    'vsite_layout_layout' => array(
    	'template' => 'vsite_layout-layout',
  		//'arguments' => array('vsite_layout_widgets' => NULL),
    	'path' => drupal_get_path('module', 'vsite_layout'). '/theme'
    ),

    'vsite_layout_layout_widgets' => array(
    	'template' => 'vsite_layout-layout-widgets',
  		'arguments' => array('wgts' => NULL, 'wgts_id' => NULL, 'wgts_class' => NULL),
    	'path' => drupal_get_path('module', 'vsite_layout'). '/theme'
    ),
  );
}

/**
 * Implementation of hook_spaces_settings().
 */
function vsite_layout_spaces_settings(){
  return array(
    'layout' => array(
      'class' => 'vsite_layout_settings_layout',
      'file' => drupal_get_path('module', 'vsite_layout') . '/includes/vsite_layout.settings.inc'
    ),
  );
}

/**
 * hook menu
 */
function vsite_layout_menu(){
  $items = array();

  $items["cp/settings/layout/region_widgets_js"] = array(
    'page callback' => 'vsite_layout_region_widgets_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items["cp/settings/layout/top_widgets_js"] = array(
    'page callback' => 'vsite_layout_top_widgets_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * hook menu alter
 */
function vsite_layout_menu_alter(&$items) {
  $items["cp/settings/layout"]['page callback'] = 'vsite_layout_layout';
}

/**
 * main entry point for "cp/settings/layout"
 */
function vsite_layout_layout(){
  jquery_ui_add(array('ui.draggable', 'ui.droppable', 'ui.sortable'));

  drupal_add_js(drupal_get_path('module', 'vsite_layout') . '/theme/vsite_layout.js');
  drupal_add_css(drupal_get_path('module', 'vsite_layout') . '/theme/vsite_layout.css');
  $space = vsite_get_vsite();
  $s_page_type =  (isset($_GET['page_type']))? $_GET['page_type']:'all';

  //top
  $vsite_layout_widgets = vsite_layout_region_widgets($space,$s_page_type);
  $wgts = array_key_exists('unused',$vsite_layout_widgets)?$vsite_layout_widgets['unused']:array();
  
  _check_for_disabled_widgets($wgts,drupal_map_assoc(spaces_features_items('context', $s_page_type)));
  $top = theme('vsite_layout_layout_widgets', $wgts, 'scholarlayout-top-widgets', 'scholarlayout-widgets-list');

  //form
  $args = func_get_args();
  $form = call_user_func_array('drupal_get_form',$args);

  // layout
  $layout = theme('vsite_layout_layout');
  return $top . $form . $layout;
}

/**
 * preprocessor function for vsite_layout-layout.tpl.php
 * Introduces a variable for each region in the admin_base theme
 * e.g. $vsite_layout_header_left will contain a themed list of
 * block names in the header_left
 */
function vsite_layout_preprocess_vsite_layout_layout(&$vars){

  $vsite_layout_widgets = array();

  $regions = array_keys(system_region_list('scholar_base'));

  foreach($regions as $region){
    $vsite_layout_widgets[$region] = array();
  }

  $s_page_type =  (isset($_GET['page_type']))? $_GET['page_type']:'all';
  $a_feature_contexts = drupal_map_assoc(spaces_features_items('context', $s_page_type));
  
  $vsite_layout_widgets = vsite_layout_region_widgets(false,$s_page_type);

  foreach($regions as $region){
    $wgts_id = 'scholarlayout-' . str_replace('_','-', $region);
    $wgts = array_key_exists($region,$vsite_layout_widgets)?$vsite_layout_widgets[$region]:array();
    if($s_page_type == 'all') _check_for_overrides($wgts,$region);
    
    _check_for_disabled_widgets($wgts,$a_feature_contexts);
    $vars['vsite_layout_' . $region] = theme('vsite_layout_layout_widgets',$wgts, $wgts_id, 'scholarlayout-widgets-list');
  }

  //$vars['vsite_layout_form'] = drupal_get_form('vsite_layout_layoutsettings');
}

function vsite_layout_get_pagetypes($space){
	if(!$space) $space = vsite_get_vsite();

	static $a_page_types;

	if($a_page_types) return $a_page_types;

  $features = spaces_features($space->type, TRUE);
  $a_page_types = array('all' => t('Default Settings'), 'front' => t('Front Page'));
  if(!is_array($space->features)){
  	$a_return = $a_page_types;
  	unset($a_page_types);
  	return $a_return;
  }

  foreach ($space->features as $s_feature_key => $privacy){
    if(!array_key_exists($s_feature_key,$features) || $privacy == FEATURE_DISABLED) continue;
    $a_page_types[$s_feature_key] = $features[$s_feature_key]->info['name'];
  }

  return $a_page_types;
}

/**
 * Callback to swap out the top widgets avalible for different pages
 * @param $s_region
 * @return string
 */
function vsite_layout_top_widgets_callback(){
  $scholar = vsite_get_vsite();
  $s_page_type = $_POST['settings']['layout']['page_type'];

  $a_region_wgts = vsite_layout_region_widgets($scholar,$s_page_type);
  //top
  $wgts = array_key_exists('unused',$a_region_wgts)?$a_region_wgts['unused']:array();

  $wgts_id = 'scholarlayout-top-widgets';
  $wgts_class = 'scholarlayout-widgets-list';

  _check_for_disabled_widgets($wgts,drupal_map_assoc(spaces_features_items('context', $s_page_type)));
  $top = theme('vsite_layout_layout_widgets', $wgts, $wgts_id, $wgts_class);

  drupal_json(array('status' => TRUE, 'data' => $top));
}

/**
 * Callback to swap out the regions avalible for different pages
 * @param $s_region
 * @return string
 */
function vsite_layout_region_widgets_callback(){
  $scholar = vsite_get_vsite();
  $s_page_type = $_POST['settings']['layout']['page_type'];
  $a_feature_contexts = drupal_map_assoc(spaces_features_items('context', $s_page_type));

  $a_region_wgts = vsite_layout_region_widgets($scholar,$s_page_type);
  $a_themed_regions = array();

  $regions = array_keys(system_region_list('scholar_base'));
  foreach($regions as $region){
  	$widgets = array_key_exists($region,$a_region_wgts)?$a_region_wgts[$region]:array();
    $wgts_id = 'scholarlayout-' . str_replace('_','-', $region);
    if($s_page_type == 'all') _check_for_overrides($widgets,$region,$scholar);
    _check_for_disabled_widgets($widgets,$a_feature_contexts,$scholar);
    $a_themed_regions[$region] = theme('vsite_layout_layout_widgets',$widgets, $wgts_id, 'scholarlayout-widgets-list');
  }

  $output= '<div id="scholarlayout-container">'.
           $a_themed_regions['header_main'].
				   $a_themed_regions['header_left'].
				   $a_themed_regions['header_right'].
				   $a_themed_regions['navbar'].
				   $a_themed_regions['left'].
				   $a_themed_regions['right']."</div>";

	drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * Get the blocks that are avalible given a context
 *
 * @param $page_type
 * @return array
 */
function vsite_layout_filtered_widgets($page_type='all'){

	$contexts = context_contexts();
	
	//The Default Widgets avalible everywhere
	$a_widgets = $contexts['vsite-section-public']->block;
	
	if($page_type == 'all'){
    //$a_widgets; //Just the widgets avalible everywhere
	}elseif($page_type == 'front'){
	  $a_widgets = array_merge($a_widgets,$contexts['vsite-subsection-front']->block); //Everywhere plus the front page
	}elseif(($feature_contexts = drupal_map_assoc(spaces_features_items('context', $page_type))) && count($feature_contexts) && array_key_exists(current($feature_contexts),$contexts) && is_array($contexts[current($feature_contexts)]->block)){
		$a_widgets = array_merge($a_widgets,$contexts[current($feature_contexts)]->block);  //Everywhere plus the feature
	}
	
	//Allow theme to alter Widgets default region
	_vsite_layout_alter_theme_regions($a_widgets); 

  return $a_widgets;
}

/**
 * Alter the default location for the theme widgets
 * 
 * @param $a_widgets
 */
function _vsite_layout_alter_theme_regions(&$a_widgets){
	
	static  $a_settings;
	
	if(!is_array($a_settings)){
		$space = vsite_get_vsite();
		if(!$space) return;
		
		$s_path = drupal_get_path('theme',$space->group->og_theme);
		if(!$s_path) return;
		
		$a_info = drupal_parse_info_file($s_path."/".$space->group->og_theme.".info");
		$a_settings = (is_array($a_info) && array_key_exists('widgets',$a_info))?$a_info['widgets']:array();
	}
	
	foreach ($a_settings as $s_widget => $s_region){
		$s_region = strlen($s_region)?$s_region:false;
		if(array_key_exists($s_widget,$a_widgets)) $a_widgets[$s_widget]['region'] = $s_region;
	}//alter based on theme settings
	
	uasort($a_widgets,'_vsite_layout_sort_by_weight');
	
}

function _vsite_layout_sort_by_weight($a, $b){
    if ($a['weight'] == $b['weight']) {
        return 0;
    }
    return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Returns an associative array by region with the widgets sorted correctly
 *
 * @param scholar $scolar
 * @param string $page_type
 * @return array
 */
function vsite_layout_region_widgets($scolar = false,$page_type='all'){
  if(!$scholar) $scholar = vsite_get_vsite();

  static $a_cached_region_widgets = array();
  if(array_key_exists($page_type,$a_cached_region_widgets)) return $a_cached_region_widgets[$page_type];

  $a_widgets = vsite_layout_filtered_widgets($page_type);

  if(!$scholar) return $a_widgets;

  $a_site_settings = false;
  if(array_key_exists('layout',$scholar->settings) && array_key_exists($page_type,$scholar->settings['layout'])){
  	$a_site_settings = $scholar->settings['layout'][$page_type];
  	$a_order = array_keys($a_site_settings);
  }

  $a_region_widgets = array();
  foreach($a_widgets as $s_widget_key => $widget){
  	$widget = (array)$widget;
  	if(!$a_site_settings && $widget['region']){
      $a_region_widgets[$widget['region']][] = $widget;
  	}elseif ($a_site_settings && array_key_exists($s_widget_key,$a_site_settings)){
  		$a_region_widgets[$a_site_settings[$s_widget_key]][" ".array_search($s_widget_key,$a_order)] = $widget;
  	}else{
  		$a_region_widgets['unused'][] = $widget;
  	}
  }

  foreach ($a_region_widgets as $region => $a_widgets) ksort($a_region_widgets[$region]);

  $a_cached_region_widgets[$page_type] = $a_region_widgets;
  return $a_region_widgets;
}


/**
 * Alter the blocks avalible on a given page,  Apply users saved settings
 * @param array(spaces_context) $contexts
 * @return boolean
 */

function vsite_layout_context_active_contexts_alter(&$contexts){
	//Don't run this if:
	//  1. there are no active contexts
	//  2. We are not in a vsite
	//  3. We are not public facing
	if(!count($contexts) || !($space = vsite_get_vsite()) || !array_key_exists('vsite-section-public',$contexts)) return;

	/**
	 * Load the feature context
	 */
	$s_feature = context_get('scholar', 'feature');
	$feature_context = isset($contexts["scholar-feature-{$s_feature}"]) ? $contexts["scholar-feature-{$s_feature}"] : NULL;
	$s_feature_module = false;
	
	//Loop through features and get the current feature for the context
  if($feature_context){
	  foreach (spaces_features() as $feature){
		  if(in_array("scholar-feature-{$s_feature}",drupal_map_assoc(spaces_features_items('context', $feature->name)))){
		  	$s_feature_module = $feature->name; 
		  	break;
		  }//Break when you find the feature
	  }//Loop through them
  }//We have a feature
  
	/**
	 * Load the Settings
	 */
	if($feature_context && $s_feature_module){
		$a_region_widgets = vsite_layout_region_widgets($space,$s_feature_module);
	}//Is a feature  context active

  //If we are not in a feature and we are on the front page get it's settings
  if(!isset($a_region_widgets) && array_key_exists('vsite-subsection-front',$contexts)) $a_region_widgets = vsite_layout_region_widgets($space,'front');

  //If we still don't have the settings get the default settings
  if(!isset($a_region_widgets)) $a_region_widgets = vsite_layout_region_widgets($space);

  /**
   * Remove existing blocks from the public / sub contexts
   */
  $contexts['vsite-section-public']->block = array();
  if($feature_context) $feature_context->block = array();
  
  /**
   * Build The replacement block from the settings
   */
  foreach ($a_region_widgets as $s_region => $a_region){
  	if($feature_context) _check_for_disabled_widgets($a_region,array("scholar-feature-{$s_feature}"),$space); //Filter out disabled widgets
    
	  $n_weight = 0;
	  if($s_region == 'unused') continue;
	  foreach ($a_region as $a_widget){
	  	if(isset($a_widget['hidden']) && $a_widget['hidden']) continue; //Skip disabled wgts
	  	
	    $a_widget['region'] = $s_region;
	    $a_widget['weight'] = $n_weight++;
	    if($feature_context && $s_feature_module == $a_widget['module']){
	      //Build new block settings for the feature
	      $feature_context->block[] = $a_widget;
	    }else{
	      //Build new block settings for the public context
	      $contexts['vsite-section-public']->block[] = $a_widget;
	    }
	  }//For each widget in a region
  }//For Each region in the settings
  
	return true;
}


/**
 * Create a default settings array from defaults
 *
 * @param string $s_page_type
 * @return array
 */
function _vsite_layout_generate_default_settings_ary($s_page_type = 'all'){
  $a_default = array();

  $a_widgets = vsite_layout_filtered_widgets($s_page_type);
  foreach ($a_widgets as $s_setting_id => $widget) $a_default[$s_setting_id] = $widget['region'];

  return $a_default;
}

function _check_for_overrides(&$widgets,$s_region,$space = null){
	if(!$space) $space = vsite_get_vsite();

	foreach(vsite_layout_get_pagetypes($space) as $s_page_nm => $s_page_readable){
    if($s_page_nm == 'all' || !count($widgets)) continue;
    $a_page_settings = (is_array($space->settings['layout'][$s_page_nm]))?$space->settings['layout'][$s_page_nm]:_vsite_layout_generate_default_settings_ary($s_page_nm);

    foreach ($widgets as $key => $wgt){
    	$s_wgt_name = $wgt['module']."_".$wgt['delta'];
    	if(!array_key_exists($s_wgt_name,$a_page_settings) || $a_page_settings[$s_wgt_name] != $s_region){
    		$widgets[$key]['overides'][] = $s_page_readable;
    	}
    }
	}
}

/**
 * Check to see if a widget should be disabled
 * 
 * @param $widgets array or widgets
 * @param $a_feature_contexts array of contexts
 * @param $space space to check for overides
 */
function _check_for_disabled_widgets(&$widgets, $a_feature_contexts, $space = null){
	if(!count($a_feature_contexts) || !count($widgets)) return; //Nothing to do
  if(!$space) $space = vsite_get_vsite(); //Get current Viste

  if(!is_array($space->customizer) || !is_array($space->customizer['block'])                       //Make sure there are settings saved 
  || !count(array_intersect($a_feature_contexts,array_keys($space->customizer['block'])))) return; //No settings saved to filter for this context 
  
  static $a_customized_widgets = array(); //Just store this once since it will not change
  if(!array_key_exists($space->group->nid,$a_customized_widgets)) $a_customized_widgets[$space->group->nid] = array(); //Store flattened settings by site / context
  
  //The widgets for this combo of contexts
  $a_page_widgets = array();
    
  foreach (array_intersect($a_feature_contexts,array_keys($space->customizer['block'])) as $s_context){
  	if(!array_key_exists($s_context,$a_customized_widgets[$space->group->nid])){
  		$a_customized_widgets[$space->group->nid][$s_context] = array(); //Store the blocks in the static variable
      foreach ($space->customizer['block'][$s_context] as $a_context_widgets) $a_customized_widgets[$space->group->nid][$s_context] = array_merge($a_customized_widgets[$space->group->nid][$s_context],$a_context_widgets);
  	} 
  	
  	$a_page_widgets = array_merge($a_page_widgets,$a_customized_widgets[$space->group->nid][$s_context]);
  }//Gather the settings into the static var
  
  foreach ($widgets as $key => $wgt){
    $s_wgt_name = $wgt['module']."-".$wgt['delta'];
    if(array_key_exists($s_wgt_name,$a_page_widgets) && array_key_exists('status',$a_page_widgets[$s_wgt_name])){
      $widgets[$key]['hidden'] = !$a_page_widgets[$s_wgt_name]['status'];
    }
  }
  
}