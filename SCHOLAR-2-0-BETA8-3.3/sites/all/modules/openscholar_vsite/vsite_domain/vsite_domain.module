<?php

/**
 * This Module creates a domain handler for scholar that overides the default purl domain handler
 * It also also has an admin form for creating domains for vsites
 */

// Change the default domain proccessor to our custom processor
define('PURL_VSITE_DOMAIN', 'vsite_domain');

// Change the default domain proccessor to our custom processor
define('PURL_VSITE_PATH', 'vsite_path');

/**
 * Implements hook_init
 */
function vsite_domain_init() {
  
}

/**
 * hook strongarm to set the purl proccessors for our "providers"
 */
function vsite_domain_strongarm() {
  $conf = array();
 
  //Spaces Default Redirection should be by PATH
  $conf['purl_method_spaces_og'] = PURL_VSITE_PATH;
  
  //We also are adding a method that is by domain
  $conf['purl_method_vsite_domain'] = PURL_VSITE_DOMAIN;
  
  //We want path and vsite_domain enabled and we want domain to be init first and have the first say at what site we are on
  $conf['purl_types'] = array(PURL_VSITE_DOMAIN => PURL_VSITE_DOMAIN, PURL_VSITE_PATH => PURL_VSITE_PATH);
  
  return $conf;
}

/**
 * Implementation of hook_purl_provider().
 * This provides the domain provider for our vsite
 */
function vsite_domain_purl_provider() {
  $items = array();
  $items['vsite_domain'] = array(
    'name' => 'Vsite Domain Provider',
    'description' => t('Sets a spaces context for a domain match.'),
    'callback' => 'vsite_domain_apply_context',
    'callback arguments' => array('og'),
    'example' => 'my-space',
  );
  
  return $items;
}

/**
 * Context prefix provider callback.
 */
function vsite_domain_apply_context($type, $sid) {
  static $once;
  if (empty($once)) {
    spaces_init_context($type, $sid);
    $space = spaces_get_space();
    $space->purl_provider = 'vsite_domain';
    $once = TRUE;
  }
}

/**
 * Context prefix provider callback.
 */
function vsite_domain_purl_processor() {
  $info = array();
  $info['vsite_domain'] = array(
    'title' => t('Scholar Vsite Domain Modifier'),
    'handler' => array(
      'class' => 'purl_vsite_domain',
      'file' => 'purl_vsite_domain.inc',
      'path' => drupal_get_path('module', 'vsite_domain') .'/includes',
      'parent' => 'domain',
    ),
  );
  $info['vsite_path'] = array(
    'title' => t('Scholar Vsite Path Modifier'),
    'handler' => array(
      'class' => 'purl_vsite_path',
      'file' => 'purl_vsite_path.inc',
      'path' => drupal_get_path('module', 'vsite_domain') .'/includes',
      'parent' => 'path',
    ),
  );
  
  return $info;
}






/**
 * Implement Hook vsite_generic_settings
 * @return array
 */
function vsite_domain_vsite_generic_settings($space, $value = array()) {
  $a_settings = array();
  $s_vsite_domain = ((is_array($value) && array_key_exists('vsite_domain', $value)) ? $value['vsite_domain']:'');
  
  $a_settings['vsite_domain'] = array(
    'form' => purl_form('vsite_domain', $space->group->nid, $s_vsite_domain),
    'submit' => 'vsite_domain_vsite_generic_settings_domain_submit',
  );
  
  //Set the title since purl does not give you control over this
  $a_settings['vsite_domain']['form']['value']['#title'] = "Your Sites Custom Domain";
  $a_settings['vsite_domain']['form']['value']['#required'] = FALSE; //Not required
  $a_settings['vsite_domain']['form']['#element_validate'] = array('vsite_domain_vsite_generic_settings_domain_validate'); //Use our validate function
  $a_settings['vsite_domain']['form']['#access'] = user_access('change vsite domain');
  
  $a_settings['vsite_domain']['form']['vsite_domain_proccessing'] = array(
    '#type' => 'radios',
    '#title' => t('Domain Type'),
    '#default_value' => db_result(db_query("SELECT id FROM {purl} WHERE id = '%s' AND provider = '%s' ", $space->group->nid, 'vsite_domain'))?0:1,
    '#options' => array(t('Domain Owner'), t('Domain Group')),
    '#weight' => -20,
    '#description' => "Is your site the only one that uses this domain or is it one site of several that share the domain?",
  );
  
  return $a_settings;
}

/**
 * Validate function for handdling the vsite_domain generic setting
 * @param $space vsite
 * @param $value array
 */
function vsite_domain_vsite_generic_settings_domain_validate($form) {
  
  if (strlen($form['value']['#value'])) return purl_form_validate($form);
  
  return TRUE;
}

/**
 * Submit function for handdling the vsite_domain generic setting
 * @param $space vsite
 * @param $value array
 */
function vsite_domain_vsite_generic_settings_domain_submit($space, &$value) {
  
    if (is_array($value['vsite_domain'])) {
      
      $modifier = array(
        'provider' => $value['vsite_domain']['provider'],
        'id' => $value['vsite_domain']['id'],
        'value' => $value['vsite_domain']['value'],
      );
      
      if (strlen($modifier['value']) && $value['vsite_domain']['vsite_domain_proccessing'] == 0) {
        //Save the new purl
        if (purl_validate($modifier)) {
          $id = db_result(db_query("SELECT id FROM {purl} WHERE id = '%s' AND provider = '%s' ", $modifier['id'], $modifier['provider']));
          if (!empty($id)) {
            drupal_write_record('purl', $modifier, array('provider', 'id')); //UPDATE
          }
          else {
            drupal_write_record('purl', $modifier); //CREATE
          }
        }//Valid?
      }
      else {
        //Delete an old purl
        purl_delete($modifier);
      }
    }
    $value['vsite_domain'] = $value['vsite_domain']['value'];
}

/**
 * Maintain a array of purl's that have been processed, only one vsite_provider should adjust each path
 */
function vsite_domain_processed_purls($s_purl = FALSE) {
  static $processed;

  if (!isset($processed)) $processed = array();
  
  if (strlen($s_purl)) $processed[$s_purl] = $s_purl;
  
  return $processed;
}
