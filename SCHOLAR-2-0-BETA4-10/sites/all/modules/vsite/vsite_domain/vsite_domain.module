<?php 

/**
 * This Module creates a domain handler for scholar that overides the default purl domain handler
 * It also also has an admin form for creating domains for vsites
 */

// Change the default domain proccessor to our custom processor
define('PURL_VSITE_DOMAIN', 'vsite_domain');

// Change the default domain proccessor to our custom processor
define('PURL_VSITE_PATH', 'vsite_path');

/**
 * Implements hook_init
 */
function vsite_domain_init(){
	
}

/**
 * hook strongarm to set the purl proccessors for our "providers"
 */
function vsite_domain_strongarm(){
  $conf = array();
 
  //Spaces Default Redirection should be by PATH
  $conf['purl_method_spaces_og'] = PURL_VSITE_PATH;
  
  //We also are adding a method that is by domain
  $conf['purl_method_vsite_domain'] = PURL_VSITE_DOMAIN;
  
  //We want path and vsite_domain enabled and we want domain to be init first and have the first say at what site we are on
  $conf['purl_types'] = array(PURL_VSITE_DOMAIN, PURL_VSITE_PATH);
  
  return $conf;
}


/**
 * Implementation of hook_purl_provider().
 * This provides the domain provider for our vsite
 */
function vsite_domain_purl_provider() {
  $items = array();
  $items['vsite_domain'] = array(
    'name' => 'Vsite Domain Provider',
    'description' => t('Sets a spaces context for a domain match.'),
    'callback' => 'vsite_domain_apply_context',
    'callback arguments' => array('og'),
    'example' => 'my-space',
  );
  
  return $items;
}

/**
 * Context prefix provider callback.
 */
function vsite_domain_apply_context($type, $sid) {
  static $once;
  if (empty($once)) {
    spaces_init_context($type, $sid);
    $space = spaces_get_space();
    $space->purl_provider = 'vsite_domain';
    $once = TRUE;
  }
}

/**
 * Create the processor that will override the purl_domain
 */

if(!class_exists('purl_vsite_domain')){
  /**
   *  Full domain handling for scholar, will also remove purl prefix's from alias's
   */
  class purl_vsite_domain extends purl_domain implements purl_processor {
  
  	public $modifier_regex = '!^[a-z0-9_\.-]+$!';
  	
    public function method() {
      return PURL_VSITE_DOMAIN;
    }
  
    public function description() {
      return t('Enter a domain registered for this scholar site, such as "www.example.edu".  Do not include http://');
    }
  
    private function remove_scholar_purl($path){
      if(!($vsite = vsite_get_vsite()) || !strlen($vsite->purl)) return $path;
      $args = explode('/', $path);
  
      // Remove the value from the front of the query string
      if (current($args) === (string) $vsite->purl) {
        array_shift($args);
      }
      return implode('/', $args);
    }
    
    /**
     * Either force the url, or set it back to the base.
     */
    public function rewrite(&$path, &$options, $element) {
      $options['absolute'] = TRUE;
      if (!_purl_skip($element, $options)) {
        $path = $this->remove_scholar_purl($path);
        $options['base_url'] = "http://{$element->value}";
      }else {
        $options['base_url'] = variable_get('purl_base_domain', $base_url);
      }
    }
    
	  /**
	   * If a purl_path/domain has been set we should rewrite the current url
	   * so that aliased paths will be picked up
	   */
	  public function adjust(&$q, $item) {
	  	if(!($vsite = vsite_get_vsite()) || !strlen($vsite->purl)) return;
	  	
	    if ($_GET['q'] == trim($_REQUEST['q'], '/')) {
	    	purl_vsite_path::$a_disabled[$vsite->purl] = $vsite->purl;
	    	$args = explode('/', $_GET['q']);
  
	      // Add the value to the front of the query string
	      if (current($args) !== (string) $vsite->purl) array_unshift($args,$vsite->purl);
	      
	      $qstring = implode('/', $args); //String with purl added
	      $qstring_alias = _purl_get_normal_path($qstring); //Alias of that url
	      if($qstring != $qstring_alias){
	      	$_REQUEST['q'] = $_GET['q'] = $qstring_alias;
	      }else{
	      	//Sudo alias to prevent path rewrites
	      	$_REQUEST['q'] = $qstring_alias;
	      } 
	    }//It has not been aliased yet
	    
	  }
  }
}


/**
 * Create the processor that will override the purl_path enables path + domain
 */
if(!class_exists('purl_vsite_path')){
  
  /**
   *  Full path + domain handling for scholar
   */
  class purl_vsite_path extends purl_path implements purl_processor {
    
  	public static $a_disabled = array();
     
    public function method() {
      return PURL_VSITE_PATH;
    }
    
	  /**
	   * Make sure the domain is valid
	   */
	  public function parse($valid_values, $q) {
	    $a_parsed = parent::parse($valid_values, $q);
	    
	  	foreach ($a_parsed as $s_site => $a_settings) {
	  		if($a_settings->provider == 'spaces_og' && variable_get('purl_base_domain',false)){
	  			$vsite = spaces_load('og',$a_settings->id);
	  			if(in_array($a_settings->value,self::$a_disabled) ||
	  			   (strlen($vsite->settings['generic']['vsite_domain']) &&
	  			   str_replace('http://','',$_SERVER['HTTP_HOST']) != $vsite->settings['generic']['vsite_domain']) ||
	  			   (!strlen($vsite->settings['generic']['vsite_domain']) && 
	  			   str_replace('http://','',$_SERVER['HTTP_HOST']) != str_replace('http://','',variable_get('purl_base_domain','scholar.iq.harvard.edu')))
	  			   ){
	  			  unset($a_parsed[$s_site]);
	  			}
	  		}
	  	}//Do not return space's without the correct domain
	  	return $a_parsed;
	  }
  }
}

/**
 * Implement Hook vsite_generic_settings
 * @return array
 */
function vsite_domain_vsite_generic_settings($space, $value = array()){
  $a_settings = array();
  $s_vsite_domain = ((is_array($value) && array_key_exists('vsite_domain',$value)) ? $value['vsite_domain']:'');
  
  $a_settings['vsite_domain'] = array(
    'form' => purl_form('vsite_domain', $space->group->nid, $s_vsite_domain),
    'submit' => 'vsite_domain_vsite_generic_settings_domain_submit',
  );
  
  //Set the title since purl does not give you control over this
  $a_settings['vsite_domain']['form']['value']['#title'] = "Your Sites Custom Domain";
  $a_settings['vsite_domain']['form']['value']['#required'] = false; //Not required
  $a_settings['vsite_domain']['form']['#element_validate'] = array('vsite_domain_vsite_generic_settings_domain_validate'); //Use our validate function
  $a_settings['vsite_domain']['form']['#access'] = user_access('change vsite domain');
  
  $a_settings['vsite_domain']['form']['vsite_domain_proccessing'] = array(
	  '#type' => 'radios',
	  '#title' => t('Domain Type'),
	  '#default_value' => db_result(db_query("SELECT id FROM {purl} WHERE id = '%s' AND provider = '%s' ", $space->group->nid, 'vsite_domain'))?0:1,
	  '#options' => array(t('Domain Owner'), t('Domain Group')),
    '#weight' => -20,
    '#description' => "Is your site the only one that uses this domain or is it one site of several that share the domain?",
	);
  
  return $a_settings;
}

/**
 * Validate function for handdling the vsite_domain generic setting
 * @param $space vsite
 * @param $value array
 */
function vsite_domain_vsite_generic_settings_domain_validate($form){
  
	if(strlen($form['value']['#value'])) return purl_form_validate($form);
	
	return true;
}

/**
 * Submit function for handdling the vsite_domain generic setting
 * @param $space vsite
 * @param $value array
 */
function vsite_domain_vsite_generic_settings_domain_submit($space, &$value){
	
    if (is_array($value['vsite_domain'])) {
      
      $modifier = array(
        'provider' => $value['vsite_domain']['provider'],
        'id' => $value['vsite_domain']['id'],
        'value' => $value['vsite_domain']['value'],
      );
      
      if(strlen($modifier['value']) && $value['vsite_domain']['vsite_domain_proccessing'] == 0){
      	//Save the new purl
        if (purl_validate($modifier)) {
			    $id = db_result(db_query("SELECT id FROM {purl} WHERE id = '%s' AND provider = '%s' ", $modifier['id'], $modifier['provider']));
			    if (!empty($id)) {
			      drupal_write_record('purl', $modifier, array('provider', 'id')); //UPDATE
			    } else {
			      drupal_write_record('purl', $modifier); //CREATE
			    }
			  }//Valid?
      }else{
      	//Delete an old purl
        purl_delete($modifier);
      }
    }
    $value['vsite_domain'] = $value['vsite_domain']['value'];
}
