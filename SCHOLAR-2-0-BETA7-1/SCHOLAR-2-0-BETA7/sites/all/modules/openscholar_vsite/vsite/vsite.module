<?php

include_once('vsite.features.inc');

//The Vsite Object instanceof spaces
include_once('vsite.class.inc');


function vsite_menu(){
  $items = array();

  // nodeautocomplete callback for scholar
  $items['vsite/node/autocomplete'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'something',
    'page callback' => 'vsite_node_autocomplete',
    'file' => 'nodeautocomplete.inc',
    'access arguments' => array(
      'access content'
    ),
    'file path' => drupal_get_path('module', 'vsite') . '/includes'
  );
  
  $items['private_site'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Private Site',
    'page callback' => 'vsite_private_site_login',
    'access arguments' => array(
      'access content'
    ),
  );

  return $items;
}



/**
 * Implementation of hook_views_api().
 */
function vsite_views_api(){
  return array(
    'api' => 2
  );
}

/**
 * Implementation of hook_user().
 */
function vsite_user($op, &$edit, &$account, $category = NULL){
  switch ($op) {
    case 'login' :
      // site owners
      if ($vsites = vsite_get_vsite_by_owner($account->uid)) {
        if (count($vsites) == 1){
          //since there is only one element in the array the vsite object is $vsite_arr[0]
          $vsite = $vsites[0];
          //For login lets send them to their domain
          if($vsite->settings['generic']['vsite_domain']) $vsite->purl_provider = 'vsite_domain';
          // if is logging in for the first time or need to reset password
          if (($account->login == 0) || (arg(0) == 'user' && arg(1) == 'reset')) {
            purl_goto("cp/users", array(
            'purl' => array(
            'provider' => $vsite->purl_provider,
            'id' => $vsite->sid
            )
            ));
          }
          else{
            //returning single site owner
            $vsite->redirect('home');
          }
        }

        if (count($vsites) > 1){
          //asssumes user is owner of multiple vsites
          drupal_goto('user');
        }
      }

    // non site owners
      if(!$vsites){
        if (($account->login == 0) || (arg(0) == 'user' && arg(1) == 'reset')) {
          //direct user to account edit page to change password
          $route = 'user/' . $account->uid . '/edit';
        }
        else{
          $route = 'user';
        }
        return drupal_goto($route);
      }
      break;
  }
}

/**
 * Implementation of hook_strongarm()
 */
function vsite_strongarm(){
  $conf = array();

  // string overrides
  //replacing scholar or vsite terms with more common terms using stringoverrides module
  //include_once('vsite.overrides.inc');
  module_load_include('inc', 'vsite', 'includes/vsite.overrides');

  $conf['locale_custom_strings_en'] = vsite_string_overrides();

  $conf['og_content_type_usage_vsite'] = 'group';

  $conf['scholar_content_type'] = 'vsite';
  $conf['menu_primary_links_source'] = 'features';

  // scholar menus TODO change to vsite_*
  $conf['scholar_primary_menu'] = 'features';
  $conf['scholar_secondary_menu'] = 'scholar_secondary_menu';

  $conf['upload_list_default'] = "1";
  $conf['upload_extensions_default'] = "jpg jpeg gif png txt doc docx xls pdf ppt pps odt ods odp";
  $conf['upload_uploadsize_default'] = "5";
  $conf['upload_usersize_default'] = "100";
  //$conf['upload_max_resolution'] = 0;

  $node_types = node_get_types();
  foreach ( $node_types as $type ) {

    $conf['node_options_'. $type -> type] = array('status');

    // itweak
    $conf["itweak_upload_collapse_" . $type->type] = '0';
    $conf["itweak_upload_node_display_" . $type->type] = '3';
    $conf["itweak_upload_teaser_display_" . $type->type] = '3';
    $conf["itweak_upload_teaser_images_" . $type->type] = '8';
    $conf["itweak_upload_thumbnail_link_default_" . $type->type] = '_default';
    $conf["itweak_upload_thumbnail_link_node_" . $type->type] = 'lightbox2slideshow';
    $conf["itweak_upload_thumbnail_link_teaser_" . $type->type] = 'lightbox2slideshow';
    $conf["itweak_upload_thumbnail_link_upload_" . $type->type] = '_default';
    $conf["itweak_upload_thumbnail_preset_default_" . $type->type] = '_default';
    $conf["itweak_upload_thumbnail_preset_node_" . $type->type] = '_default';
    $conf["itweak_upload_thumbnail_preset_teaser_" . $type->type] = '_default';
    $conf["itweak_upload_thumbnail_preset_upload_" . $type->type] = '_default';
    $conf["itweak_upload_upload_preview_" . $type->type] = 1;

  }

  // path for vsite itself
  $conf["pathauto_node_vsite_pattern"] = "[space-og-path]/[title-raw]";


  // formats
  // Allowed HTML & default filter format settings
  $format = db_result(db_query("SELECT format FROM {filter_formats} WHERE name = '%s'", 'Filtered HTML'));
  if ($format) {
    $conf["allowed_html_{$format}"] = '<div> <span> <br> <a> <em> <strong> <cite> <code> <strike> <ul> <ol> <li> <dl> <dt> <dd> <img> <blockquote> <p> <h1> <h2> <h3> <h4> <h5> <h6> <table> <caption> <thead> <th> <td> <tr> <sup> <sub>';
    $conf['filter_default_format'] = $format;
  }
  
  //Use lightbox for the popups
  $conf['addthis_widget_version'] = 200;
  
  
  //Date Formats
  $conf['date_format_long'] = "l, F n, Y, g:ia";
  $conf['date_format_medium'] = "F j, Y";
  $conf['date_format_short'] = "n/j/Y";
  
  return $conf;
}


/**
 * Includes different inc files
 */
function vsite_include($inc_files){
  $inc_files = is_array($inc_files) ? $inc_files : array($inc_files);

  $path = dirname(__FILE__);

  foreach ($inc_files as $inc) {
    if (file_exists("$path/includes/$inc.inc")) {
      include_once "$path/includes/$inc.inc";
    }
  }
}

/**
 * hook link
 * Adds a node link which contains some other administrative
 * links. (see hook_vsite_admin_link)
 */
function vsite_link($type, $object, $teaser = FALSE){
  $links = array();
  $vsite = vsite_get_vsite();
  if ($vsite && $vsite->admin_access()) {
    $links['vsite-admin'] = array(
      'title' => theme('vsite_admin_links', vsite_get_admin_links('node', $object)),
      'html' => TRUE
    );
  }
  return $links;
}

/**
 * hook link_alter
 * Move the admin links (above) at the end of the node links
 */
function vsite_link_alter(&$links, $node){
	if(!isset($links['vsite-admin'])) return;

  $old['vsite-admin'] = $links['vsite-admin'];
  unset($links['vsite-admin']);
  $links = array_merge($links, $old);

}

/**
 * Implementation of hook_theme().
 */
function vsite_theme($cache, $type, $theme, $path) {
  $path = drupal_get_path('module', 'vsite');

  $items['vsite_admin_links'] = array(
    'arguments' => array('links' => array()),
    'template' => 'vsite-admin-links',
    'path' => $path . '/theme',
    'file' => 'theme.inc',
  );

  $items['vsite_logo'] = array(
    'arguments' => array('scholar' => NULL, 's_logo_field' => NULL, 'preset' => NULL, 'alt' => NULL, 'title' => NULL, 'attributes' => NULL),
    'path' => $path."/includes/",
    'file' => 'vsiteapi.inc',
  );

  return $items;
}


/**
 * Implementation of preprocess_views_view().
 */
function vsite_preprocess_views_view(&$vars) {
  if ($feature = context_get('scholar', 'feature')) {
    $contexts = context_enabled_contexts();
    $context = isset($contexts["scholar-feature-{$feature}"]) ? $contexts["scholar-feature-{$feature}"] : NULL;
    $view = $vars['view'];
    $space = spaces_get_space();

    if ($space && $context && strpos($view->current_display, 'page') !== FALSE && empty($view->result) && empty($vars['empty'])) {
      static $once;
      if (!$once) {
        $once = TRUE;

        $output = '';
        global $user;

        // Get the first nodetype
        if (!empty($context->node)) {
          reset($context->node);
          $nodetype = current($context->node);
        }


        $vars['empty'] = vsite_empty_view_message($nodetype,$space);
      }
    }
  }
}

/**
 * Return the empty message for a given node type and vsite
 *
 * @param $node_type string
 * @param $space vsite
 * @return string
 */
function vsite_empty_view_message($s_node_type, $space){
  global $user;

  if (!empty($s_node_type) && node_access('create', $s_node_type) && ($space->type == 'og') && $space -> menu_access('node')) {
    $types = node_get_types();
    if ($type = $types[$s_node_type]) {
      $output .= '<div class="empty-content"><p>' .t('Please add your first <span class="show-content-type">!type</span> to get started:', array('!type' => $type->name)) .'</p>';
      $output .=  theme('context_links', context_links()) ."</div>";
    }
  } else {
    $output .= t('There is currently no content to view in this section.');
  }

  return $output;
}

/** API functions **/


/**
 * API function for getting the active site or a vsite specified by ID
 *
 * @param $sid (optional) retrieve a non-active vsite
 */
function vsite_get_vsite($sid = false){
	static $inactive_vsites;
	if(!isset($inactive_vsites)) $inactive_vsites = array();
	
	if(!$sid || !intval($sid)){
    $space = spaces_get_space();
	}else{
		if(!array_key_exists($sid,$inactive_vsites)) $inactive_vsites[$sid] = spaces_load('og',$sid,FALSE);
		$space = $inactive_vsites[$sid];
	}
	
  $scholar_content_type = variable_get('scholar_content_type', 'vsite');
  if ($space && $space -> type == 'og' && $space -> group -> type == $scholar_content_type ){
    return $space;
  }else {
    return NULL;
  }
}



/**
 * API function for returning the vsite object(s) if the user is owns site(s). If user owns:
 * vsite - returns array of vsite object(s)
 * none - returns NULL
 * @param  $uid
 */
function vsite_get_vsite_by_owner($uid = NULL){
  if ($uid == NULL) return NULL;

  $scholar_content_type = variable_get('scholar_content_type', 'vsite');
  $sites = array();
  $sql = db_query("SELECT nid FROM {node} WHERE type = '%s' AND uid = %d", $scholar_content_type, (int)$uid);

  while($res = db_fetch_array($sql)){
    $sites[] = $res['nid'];
  }

  switch (count($sites)){
    case 0:
      return NULL;
      break;

      //assumes that user owns multiple sites
    default:
      if(!empty($sites)){
        foreach($sites as $site){
          $space =  spaces_load('og', $site);
          if ($space && $space -> type == 'og' && $space -> group -> type == $scholar_content_type ){
            $spaces[] = $space;
          }
        }
        return $spaces;
        break;
     }
  }
}

/**
 * API function for testing wether we are on the front page of a vsite
 * TODO there are different ways of doing this
 * - as a full context "context_vsite_home" which has blocks etc
 * - set context in hook init and then get it here
 */
function vsite_is_front(){
  $vsite = vsite_get_vsite();
  $active_menu = menu_get_item();
  return ($vsite && $active_menu['path'] == 'home') ? TRUE : FALSE;
}

/**
 * Implementation of hook_preprocess_node()
 */
function vsite_preprocess_node(&$vars){
  $node = $vars['node'];

  // we dont print "submitted" info unless the feature explicitely asks
  if (!variable_get('node_submitted_info_' . $node -> type, FALSE)){
    $vars['submitted'] = '';
  }
}
/**
 * hook preprocess page
 */
function vsite_preprocess_page(&$vars){
  // Each feature can provide its own specific css file
  // with this naming convention scholar_[feature name].css
  if ($feature = context_get('scholar', 'feature')) {
    drupal_add_css(drupal_get_path('module', 'scholar_' . $feature) . '/scholar_' . $feature . '.css');
    $vars['css'] = drupal_add_css();
    $vars['styles'] = drupal_get_css();
  }

  // need to know if there is anything in the navbar for css theming
  $body_class_extra = $vars['navbar'] ? ' navbar-on' : ' navbar-off';
  $vars['body_classes'] .= $body_class_extra;
  
  // alter $head_title for SEO purposes
  // set the basics here. Let specific installation (scholar / project)
  // do the rest (see scholar_preprocess_page)
  $vsite = vsite_get_vsite();
  if ($vsite) {
  	$vsite_title = $vsite->group->title;
    if (vsite_is_front()) {
      $head_title = array($vsite_title);
    }
    else {
      $head_title = array(strip_tags(drupal_get_title()), $vsite_title);
    }
    $head_title = implode(' | ', $head_title);
    $vars['head_title'] = $head_title;
  }
  
  //REPLACE THE Default Jquery UI CSS (if Needed)
  if(array_key_exists(JQUERY_UI_PATH .'/themes/base/ui.all.css',$vars['css']['all']['module'])){
  	//Override
  	drupal_add_css(drupal_get_path('module', 'vsite') . '/theme/jquery_ui/jquery.ui/themes/openscholar/ui.all.css');
  	$vars['css'] = drupal_add_css();
  	
  	//Remove invalid
  	unset($vars['css']['all']['module'][JQUERY_UI_PATH .'/themes/base/ui.all.css']);
  	
    $vars['styles'] = drupal_get_css($vars['css']);
  }
}

/**
 * hook theme_registry_alter
 */
function vsite_theme_registry_alter(&$theme_registry){
  /*
   * Each module can provide the node template for the node types
   * it "owns"
   */
  $original_path = array_shift($theme_registry['node']['theme paths']);
  $features = spaces_features('og');
  $new_paths = array();
  foreach ($features as $feature){
    $this_module_path = drupal_get_path('module', $feature -> name);
    $new_paths[] = $this_module_path;
  }
  array_unshift($new_paths, $original_path);
  $theme_registry['node']['theme paths'] = array_merge($new_paths,$theme_registry['node']['theme paths'] );
}


/**
 * Implementation of hook_form_alter()
 * @todo a lot going on here. refactor the code in smaller functions
 **/
function vsite_form_alter(&$form, $form_state, $form_id) {
  if ($form['#id'] == 'node-form') {
    // Hiding the  body splitting checkbox in the node forms
    if (!empty($form['body_field'])) {
      $form['body_field']['teaser_include'] = array('#type' => 'value', '#value' => 1);
    }
  }
  
  $scholar_content_type = variable_get('scholar_content_type', 'vsite');
  switch ($form_id) {
  	case $scholar_content_type.'_node_form':
  		//Customize the "Site Information" form
  		if(arg(0) != 'cp') break;
  		$form['buttons']['submit']['#value'] = t('Save settings');
  		$form['#prefix'] = '<div id = "cp-settings-'. $setting_id . '">';
      $form['#suffix'] = '</div>';
      $form['pre_fieldset'] = array('#value' => "<fieldset>", '#weight' => -1000);
      $form['post_fieldset'] = array('#value' => "</fieldset>", '#weight' => 1000);
      $form['field_vsite_logo']['#weight'] = 33;

      //No vertical tabs fieldsets
      vertical_tabs_save_config($form_id,array());
      
      if(array_key_exists('taxonomy',$form)){
      	if($n_affil_tag = variable_get('vsite_taxonomy_affiliation',false)){
      		unset($form['taxonomy'][$n_affil_tag]);
      	}//Remove the affiliation form till we get some defaults in here
      	$form['taxonomy']['#collapsible'] = false;
      }
      
      $form['#redirect'] = false;
      _spaces_og_make_hidden($form['purl']);
      _spaces_og_make_hidden($form['book']);
      _spaces_og_make_hidden($form['attachments']);
      _spaces_og_make_hidden($form['menu']);
      _spaces_og_make_hidden($form['comment_settings']);
      _spaces_og_make_hidden($form['buttons']['preview']);
      _spaces_og_make_hidden($form['buttons']['delete']);
  		_spaces_og_make_hidden($form['buttons']['preview_changes']);
  		_spaces_og_make_hidden($form['spaces_preset']);
  		_spaces_og_make_hidden($form['path']);
  		_spaces_og_make_hidden($form['revision_information']);
  		_spaces_og_make_hidden($form['author']);
  		_spaces_og_make_hidden($form['options']);
  		unset($form['spaces_preset']['#theme']); //Remove theme

  		if(array_search('_spaces_og_group_node_form_submit',$form['#submit'])){
  			unset($form['#submit'][array_search('_spaces_og_group_node_form_submit',$form['#submit'])]);
  		}//Don't need this submit form if they are not chaning purl or presets
  	break;
    default:
      if ($form['#id'] == 'node-form' && (arg(0) .'/'. arg(1) != 'admin/content')) {
        // GROUP ENABLED CONTENT TYPES
        if(array_key_exists('spaces_og',$form)){
          // Recurse into spaces_og hiding the site select form
          _spaces_og_make_hidden($form['spaces_og']);
        }

        if(array_key_exists('spaces',$form)){
          //Get rid of the incorect description
          _spaces_og_make_hidden($form['spaces']);
        }
      }

      if (isset($form['type']) && isset($form['#node'])
      && ($form_id == $form['type']['#value'] .'_node_form')
      && !is_content_profile($form['type']['#value'])) {
      	//Node Form (Not Content Profile Nodes)

        if(module_exists('override_node_options') && array_key_exists('revision_information',$form) && array_key_exists('options',$form)){
        	$form['options']['#access'] = true;

        	ctools_include('dependent');
          if(array_key_exists('log',$form['revision_information'])){
          	$form['options']['log'] = $form['revision_information']['log'];
          	$form['options']['log']['#weight'] = 5;
          	$form['options']['log']['#process'] = array('ctools_dependent_process');
          	$form['options']['log']['#dependency'] = array('edit-revision-1' => array(1));
          	if(!is_array($form['#validate'])) $form['#validate'] = array();
          	if(!in_array('cp_validate_node_flags',$form['#validate'])) $form['#validate'][] = 'vsite_validate_node_flags';
          }//Add the description box for new revision

          if(array_key_exists('revision',$form['revision_information'])){
            $form['options']['revision'] = $form['revision_information']['revision'];
            $form['options']['revision']['#weight'] = 4;
            $form['options']['revision']['#default_value'] = false;
            $form['options']['revision']['#description'] = "Create a new revision and your existing version will be saved in case you need it for reference or you need to revert to it.";
            $form['options']['revision']['#access'] = user_access('view revisions');
            if(!is_array($form['#validate'])) $form['#validate'] = array();
          }//Add the "new revision" checkbox

          $form['options']['sticky']['#description'] = "Sticky posts stay at the top of lists with non-sticky items ordered below them";


        	_spaces_og_make_hidden($form['revision_information']);
        }//Move the revision information under the options tab

        $nid = !empty($form['nid']['#value']) ? $form['nid']['#value'] : NULL;
        if(module_exists('override_node_options') && array_key_exists('options',$form)){
        	drupal_add_js(drupal_get_path('module', 'vsite') . '/theme/vsite_verticaltabs_options.js','module','footer',false,true,false);
        	$vsite = vsite_get_vsite();
        	if(array_key_exists('promote',$form['options'])){
        		_spaces_og_make_hidden($form['options']['promote']);
        	}

          if($vsite->settings['front']['frontpage'] == 'flag'){
            $form['options']['vsite_promote_to_front'] = array('#type' => 'checkbox',
                '#title' => "Promote to front page",
                "#default_value" => false,
                "#description" => t("If checked this post will be shown in your front page"));
            if($nid){
            	$flag = flag_get_flag('scholar_frontpage');
              $form['options']['vsite_promote_to_front']['#default_value'] = $flag->is_flagged($nid);
            }
          }

          $form['options']['vsite_make_featured'] = array('#type' => 'checkbox', '#title' => "Make this Featured", "#default_value" => false, "#description" => "Make this a featured item. Featured items can be configured to show on the front page within the front page settings.");
          if($nid){
            $flag = flag_get_flag('featuredposts');
            $form['options']['vsite_make_featured']['#default_value'] = $flag->is_flagged($nid);
          }
        }//Overide the default promote functionality in favor of ours

      }
      break;
  }
}

/**
 * Validate our custom arranged flags
 * @param $form array
 * @param $form_state array
 */
function vsite_validate_node_flags($form, &$form_state){
	//Reassign back to revision info for submission
	if(isset($form_state['values']['options']['log'])) $form_state['values']['log'] = $form_state['values']['options']['log'];
}

/**
 * Submit our custom arranged flags
 * @param $form_id string
 * @param $form_values array
 */
function vsite_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
  	case 'presave':
  		//Take Care of the Issues present when pathauto and purl coexist
  		$vsite = vsite_get_vsite();
      if(module_exists('path') && module_exists('pathauto') && $vsite){

        _pathauto_include();
        // Get the specific pattern or the default
        if (variable_get('language_content_type_'. $node->type, 0)) {
          $pattern = trim(variable_get('pathauto_node_'. $node->type .'_'. $node->language .'_pattern', FALSE));
        }
        if (empty($pattern)) {
          $pattern = trim(variable_get('pathauto_node_'. $node->type .'_pattern', FALSE));
          if (empty($pattern)) {
            $pattern = trim(variable_get('pathauto_node_pattern', FALSE));
          }
        }
        // Only do work if there's a pattern
        if ($pattern) {
          // Only check an alias if the checkbox was not provided or if the checkbox was provided and is checked
          if (!isset($node->pathauto_perform_alias) || $node->pathauto_perform_alias) {
            $placeholders = pathauto_get_placeholders('node', $node);
            $src = "node/$node->nid";
            $alias = pathauto_create_alias('node', 'return', $placeholders, $src, $node->nid, $node->type, $node->language);

            $s_proccessor = defined('PURL_VSITE_PATH')?PURL_VSITE_PATH:PURL_PATH;
            $processor = purl_get_processor($s_proccessor);
            $parsed = purl_parse($processor, $alias);
            foreach ($parsed as $element){
            	$alias = $processor->remove($alias,$element);
            }

            if (_pathauto_path_is_callback($alias)) {
              //Cancel the pathauto for this node
              $node->pathauto_perform_alias = false;
              return;
            }
          }
        }
      }//END fix pathauto / purl conflicts
      
      //Have this node avalible to the public and we will hide private using the vsite->menu_access function
		  $map = spaces_features_map('node');
		  $feature_name = $map[$node->type];
		  if ($vsite && $vsite->feature_access($feature_name)) {
		    $node->og_public = OG_VISIBLE_BOTH;
		  }//Does this person have the ability to create public nodes on this vsite?
      break;
  	break;
    case 'update':
    case 'insert':
      // Response to the flag checkboxes added to the form in vsite_form_alter().
      if (isset($node->vsite_promote_to_front)) {
        $s_action = ($node->vsite_promote_to_front == 1)?'flag':'unflag';
		    $flag = flag_get_flag('scholar_frontpage');
		    $flag->flag($s_action,$node->nid);
      }

      if (isset($node->vsite_make_featured)) {
        $s_action = ($node->vsite_make_featured == 1)?'flag':'unflag';
        $flag = flag_get_flag('featuredposts');
        $flag->flag($s_action,$node->nid);
      }

      break;
      case 'view':
      	//////////
      	//INTEGRATE FILE ALIAS and UPLOAD and ITWEAK unfortunatly there is no more elegant way to do this
      	//////////
	      if (module_exists('itweak_upload') && module_exists('file_aliases') && isset($node->itweak_upload)){
	      	$tmp_node = clone $node;
	      	$tmp_node->files = $tmp_node->itweak_upload;
		      if(($ffp = filefield_paths_get_fields($tmp_node, $op)) != FALSE) {
		        $count = array();
			      foreach ($ffp['#files'] as &$file) {
			        if ($ffp['#settings'][$file['name']]['filealias']['display'] == TRUE) {
			          $filefield_paths_alias = 'filefield_paths/alias/' . $file['field']['fid'];
			          if (($alias = drupal_get_path_alias($filefield_paths_alias)) != $filefield_paths_alias) {
			          	//If alias exists replace it
			          	$node->content['itweak_upload']['#value'] = str_replace($file['field']['filepath'], $alias, $node->content['itweak_upload']['#value']);
			          }
			        }
			      }
		      }
	      }
      break;
  }
}

/**
 * Implements hook spaces_types_alter
 *
 * @see http://drupal.org/node/511914
 */
function vsite_spaces_types_alter(&$items){

	//Change the class for the og object to "vsite"
  $items['og']['class'] = 'vsite';
}

/**
 * Returns the group node given the id in a url
 * @param $n_vsite_id integer (VSITE ID)
 * @return object node
 */
function vsite_group_load($n_vsite_id = false){
	if($n_vsite_id === false) $n_vsite_id = vsite_group_to_arg();

	//Same as Site ID
	$o_group_node = node_load($n_vsite_id);
	$vsite = vsite_get_vsite();

	if($o_group_node->type == variable_get('scholar_content_type', 'vsite') &&  //Make sure that they have update permissions or they are accessing the node withing the context of thier own site
	  ($o_group_node->nid == $vsite->group->nid || node_access('update',$o_group_node))){  //Does not replace the functonality of 'access callback' but provides a stopgap
		 return $o_group_node;
	}

	return false;
}

/**
 * Default the param to the current site, used when making a link
 *
 * @return number sid
 */
function vsite_group_to_arg(){
  $vsite = vsite_get_vsite();
  return $vsite->group->nid;
}

/**
 * Implements hook cp_settings
 *
 */
function vsite_cp_settings(){

	return array(
	  array(
	    'path' => 'site_info/%vsite_group',
		  'title' => 'Site Information',
	    'page callback' => 'node_page_edit',
	    'file' => 'node.pages.inc',
	    'file path' => drupal_get_path('module', 'node'),
	    'page arguments' => array(3),
	    'weight' => 0,
	    'type' =>  MENU_LOCAL_TASK,
	  ),
	);
}

/**
 * Implementation of hook_context_active_contexts_alter().
 */
function vsite_context_active_contexts_alter($contexts) {
  $feature = context_get('scholar', 'feature');
  if($contexts['vsite-section-public']){
    drupal_add_css(drupal_get_path('module', 'vsite') . '/theme/vsite-admin-links.css');
    drupal_add_js(drupal_get_path('module', 'vsite') . '/theme/vsite.js');
  }
}

/**
 * Retrieve the admin links for a given object.
 */
function vsite_get_admin_links($type, $object) {
  $links = array();
  //if (admin_is_enabled('admin inline')) {
    $links = module_invoke_all('vsite_admin_link', $type, $object);
    drupal_alter('vsite_admin_link', $links, $type, $object);
  //}
  return $links;
}

/**
 * Implementation of hook_scholar_admin_link() on behalf of the node module.
 */
function node_vsite_admin_link($type, $object) {
  $links = array();
  if ($type == 'node') {
//  	global $user;
//  	//If this user is a scholar admin for this site treat the access permissions as if they owned the content
//  	$object->uid = $user->uid;

    if (node_access('update', $object)) {
      $links['node-edit'] = array(
        'title' => t('Edit'),
        'href' => "node/{$object->nid}/edit",
        'attributes' => array('class' => 'icon-edit'),
        'query' => array('destination' => $_GET['q']),
      );
    }
    if (node_access('delete', $object)) {
      $links['node-delete'] = array(
        'title' => t('Delete'),
        'href' => "node/{$object->nid}/delete",
        'attributes' => array('class' => 'icon-delete'),
        'query' => array('destination' => $_GET['q']),
      );
    }
  }
  return $links;
}

/**
 * Implemetation of hook_system_info_alter
 *
 * Used to set the default vsite_layout regions on scholar themes
 *
 * @param $info
 * @param $file
 */
function vsite_system_info_alter(&$info, $file){
  if($file->type == 'module') return;
  
  //If this is a scholar theme then add the correct regions
  if(array_key_exists('scholar',$info) && array_key_exists('theme_type',$info['scholar']) && $info['scholar']['theme_type'] == 'scholar'){
    if(!is_array($info['regions'])) $info['regions'] = array();
    
    $info['regions']['header_top'] = "header top";
    $info['regions']['header_left'] = "header left";
    $info['regions']['header_main'] = "header main";
    $info['regions']['header_right'] = "header right";
    $info['regions']['navbar'] = "navigation bar";
    $info['regions']['left'] = "left sidebar";
    $info['regions']['right'] = "right sidebar";
    $info['regions']['content_top'] = "content top";
    $info['regions']['content_bottom'] = "content bottom";
    $info['regions']['footer'] = "footer";
    $info['regions']['closure_region'] = "closure";

  }
}

/**
 * Render the private site login page
 */
function vsite_private_site_login(){
	if(!user_is_logged_in()){
	  $s_html = drupal_get_form('user_login');
	}
	
  return "This site is private, you must be logged in and be a site member to view.". $s_html;
}

/**
 * Implement Hook vsite_generic_settings
 * @return array
 */
function vsite_vsite_generic_settings($space, $value = array()){
  $a_settings = array();
  
  //Disable the shield
  $a_settings['private_vsite'] = array(
    'form' => array(
      '#prefix' => "<br />",
      '#type' => 'checkbox',
      '#title' => t('Make your site Private'),
      '#default_value' => is_array($value) && array_key_exists('private_vsite',$value) ? $value['private_vsite']:0,
      '#description' => "If private your vsite will only be avalible when you are logged in, regular users will see a message and be giving the choice to login.",
    )
  );
  
  return $a_settings;
}

/**
 * Implementation of hook_token_values().
 **/
function vsite_token_values($type, $object = NULL, $options = array()) {
	$vsite = vsite_get_vsite();
  if ($vsite || ($type == 'node' && (property_exists($object, 'og_groups') || property_exists($object, 'spaces_og')))){

  	if(!$vsite){
	  	$node = $object;
	    if (property_exists($node, 'spaces_og')) {
	      $gid = $node->spaces_og['gid'];
	    }elseif (property_exists($object, 'og_groups')) {
	      $gid = current($node->og_groups);
	    }
	    
	    $vsite = vsite_get_vsite($gid);
  	}
  	
  	if($vsite){
	    $tokens['vsite-prefix-path'] = check_plain($vsite->purl);
	    $tokens['vsite-prefix-path-raw'] = $vsite->purl;
	  	
	    return $tokens;
  	}
  }
  
  return array(
    'vsite-prefix-path' => '',
    'vsite-prefix-path-raw' => '',
  );
}

/**
 * Implementation of hook_token_list().
 **/
function vsite_token_list($type = 'all') {
  
	//Works for any type (must be in vsite context)
	if($type == 'all') $type = 'node';
  $tokens[$type]['vsite-prefix-path'] = t("The filtered value of the vsite prefix path");
  $tokens[$type]['vsite-prefix-path-raw'] = t("The raw value of the vsite prefix path");
  
  return $tokens;
}
