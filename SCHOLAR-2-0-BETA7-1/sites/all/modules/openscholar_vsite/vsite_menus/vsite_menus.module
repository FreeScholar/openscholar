<?php


/**
 *  hook_strongarm().
 */
function vsite_menus_strongarm() {

  //Pathauto override to allow underscores and hyphens in urls
  // 2 = allow
  // 0 = replace with nothing
  // 1 = replace with variable 'pathauto_separator'
  $conf['pathauto_punctuation_hyphen'] = 2;
  $conf['pathauto_punctuation_underscore'] = 2;
 
  return $conf;
}

function vsite_menus_init(){
   drupal_add_css(drupal_get_path('module', 'vsite_menus') .'/theme/vsite_menus.css');
}

/**
 * Implementation of hook_spaces_settings().
 */
function vsite_menus_spaces_settings(){
  return array(
    'menus' => array(
      'class' => 'vsite_menus_menus',
      'file' => drupal_get_path('module', 'vsite_menus') . '/includes/vsite_menus.menus.inc'
    )
  );
}

/**
 * Implementation of hook_spaces_customizers().
 */
function vsite_menus_spaces_customizers_alter(&$customizers) {
	if(array_key_exists('menu',$customizers)){
		$customizers['menu']['class'] = 'vsite_menus_customizer_menu';
		$customizers['menu']['file'] = drupal_get_path('module', 'vsite_menus') .'/includes/vsite_menus.customizer.inc';
	}
	
	return $customizers;
}


/**
 * Implements hook_menu_node_insert().
 */
function vsite_menus_menu_node_insert($item, $node) {
  require_once(drupal_get_path('module', 'vsite_menus') .'/includes/vsite_menus.menus.inc');
  vsite_include('vsiteapi');
  $site = vsite_get_vsite();
  
  if(!is_array($site->settings['menus']) || !is_array($site->settings['menus']['menu_items'])){
  	return;
  }//If there are no spaces settings saved for menu then we don't have anything to do
  
  $a_scholar_types = vsite_content_types();
  
  if($site && array_key_exists($node->type,$a_scholar_types) && ($item->menu_name == variable_get('scholar_primary_menu',false) || $item->menu_name == variable_get('scholar_secondary_menu',false))){
    
    $s_menu_key = $item->menu_name == variable_get('scholar_primary_menu',false)?'primary':'secondary';
    
    $site->settings['menus']['menu_items'][$item->mlid] = array('menu' => $s_menu_key, 'weight' => $item->weight);
    
    $site->settings['menus'] = vsite_menus_menus::create_menus($site->settings['menus']);
    
    spaces_save($site);
  }elseif ($site && array_key_exists($item->mlid,$site->settings['menus']['menu_items'])){
    unset($site->settings['menus']['menu_items'][$item->mlid]);
    $site->settings['menus'] = vsite_menus_menus::create_menus($site->settings['menus']);
    spaces_save($site);
  }//Add or remove t from the spaces menu
}

/**
 * Implements hook_menu_node_update().
 */
function vsite_menus_menu_node_update($item, $node) {
  vsite_menus_menu_node_insert($item,$node);
}

/**
 * Implements hook_menu_node_delete().
 */
function vsite_menus_menu_node_delete($item, $node) {
  require_once(drupal_get_path('module', 'vsite_menus') .'/includes/vsite_menus.menus.inc');
  vsite_include('vsiteapi');
  $site = vsite_get_vsite();
  $a_scholar_types = vsite_content_types();
  
  if ($site && is_array($a_scholar_types) && array_key_exists($node->type,$a_scholar_types) && array_key_exists($item->mlid,$site->settings['menus']['menu_items'])){
    unset($site->settings['menus']['menu_items'][$item->mlid]);
    $site->settings['menus'] = vsite_menus_menus::create_menus($site->settings['menus']);
    spaces_save($site);
  }
}

/**
 * Return the menu tree object for a scholar site, adapted for the current page
 *
 * @param string $s_menu  (primary / secondary)
 * @param boolean $b_html (return formated html?)
 * @param boolean $b_check_expanded (allow expanded menus? slightly slower)
 */
function vsite_menus_get_menu_tree($s_menu = 'primary', $b_html = true, $b_check_expanded = false, $b_filter_private_features = false){
  $space = vsite_get_vsite();
  $b_make_feature_active = true; //Should the feature tab be active, it should unless there is a link that overides this
  
  if(!$space) return ($b_html)?"":false;
  
  switch ($s_menu){
    case 'secondary':
      $a_settings_menu = array_key_exists('menus',$space->settings)?$space->settings['menus']['secondary']:false;
      $s_def_menu = 'scholar_secondary_menu';
    break;
    case 'primary':
    default:
      $a_settings_menu = array_key_exists('menus',$space->settings)?$space->settings['menus']['primary']:false;
      $s_def_menu = 'scholar_primary_menu';
  }
  
  if(!$a_settings_menu){
    $a_tree = menu_tree_page_data(variable_get($s_def_menu,false));
    foreach ($a_tree as $k => $tree) {
      if($tree['below']) $a_tree[$k]['below'] = false;
    }
    
    $a_settings_menu = $a_tree;
    
  }else{
  
	  $n_found = 0;
	  if($b_check_expanded){
	    $a_full_page_expanded = array_merge( menu_tree_page_data(variable_get('scholar_primary_menu',false)),
	                                         menu_tree_page_data(variable_get('scholar_secondary_menu',false)));
	    //We must unfortunatly loop through the page data once to get the
	    //correct expanded trees, the menu module does not provide an easy
	    //way of retrieving a individual menu_node's tree (expanded)
	    foreach ($a_full_page_expanded as $a_tree) {
	      if(!in_array($a_tree['link']['mlid'],$a_settings_menu)) continue;
	      $n_found++;
	      $a_settings_menu[array_search($a_tree['link']['mlid'],$a_settings_menu)] = $a_tree;
	      if($n_found >= count($a_settings_menu)) break;
	      break;
	    }
	  }
	  
	  if($n_found < count($a_settings_menu)){
	    foreach ($a_settings_menu as $n_key => $n_mlid) {
	      if(!is_int($n_mlid) || !($o_link = menu_link_load($n_mlid))){
	      	unset($a_settings_menu[$n_key]);
	      	continue;
	      }
	      $a_settings_menu[$n_key] = array('link' => $o_link, 'below' => false);
	    }
	  }
  }//send default?
  
  // get all menus coming from features and construct an array
  // of links to disable based on the users access on this feature
  $features_menus = spaces_features_map('menu');
  $a_disabled_links = array();
  $a_custom_title = array();

  foreach($features_menus as $menu_title => $feature_name ){
   	if ($b_filter_private_features && !($space -> feature_access($feature_name))){
    	$a_disabled_links[] = $menu_title;
    }
    if(is_array($space->customizer['menu']) && array_key_exists($menu_title,$space->customizer['menu'])){
    	$a_custom_title[$menu_title] = $space->customizer['menu'][$menu_title];
    }
  }
      
  foreach ($a_settings_menu as $key => $link) {
  	
  	if(in_array($link['link']['link_path'],$a_disabled_links)){
  		unset($a_settings_menu[$key]);
  		continue;
  	}//remove disabled feature links
  	
	  $b_check_is_custom_active = false;
	  
	  if(in_array($link['link']['link_path'],array_keys($a_custom_title))){
	  	$a_settings_menu[$key]['link']['title'] = $a_settings_menu[$key]['link']['link_title'] = $a_custom_title[$link['link']['link_path']];
	  }//Apply Custom Title
	    
	  if($link['link']['options'] && is_array($link['link']['options']) && is_array($link['link']['options']['attributes']) && array_key_exists('site',$link['link']['options']['attributes'])){
	 		//Has the site been set?
	  	if($space->group->nid == $link['link']['options']['attributes']['site']){
	 		  $b_check_is_custom_active = true;
	 		}else{
	  		unset($a_settings_menu[$key]);
	 		}
	 	}elseif($link['link']['router_path'] == 'node/%'){
	  	//Catch any offsite links
		  $args = explode("/",$link['link']['link_path']);
	    $node = node_load($args[1]);
	    if ($node && !empty($node->og_groups) && !in_array($space->group->nid, $node->og_groups)) {
	      // If the node does not belongs to the current active group space then remove it
	      unset($a_settings_menu[$key]);
	    }else{
	    	$b_check_is_custom_active = true;
	    }
	  }//Custom Link?
	  	
	  if($b_check_is_custom_active && $link['link']['link_path'] == $_GET['q']){
      $link['link']['in_active_trail'] = true;
      $b_make_feature_active = false;
    }//Make custom links active
  }
  
  foreach ($a_settings_menu as $key => $link) {
    if($link['link']['access_callback']){
      $arguments = unserialize($link['link']['access_arguments']);
      if( $link['link']['access_callback'] == 'spaces_menu_access') $arguments[1] = menu_get_object($type = 'node', $position = 1, $path = $link['link']['link_path']);
      
      if ($link['link']['access_callback'] == 'user_access'){
      	$valid = (count($arguments) == 1) ? user_access($arguments[0]) : user_access($arguments[0], $arguments[1]);
      }else{
      	$valid = call_user_func_array($link['link']['access_callback'], $arguments);
      }
      
      if(!$valid) unset($a_settings_menu[$key]);
    }
  }
  
  if ($b_make_feature_active && module_exists('context')) {
    $a_new_links = array();
    foreach ($a_settings_menu as $key => $link) {
      $a_new = current(context_menu_set_active(array($link['link'])));
      if(is_array($a_new['attributes']) && $a_new['attributes']['class'] == 'active'){
        $a_settings_menu[$key]['link']['in_active_trail'] = true;
      }
    }
  }//Should the feature tab be made active
  
  if(!$b_html) return $a_settings_menu;
  
  return menu_tree_output($a_settings_menu);
}

/**
 * Implementation of hook_theme().
 */
function vsite_menus_theme($cache, $type, $theme, $path) {
  $path = drupal_get_path('module', 'vsite_menus') ;
  
  $items['vsite_menus_radios'] = array(
    'arguments' => array('element' => NULL,'disabled' => array()),
    'path' => $path,
    'file' => 'menu_theme.inc',
  );
  
  return $items;
}

/**
 * Change the options for the node save form so that only the active vsite menus are displayed
 *
 * @param $form array
 * @param $form_state array
 * @param $form_id string
 */
function vsite_menus_form_alter(&$form, $form_state, $form_id){
	if (isset($form['#node']) && $form['#node']->type .'_node_form' == $form_id) {
		require_once(drupal_get_path('module', 'vsite_menus') .'/includes/vsite_menus.menus.inc');
		vsite_include('vsiteapi');
	  $a_scholar_types = vsite_content_types(array(0,1,2));
	  $o_scholar = vsite_get_vsite();
	  
	  if($o_scholar && is_array($form['menu'])){
	  	//Add the site to the attributes for the menu
	  	if(!is_array($form['menu']['options']['#value'])) $form['menu']['options']['#value'] = array();
	  	
	  	if(!array_key_exists('attributes',$form['menu']['options']['#value'])) $form['menu']['options']['#value']['attributes'] = array();
	  	
	  	$form['menu']['options']['#value']['attributes']['site'] = $o_scholar->group->nid;
	  }
	  
	  if($o_scholar && array_key_exists($form['type']['#value'],$a_scholar_types)){
	    $a_primary = menu_load(variable_get('scholar_primary_menu',false));
	    $a_secondary = menu_load(variable_get('scholar_secondary_menu',false));
	    
	    $disabled_choices = vsite_menus_menus::get_disabled_menus();  //Get disabled menus
	    $a_choices = array();
	    if(!in_array('primary',$disabled_choices)) $a_choices[variable_get('scholar_primary_menu',false).":0"] = t($a_primary['title']);
	    if(!in_array('secondary',$disabled_choices)) $a_choices[variable_get('scholar_secondary_menu',false).":0"] = t($a_secondary['title']);
	    
	    $form['menu']['#access'] = ($o_scholar->admin_access() || user_access('administer menu'));
	    $form['menu']['parent']['#options'] = $a_choices;
	    $form['menu']['parent']['#description'] = "Select the menu where you would like this entry to show";
	    unset($form['menu']['hidden']);
	    $form['menu']['weight']['#type'] = 'value'; //Make the weight hidden
	    
	    if (module_exists('path')) {
		    $form['path']['#access'] = ($o_scholar->admin_access() || user_access('administer menu'));
		    
		    if (module_exists('pathauto')) {
			    //BELOW HERE -- Create PathAuto Form Modifications
				  $node = $form['#node'];
			
			    // See if there is a pathauto pattern or default applicable
			    if (isset($form['language'])) {
			      $language = isset($form['language']['#value']) ? $form['language']['#value'] : $form['language']['#default_value'];
			      $pattern = trim(variable_get('pathauto_node_'. $form['type']['#value'] .'_'. $language .'_pattern', ''));
			    }
			    if (empty($pattern)) {
			      $pattern = trim(variable_get('pathauto_node_'. $form['type']['#value'] .'_pattern', ''));
			      if (empty($pattern)) {
			        $pattern = trim(variable_get('pathauto_node_pattern', ''));
			      }
			    }
			    // If there is a pattern AND the user is allowed to create aliases AND the path textbox is present on this form
			    if(!empty($pattern) &&isset($form['path']['path']) && ($o_scholar->admin_access() || user_access('administer menu'))){
			    
			      $output = t('An alias will be generated for you. If you wish to create your own, untick this option.');
			
			      drupal_add_js(drupal_get_path('module', 'pathauto') .'/pathauto.js');
			      $form['path']['#collapsed'] = FALSE;
			
			      $form['path']['pathauto_perform_alias'] = array(
			        '#type' => 'checkbox',
			        '#title' => t('Automatic alias'),
			        '#default_value' => isset($node->pathauto_perform_alias) ? $node->pathauto_perform_alias : TRUE,
			        '#description' => $output,
			        '#weight' => -1,
			      );
			
			      if (!empty($node->pathauto_perform_alias) && !empty($node->old_alias) && $node->path == '') {
			        $form['path']['path']['#default_value'] = $node->old_alias;
			        $node->path = $node->old_alias;
			      }
			
			      //For Pathauto to remember the old alias and prevent the Path-module from deleteing it when Pathauto wants to preserve it
			      if (isset($node->path)) {
			        $form['path']['old_alias'] = array('#type' => 'value', '#value' => $node->path);
			      }
			      
			      if($o_scholar && strpos($form['path']['path']['#default_value'],$o_scholar->purl.'/') === 0){
			      	$form['path']['path']['#default_value'] = substr($form['path']['path']['#default_value'],strlen($o_scholar->purl.'/'));
			      }
			    }
	      }
	    }
	  }//If this is a active scholar type?
	}
}


/**
 * Implementation of hook_nodeapi().
 */
function vsite_menus_nodeapi(&$node, $op, $teaser, $page) {
  if (module_exists('path')) {
    switch ($op) {
      case 'presave':
        if (module_exists('path') && module_exists('pathauto')){
	      	// About to be saved (before insert/update)
	        // Only add to an alias if the checkbox was not provided or if the checkbox was provided and is unchecked
	        if (!isset($node->pathauto_perform_alias) || !$node->pathauto_perform_alias) {
	          $vsite = vsite_get_vsite();
	        	if(strlen($node->path) && strpos($node->path,$vsite->purl."/") !== 0 && $node->nid != $vsite->group->nid){
	          	$node->path = $vsite->purl ."/". $node->path;
	          }//Did they provide a path?  is the site name already prepended?
	        }
        }//Is Pathauto Enabled?
         
        break;
      default:
        break;
    }
  }
}

/**
 * Iplementation of hook block
 *
 * @param string $op
 * @param int $delta
 * @param array $edit
 */
function vsite_menus_block($op = 'list', $delta = 0, $edit = array()) {
  if(!user_access('access content')) return;
  
  $blocks = array();
  if ($op == 'list') {
    $blocks[] = array('info' => t('Scholar primary menu'),
                      'cache' => BLOCK_CACHE_PER_PAGE);
    $blocks[] = array('info' => t('Scholar secondary menu'),
                      'cache' => BLOCK_CACHE_PER_PAGE);
    return $blocks;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 0:
        $block['subject'] = t(''); // intentionally left empty for now.
        $block['content'] =vsite_menus_get_menu_tree('primary',true,false,true);
        return $block ;
      case 1:
        $block['subject'] = t(''); // intentionally left empty for now.
        $block['content'] = vsite_menus_get_menu_tree('secondary',true,false,true);
        return $block;
    }
  }
}

/**
 * Implementation of hook_vsite_widgets
 * @return array
 */
function vsite_menus_vsite_widgets(){
  
  return array(
    'vsite_menus_0' => array(
      'module' => 'vsite_menus',
      'delta' => '0',
      'weight' => 20,
      'region' => 'navbar',
      'status' => '0',
      'label' => 'Scholar primary menu',
      'type' => 'context_ui',
    ),
    'vsite_menus_1' => array(
      'module' => 'vsite_menus',
      'delta' => '1',
      'weight' => 20,
      'region' => 'left',
      'status' => '0',
      'label' => 'Scholar secondary menu',
      'type' => 'context_ui',
    ),
  );
}

/**
 * Deletes a custom menu link created in the context of a vsite
 *
 *  @param $n_mlid (number) existing link id
 *  @param $sid (number)  optional - pass the site id allows for altering /adding menu links programatically to a site
 *
 * @return (number) the mlid of the created menu item or false on failure
 */
function vsite_menu_delete_vsite_menu_link($n_mlid, $sid = NULL){
  $vsite = vsite_get_vsite();
  if(!$sid) {
    $sid = $vsite->group->nid;
  }elseif ($vsite->group->nid != $sid){
    $vsite = spaces_load('og', $sid, TRUE);
  }
  
  menu_link_delete($n_mlid);
  
  if(array_key_exists('menus',$vsite->settings)){
  	if(($n_p_index = array_search($n_mlid,$vsite->settings['menus']['primary']))) unset($vsite->settings['menus']['primary'][$n_p_index]);
  	if(($n_s_index = array_search($n_mlid,$vsite->settings['menus']['secondary']))) unset($vsite->settings['menus']['secondary'][$n_s_index]);
  }
  
  if($n_s_index || $n_p_index) spaces_save($vsite);
  
  return $n_mlid;
}

/**
 * Creates a custom menu link created in the context of a vsite
 *
 * @param $s_path (string) link path
 * @param $s_title (string) link title
 * @param $b_primary_menu (boolean) true for promary menu, false for secondary
 * @param $n_weight (number) menu weight
 * @param $n_plid (number) for menu trees, if you want this menu item to be the child of an existing item (use with caution)
 * @param $sid (number)  optional - pass the site id allows for altering /adding menu links programatically to a site
 *
 * @return (number) the mlid of the created menu item or false on failure
 */
function vsite_menu_create_vsite_menu_link($s_path, $s_title, $b_primary_menu = true, $n_weight = 0, $n_plid = 0, $sid = NULL){
	//Create the menu item
	return vsite_menu_update_vsite_menu_link(false, $s_path, $s_title, $b_primary_menu, $n_weight, $n_plid, $sid);
}


/**
 * Updates an custom menu link created in the context of a vsite
 *
 * @param $n_mlid (number) existing link id
 * @param $s_path (string) link path
 * @param $s_title (string) link title
 * @param $b_primary_menu (boolean) true for promary menu, false for secondary
 * @param $n_weight (number) menu weight
 * @param $n_plid (number) for menu trees, if you want this menu item to be the child of an existing item (use with caution)
 * @param $sid (number)  optional - pass the site id allows for altering /adding menu links programatically to a site
 *
 * @return (number) the mlid of the affected menu or false on failure
 */
function vsite_menu_update_vsite_menu_link($n_mlid, $s_path, $s_title, $b_primary_menu = true, $n_weight = 0, $n_plid = 0, $sid = NULL){
  $vsite = vsite_get_vsite();
	if(!$sid) {
    $sid = $vsite->group->nid;
  }elseif ($vsite->group->nid != $sid){
    $vsite = spaces_load('og', $sid, TRUE);
  }
  
  if(!$sid || !strlen($s_path) || !strlen($s_title)) return false;

  $s_menu = $b_primary_menu? variable_get('scholar_primary_menu',false):variable_get('scholar_secondary_menu',false);
	
   $a_settings = array(
   'delete' => 0,
   'module' => 'menu',
   'has_children' => 0,
   'customized' => 0,
   'options' => array(
     'attributes' => array(
       'site' => $sid,
       'title' => $s_title,
     ),
   ),
   'expanded' => 0,
   'link_title' => $s_title,
   'parent' => $s_menu.':'.$n_plid,  //(Menu Key and Parent link ID 0 for no parent    ie. scholar_secondary_menu:0 for secondary menu at root level)
   'weight' => $n_weight,  //(Link Weight)
   'plid' => $n_plid,  //(Parent Link ID again or 0 for root)
   'menu_name' => $s_menu,
   'link_path' => $s_path,
  );
  
  if(intval($n_mlid)) $a_settings['mlid'] = $n_mlid;
    
  $n_mlid = menu_link_save($a_settings);
  
  //Change Vsite Settings
  $b_settings_changed = false;
  $a_settings_menu = array_key_exists('menus',$vsite->settings)?$vsite->settings['menus'][($b_primary_menu?'primary':'secondary')]:false;
  if($a_settings_menu && !in_array($n_mlid,$a_settings_menu)){
  	$a_settings_menu[] = intval($n_mlid);
  	$b_settings_changed = true;
  	$vsite->settings['menus'][($b_primary_menu?'primary':'secondary')] = $a_settings_menu;
  }//If thier are custom user settings add this menu to them
  
  $a_inactive_menu = array_key_exists('menus',$vsite->settings)?$vsite->settings['menus'][($b_primary_menu?'secondary':'primary')]:false;
  if($a_inactive_menu && in_array($n_mlid,$a_inactive_menu)){
  	unset($a_inactive_menu[array_search($n_mlid,$a_inactive_menu)]);
    $b_settings_changed = true;
  	$vsite->settings['menus'][($b_primary_menu?'secondary':'primary')] = $a_inactive_menu;
  }//Remove the custom link from the menus that it was in
  
  if($b_settings_changed) spaces_save($vsite);
  
  return $n_mlid;
}
