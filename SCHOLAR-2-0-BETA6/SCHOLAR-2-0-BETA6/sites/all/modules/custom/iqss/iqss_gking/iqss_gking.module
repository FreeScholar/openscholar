<?


/**
 * implementation of hook_init()
 */
function iqss_gking_init(){
  if(!iqss_gking_on_gking_site()) return;
  jquery_ui_add(array('ui.tabs'));
  drupal_add_css(drupal_get_path('module', 'vsite')."/theme/jquery_ui/jquery.ui/themes/openscholar/ui.tabs.css");
  drupal_add_css(drupal_get_path('module', 'iqss_gking')."iqss_gking.css");
  drupal_add_js(drupal_get_path('module', 'iqss_gking')."iqss_gking.js");
}

/**
 * Menu callback for garys site
 */
function iqss_gking_menu(){
	$items = array();

	$items['taxonomy/term/biblio/%/%'] = array(
    'title' => 'Taxonomy term',
    'page callback' => 'iqss_gking_biblio_term_page',
    'page arguments' => array(3,4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'taxonomy.pages.inc',
    'file path' => drupal_get_path('module', 'taxonomy'),
  );

  return $items;
}

/**
 * Implementation of hook_theme
 */
function iqss_gking_theme() {
  return array(
    'iqss_gking_term_description' => array(
      'arguments' => array('term' => NULL),
    ),
  );
}

/**
 * Define the gking blocks with hook block
 */
function iqss_gking_block($op = 'list', $delta = false, $edit = array()) {
  if ($op == 'list') {
    $blocks['taxonomy_applications']['info'] = t('Applications');
    $blocks['taxonomy_methods']['info'] = t('Methods');
    $blocks['filter_by_type']['info'] = t("Filter a Category by Content Type");
    return $blocks;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 'taxonomy_applications':
        return _iqss_gking_taxonomy_applications_wgt();
      case 'taxonomy_methods':
        return _iqss_gking_taxonomy_methods_wgt();
      case 'filter_by_type':
         return iqss_gking_filter_by_type_block();
    }
  }
}

/**
 * Block to filter a taxonomy by type
 */
function iqss_gking_filter_by_type_block(){

  $router_item = menu_get_item();
  if(strpos($router_item['path'],'taxonomy/term') !== 0) return array();

  $view = views_get_view('publication_types');
  $view->init();
  $view->set_display('block_2');
  $view->set_arguments(array( current($router_item['page_arguments']) ));

  //Change to the tax. path
  $view->display['page_1']->handler->options['path'] = "taxonomy/term/biblio/%/%";
  $view->execute();

  $output = $view->render();
  if(!$output) return array();

  $a_term = taxonomy_get_term(current($router_item['page_arguments']));

  return count($view->result)?array('subject' => $a_term->name." by Publication Type",'content' => $output):array();
}

/**
 * Add blocks that can be used on garys site (these will show in cp/layout)
 * @param array $contexts (by ref)
 */
function iqss_gking_context_default_contexts_alter(&$contexts){
	if(!iqss_gking_on_gking_site()) return;

	//Add this block to the front context on Garys site
	$a_block_info = iqss_gking_block();
	$contexts['scholar-feature-front']->block['iqss_gking_taxonomy_applications'] = array(
	  'module' => 'iqss_gking',
		'delta' => 'taxonomy_applications',
		'weight' => 0,
		'region' => 'left',
		'status' => 0,
	  'label' => $a_block_info['taxonomy_applications']['info'],
	  'type' => 'context_ui',
	);
	$contexts['scholar-feature-front']->block['iqss_gking_taxonomy_methods'] = array(
    'module' => 'iqss_gking',
    'delta' => 'taxonomy_methods',
    'weight' => 1,
    'region' => 'left',
    'status' => 0,
    'label' => $a_block_info['taxonomy_methods']['info'],
    'type' => 'context_ui',
  );

}

/**
 * Function that determines if we are in gking's site
 */
function iqss_gking_on_gking_site(){
  $vsite = vsite_get_vsite();

  return ($vsite && $vsite->purl == 'gking');
}


/**
 * theme a term with description
 * @param object $term
 */
function theme_iqss_gking_term_description($term){

  $term_path = "taxonomy/term/$term->tid";
  //$term_link = l(' Learn More', $term_path);

  $item = '<span class="term_title">' . l($term->name,$term_path) . '</span> '. $term->description; //$term_link;

  return $item;
}


function theme_iqss_gking_dl($term){

  $term_path = "taxonomy/term/$term->tid";
  $term_link = l('More', $term_path, array('attributes'=>array('class'=>'more')));
  $item = '<dt><span>' . $term->name . $term_link . '</span><dd>'. $term->description . '</dd>';
  return $item;
}



/**
 * Return the block contents for the area of research-applications block
 */
function _iqss_gking_taxonomy_methods_wgt(){

  $vsite = vsite_get_vsite();
  if(!iqss_gking_on_gking_site()) return array();

  $output = "";
  foreach ($vsite->get_vocabs($type) as $n_vid => $o_vocab){
    if($o_vocab->name != "Research Interests") continue;

    $tree = taxonomy_get_tree($n_vid,0,-1,2);

    foreach ($tree as $n_index => $o_vocab){
      if($o_vocab->name != "Methods" || $o_vocab->depth != 0) continue;
      $n_index++;
      $items = vsite_taxonomy_build_list_items($n_index, $tree, 'iqss_gking_term_description');
      $output .= theme('iqss_gking_dl', $items);
      break;
    }
    break;
  }

  return array('subject' => "Research Methods",'content' => $output);
}

/**
 * Return the block contents for the area of research-applications block
 */
function _iqss_gking_taxonomy_applications_wgt(){

	$vsite = vsite_get_vsite();
	if(!iqss_gking_on_gking_site()) return array();

	$output = "";
  foreach ($vsite->get_vocabs($type) as $n_vid => $o_vocab){
  	if($o_vocab->name != "Research Interests") continue;

  	$tree = taxonomy_get_tree($n_vid,0,-1,2);

  	foreach ($tree as $n_index => $o_vocab){
  		if($o_vocab->name != "Applications" || $o_vocab->depth != 0) continue;
  		$n_index++;
  		$items = vsite_taxonomy_build_list_items($n_index , $tree, 'iqss_gking_term_description');
      $output .= theme('item_list', $items);
      break;
  	}
  	break;
  }

	return array('subject' => "Research Applications",'content' => $output);
}

function iqss_gking_context_active_contexts_alter(&$contexts){
  if(!iqss_gking_on_gking_site()) return;

  $vsite = vsite_get_vsite();
  $router_item = menu_get_item();
  if(strpos($router_item['path'],'taxonomy/term') === 0){

  	//The next few lines just make sure that we are in gary's research interest tax.
  	$n_vid = false;
  	foreach ($vsite->get_vocabs($type) as $vid => $o_vocab){
	    if($o_vocab->name == "Research Interests"){
	    	$n_vid = $vid;
	    	break;
	    }
    }

    $a_term = taxonomy_get_term(current($router_item['page_arguments']));
    if($a_term->vid == $n_vid){
		  //Add this block category pages on Garys site
		  $a_block_info = iqss_gking_block();
		  $contexts['vsite-section-public']->block['iqss_gking_taxonomy_applications'] = array(
		    'module' => 'iqss_gking',
		    'delta' => 'taxonomy_applications',
		    'weight' => -20,
		    'region' => 'right',
		    'status' => 0,
		    'label' => $a_block_info['taxonomy_applications']['info'],
		    'type' => 'context_ui',
		  );
		  $contexts['vsite-section-public']->block['iqss_gking_taxonomy_methods'] = array(
		    'module' => 'iqss_gking',
		    'delta' => 'taxonomy_methods',
		    'weight' => -20,
		    'region' => 'right',
		    'status' => 0,
		    'label' => $a_block_info['taxonomy_methods']['info'],
		    'type' => 'context_ui',
		  );
    }

	  //Add this block category pages on (Lets you filter the category by publictaion type)
	  $contexts['vsite-section-public']->block['filter_by_type-filter_by_type'] = array(
	      'module' => 'iqss_gking',
	      'delta' => 'filter_by_type',
	      'weight' => -21,
	      'region' => 'right',
	      'status' => '0',
	      'label' => 'Filter Taxonomy by Publication Type',
	      'type' => 'context_ui',
	  );
  }

}

/**
 * Menu callback; displays all nodes associated with a term by publication type
 */
function iqss_gking_biblio_term_page($str_tids, $s_biblio_type){
  $terms = taxonomy_terms_parse_string($str_tids);

  if ($terms['tids']) {
    $result = db_query(db_rewrite_sql('SELECT t.tid, t.name FROM {term_data} t WHERE t.tid IN ('. db_placeholders($terms['tids']) .')', 't', 'tid'), $terms['tids']);
    $tids = array(); // we rebuild the $tids-array so it only contains terms the user has access to.
    $names = array();
    while ($term = db_fetch_object($result)) {
      $tids[] = $term->tid;
      $names[] = $term->name;
    }

    if ($names) {
      $title = implode(', ', $names);
      drupal_set_title(check_plain($title));

      $descendant_tids = array();
      foreach ($tids as $index => $tid) {
        $term = taxonomy_get_term($tid);
        $tree = taxonomy_get_tree($term->vid, $tid, -1, 0);
        $descendant_tids[] = array_merge(array($tid), array_map('_taxonomy_get_tid_from_term', $tree));
      }

      $args = call_user_func_array('array_merge', $descendant_tids);
      $placeholders = db_placeholders($args, 'int');
      $args[] = str_replace("-"," ",$s_biblio_type);

      $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n INNER JOIN {term_node} tn ON n.vid = tn.vid INNER JOIN {biblio} b ON b.nid = n.nid INNER JOIN {biblio_types} bt ON b.biblio_type = bt.tid  WHERE tn.tid IN ('. $placeholders .') AND bt.name LIKE \'%s\' AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC';

      return theme('taxonomy_term_page', $tids, db_query($sql, $args));

    }
  }
}