<?php

include_once('vsite.features.inc');

function vsite_menu_alter(&$items){
  $items['node']['page callback'] = 'vsite_vsiteboot';
}

function vsite_menu(){
  $items = array();
 
  // nodeautocomplete callback for scholar 
  $items['vsite/node/autocomplete'] = array(
    'type' => MENU_CALLBACK, 
    'title' => 'something', 
    'page callback' => 'vsite_node_autocomplete', 
    'file' => 'nodeautocomplete.inc', 
    'access arguments' => array(
      'access content' 
    ), 
    'file path' => drupal_get_path('module', 'vsite') . '/includes' 
  );
  
  return $items;
}

function vsite_vsiteboot(){
  $scholar_installed = variable_get('scholar_installed', 0);
  if (! $scholar_installed) {
    // from development seed code
    system_theme_data(); // Rebuild theme cache.
    _block_rehash(); // Rebuild block cache.
    views_invalidate_cache(); // Rebuild the views.
    menu_rebuild(); // Rebuild the menu.
    features_rebuild(); // Features rebuild scripts.

    module_load_include('inc', 'vsite', 'includes/vsiteboot');

    _scholar_testingcontent();
    _vsite_filefield_paths_config();
    _vsite_global_taxonomy();
    _vsite_flags_boot();
    
    // set some default variables
    _vsite_variables_default();

    variable_set('scholar_installed', 1);

    //import D5 scholars site content - Called after scholar_installed 
    //variable is set to 1 so it isn't continuous loop
    simport_import();
  }
  // return nothing
  drupal_set_title('Scholars\'s Web Sites Project');
  return '';
}

/**
 * Implementation of hook_views_api().
 */
function vsite_views_api(){
  return array(
    'api' => 2
  );
}

/**
 * Implementation of hook_strongarm()
 */
function vsite_strongarm(){
  $conf = array();
  
  $conf['og_content_type_usage_vsite'] = 'group';
  
  $conf['scholar_content_type'] = 'vsite';
  $conf['menu_primary_links_source'] = 'features';
  
  // scholar menus TODO change to vsite_*
  $conf['scholar_primary_menu'] = 'features';
  $conf['scholar_secondary_menu'] = 'scholar_secondary_menu';
  

  /*
  $conf['node_options_page'] = 
  array (
    0 => 'status',
  );
  */
  
  $conf['upload_list_default'] = "1";
  $conf['upload_extensions_default'] = "jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp";
  $conf['upload_uploadsize_default'] = "5";
  $conf['upload_usersize_default'] = "100";
  //$conf['upload_max_resolution'] = 0;
  

  // itweak settings
  

  $node_types = node_get_types();
  foreach ( $node_types as $type ) {
    
    $conf['node_options_'. $type -> type] = array('status');
    
    // itweak
    $conf["itweak_upload_collapse_" . $type->type] = '0';
    $conf["itweak_upload_node_display_" . $type->type] = '3';
    $conf["itweak_upload_teaser_display_" . $type->type] = '3';
    $conf["itweak_upload_teaser_images_" . $type->type] = '8';
    $conf["itweak_upload_thumbnail_link_default_" . $type->type] = '_default';
    $conf["itweak_upload_thumbnail_link_node_" . $type->type] = 'lightbox2slideshow';
    $conf["itweak_upload_thumbnail_link_teaser_" . $type->type] = 'lightbox2slideshow';
    $conf["itweak_upload_thumbnail_link_upload_" . $type->type] = '_default';
    $conf["itweak_upload_thumbnail_preset_default_" . $type->type] = '_default';
    $conf["itweak_upload_thumbnail_preset_node_" . $type->type] = '_default';
    $conf["itweak_upload_thumbnail_preset_teaser_" . $type->type] = '_default';
    $conf["itweak_upload_thumbnail_preset_upload_" . $type->type] = '_default';
    $conf["itweak_upload_upload_preview_" . $type->type] = 1;
  
  }
  
  // path for vsite itself
  $conf["pathauto_node_vsite_pattern"] = "[space-og-path]/[title-raw]";
  
  return $conf;
}


/**
 * Includes different inc files
 */
function vsite_include($inc_files){
  $inc_files = is_array($inc_files) ? $inc_files : array($inc_files);

  $path = dirname(__FILE__);

  foreach ($inc_files as $inc) {
    if (file_exists("$path/includes/$inc.inc")) {
      include_once "$path/includes/$inc.inc";
    }
  }
}

/**
 * Implementation of preprocess_views_view().
 */
function vsite_preprocess_views_view(&$vars) {
  if ($feature = context_get('scholar', 'feature')) {
    $contexts = context_enabled_contexts();
    $context = isset($contexts["scholar-feature-{$feature}"]) ? $contexts["scholar-feature-{$feature}"] : NULL;
    $view = $vars['view'];
    $space = spaces_get_space();

    if ($space && $context && strpos($view->current_display, 'page') !== FALSE && empty($view->result) && empty($vars['empty'])) {
      static $once;
      if (!$once) {
        $once = TRUE;

        $output = '';
        global $user;

        // Get the first nodetype
        if (!empty($context->node)) {
          reset($context->node);
          $nodetype = current($context->node);
        }

        if (!empty($nodetype) && node_access('create', $nodetype) && ($space->type == 'og')) {
          $types = node_get_types();
          if ($type = $types[$nodetype]) {
            $output .= '<div class="empty-content"><p>' .t('Please add your first <span class="show-content-type">!type</span> to get started:', array('!type' => $type->name)) .'</p>';
            $output .=  theme('context_links', context_links()) ."</div>";
          }
        }
        else {
          $output .= t('There is currently no content to view in this section.');
        }
        $vars['empty'] = $output;
      }
    }
  }
}

/**
 * Alter the scholar feature views
 * 
 * @param $view
 */
function vsite_views_pre_render(&$view) {
	$views = spaces_features_map('views');
	if(in_array($view->name,array_keys($views))  && !$view->display['default']->handler->get_option('empty')){
		$view->display['default']->handler->set_option('empty',t(' '));
	}//Provide some empty text if none exists so that views are always rendered (fixes customize 'quirk')
}
/** API functions **/


/**
 * API function for getting the active site
 */
function vsite_get_vsite(){
  $space = spaces_get_space();
  $scholar_content_type = variable_get('scholar_content_type', 'vsite');
  if ($space && $space -> type == 'og' && $space -> group -> type == $scholar_content_type ){
    return $space;
  }
  else {
    return NULL;
  }
}


/**
 * API function for testing wether we are on the front page of a vsite
 * TODO there are different ways of doing this
 * - as a full context "context_vsite_home" which has bloocks etc
 * - set context in hook init and then get it here
 */
function vsite_is_front(){
  $vsite = vsite_get_vsite();
  $active_menu = menu_get_item();
  return ($vsite && $active_menu['path'] == 'home') ? TRUE : FALSE;
}

/**
 * hook spaces_presets
 */
function vsite_spaces_presets(){
  $items = array();
  vsite_include('vsiteapi');
  $options = vsite_content_types();
  $items['vsite'] = array(
    'name' => 'Scholar site preset', 
    'description' => 'Scholar site preset', 
    'preset' => array(
      'features' => array(
        'scholar_publications' => '2', 
        'scholar_biocv' => '2', 
        'scholar_classes' => '2' 
      ), 
      'locked' => array(
        'features' => array(
          'scholar_links' => 0, 
          'scholar_announcements' => 0, 
          'scholar_blog' => 0 
        ), 
        'settings' => array(
          'home' => 0 
        ) 
      ), 
      'og' => array(
        'og_selective' => '3', 
        'og_register' => 0, 
        'og_directory' => 1, 
        'og_private' => 0 
      ) 
    ), 
    'type' => 'og' 
  );
  
  //Put default settings here
  $items['vsite']['preset']['settings'] = array(
    'home' => 'blog', 
    'front' => array(
      'frontpage' => 'feature', 
      'node_options' => $options,
    ),
    'theme' => 'scholar_theme_01',  // TODO make this settings for the site-wide admin to chose
    'generic' => array(
    	'admin_menu'=> 0 , 
      'contact_form'=> 1,
      'contact_form_anonymous'=> 1,
    	'shield' => drupal_get_path('module','vsite_generic_settings')."/theme/shields/harvard_shield.png"),
  );
  
  $items['vsite']['preset']['settings']['site'] = array('headline' => "",'sub_heading' => "");
       
  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */

/*
function vsite_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'presave':
      // switch node's group for non-features
      if (!og_is_omitted_type($node->type)) {
        if (isset($node->spaces_og['gid']) && !in_array($node->spaces_og['gid'], $node->og_groups)) {
          $node->og_groups = array($node->spaces_og['gid'] => $node->spaces_og['gid']);
        }
      }
      break;
  }
}
*/

function vsite_preprocess_page(&$vars){
  
  if ($feature = context_get('scholar', 'feature')) {
    drupal_add_css(drupal_get_path('module', 'scholar_' . $feature) . '/scholar_' . $feature . '.css');
    $vars['css'] = drupal_add_css();
    $vars['styles'] = drupal_get_css();
  }
}

function vsite_theme_registry_alter(&$theme_registry){
  $original_path = array_shift($theme_registry['node']['theme paths']);
  $features =  $features = spaces_features('og');
  $new_paths = array();
  foreach ($features as $feature){
    $this_module_path = drupal_get_path('module', $feature -> name);
    $new_paths[] = $this_module_path;
  }
  array_unshift($new_paths, $original_path);
  $theme_registry['node']['theme paths'] = array_merge($new_paths,$theme_registry['node']['theme paths'] );
      //array_unshift($theme_registry['node']['theme paths'], $original_path, $this_module_path);
}


/**
 * Implementation of hook_form_alter()
 **/
function vsite_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    default:
      if ($form['#id'] == 'node-form' && (arg(0) .'/'. arg(1) != 'admin/content')) {
        // GROUP ENABLED CONTENT TYPES
        if(array_key_exists('spaces_og',$form)){
          // Recurse into spaces_og hiding the site select form
          _spaces_og_make_hidden($form['spaces_og']);
        }
        
        if(array_key_exists('spaces',$form)){
          //Get rid of the incorect description
          _spaces_og_make_hidden($form['spaces']);
        }
      }
      
      if (isset($form['type']) && isset($form['#node'])
      && ($form_id == $form['type']['#value'] .'_node_form')) {
        
        if(module_exists('override_node_options') && array_key_exists('revision_information',$form) && array_key_exists('options',$form)){
          if(array_key_exists('log',$form['revision_information'])){
          	$form['options']['log'] = $form['revision_information']['log'];
          	if(!is_array($form['#validate'])) $form['#validate'] = array();
          	if(!in_array('cp_validate_node_flags',$form['#validate'])) $form['#validate'][] = 'vsite_validate_node_flags';
          }
          
        	_spaces_og_make_hidden($form['revision_information']);
        }//Move the revision information under the options tab
        
        $nid = !empty($form['nid']['#value']) ? $form['nid']['#value'] : NULL;
        if(module_exists('override_node_options') && array_key_exists('options',$form)){
        	drupal_add_js(drupal_get_path('module', 'vsite') . '/theme/vsite_verticaltabs_options.js','module','header',false,true,false);
        	$vsite = vsite_get_vsite();
        	if(array_key_exists('override_publishing_promote',$form['options'])){
        		_spaces_og_make_hidden($form['options']['override_publishing_promote']);
        	}
        	
          if($vsite->settings['front']['frontpage'] == 'flag'){
            $form['options']['vsite_promote_to_front'] = array('#type' => 'checkbox', '#title' => "Promote to front page", "#default_value" => false); 
            if($nid){
            	$flag = flag_get_flag('vsite_frontpage');
              $form['options']['vsite_promote_to_front']['#default_value'] = $flag->is_flagged($nid);
            } 
          }
          
          $form['options']['vsite_make_featured'] = array('#type' => 'checkbox', '#title' => "Make this Featured", "#default_value" => false);
          if($nid){
            $flag = flag_get_flag('featuredposts');
            $form['options']['vsite_make_featured']['#default_value'] = $flag->is_flagged($nid);
          } 
        }//Overide the default promote functionality in favor of ours
        
      }
      break;
  }
}

/**
 * Validate our custom arranged flags
 * @param $form array
 * @param $form_state array
 */
function vsite_validate_node_flags($form, &$form_state){
	//Reassign back to revision info for submission
	if(isset($form_state['values']['options']['log'])) $form_state['values']['log'] = $form_state['values']['options']['log'];
}

/**
 * Submit our custom arranged flags
 * @param $form_id string
 * @param $form_values array
 */
function vsite_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'update':
    case 'insert':
      // Response to the flag checkboxes added to the form in vsite_form_alter().
      if (isset($node->vsite_promote_to_front)) {
        $s_action = ($node->vsite_promote_to_front == 1)?'flag':'unflag';
		    $flag = flag_get_flag('vsite_frontpage');
		    $flag->flag($s_action,$node->nid);
      }
      
      if (isset($node->vsite_make_featured)) {
        $s_action = ($node->vsite_make_featured == 1)?'flag':'unflag';
        $flag = flag_get_flag('featuredposts');
        $flag->flag($s_action,$node->nid);
      }
      break;
  }
}